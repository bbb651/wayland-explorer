{
  "type": "protocol",
  "name": "ext_session_lock_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright 2021 Isaac Freund\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol allows for a privileged Wayland client to lock the session\nand display arbitrary graphics while the session is locked.\n\nThe compositor may choose to restrict this protocol to a special client\nlaunched by the compositor itself or expose it to all privileged clients,\nthis is compositor policy.\n\nThe client is responsible for performing authentication and informing the\ncompositor when the session should be unlocked. If the client dies while\nthe session is locked the session remains locked, possibly permanently\ndepending on compositor policy.\n\nThe key words \"must\", \"must not\", \"required\", \"shall\", \"shall not\",\n\"should\", \"should not\", \"recommended\",  \"may\", and \"optional\" in this\ndocument are to be interpreted as described in IETF RFC 2119.\n\nWarning! The protocol described in this file is currently in the\ntesting phase. Backward compatible changes may be added together with\nthe corresponding interface version bump. Backward incompatible changes\ncan only be done by creating a new major version of the extension.",
    "summary": "secure session locking with arbitrary graphics"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "ext_session_lock_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This interface is used to request that the session be locked.",
        "summary": "used to lock the session"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "This informs the compositor that the session lock manager object will\nno longer be used. Existing objects created through this interface\nremain valid.",
            "summary": "destroy the session lock manager object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "lock",
          "description": {
            "type": "description",
            "text": "This request creates a session lock and asks the compositor to lock the\nsession. The compositor will send either the ext_session_lock_v1.locked\nor ext_session_lock_v1.finished event on the created object in\nresponse to this request.",
            "summary": "attempt to lock the session"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "ext_session_lock_v1"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "ext_session_lock_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "In response to the creation of this object the compositor must send\neither the locked or finished event.\n\nThe locked event indicates that the session is locked. This means\nthat the compositor must stop rendering and providing input to normal\nclients. Instead the compositor must blank all outputs with an opaque\ncolor such that their normal content is fully hidden.\n\nThe only surfaces that should be rendered while the session is locked\nare the lock surfaces created through this interface and optionally,\nat the compositor's discretion, special privileged surfaces such as\ninput methods or portions of desktop shell UIs.\n\nThe locked event must not be sent until a new \"locked\" frame (either\nfrom a session lock surface or the compositor blanking the output) has\nbeen presented on all outputs and no security sensitive normal/unlocked\ncontent is possibly visible.\n\nThe finished event should be sent immediately on creation of this\nobject if the compositor decides that the locked event will not be sent.\n\nThe compositor may wait for the client to create and render session lock\nsurfaces before sending the locked event to avoid displaying intermediate\nblank frames. However, it must impose a reasonable time limit if\nwaiting and send the locked event as soon as the hard requirements\ndescribed above can be met if the time limit expires. Clients should\nimmediately create lock surfaces for all outputs on creation of this\nobject to make this possible.\n\nThis behavior of the locked event is required in order to prevent\npossible race conditions with clients that wish to suspend the system\nor similar after locking the session. Without these semantics, clients\ntriggering a suspend after receiving the locked event would race with\nthe first \"locked\" frame being presented and normal/unlocked frames\nmight be briefly visible as the system is resumed if the suspend\noperation wins the race.\n\nIf the client dies while the session is locked, the compositor must not\nunlock the session in response. It is acceptable for the session to be\npermanently locked if this happens. The compositor may choose to continue\nto display the lock surfaces the client had mapped before it died or\nalternatively fall back to a solid color, this is compositor policy.\n\nCompositors may also allow a secure way to recover the session, the\ndetails of this are compositor policy. Compositors may allow a new\nclient to create a ext_session_lock_v1 object and take responsibility\nfor unlocking the session, they may even start a new lock client\ninstance automatically.",
        "summary": "manage lock state and create lock surfaces"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "This informs the compositor that the lock object will no longer be\nused. Existing objects created through this interface remain valid.\n\nAfter this request is made, lock surfaces created through this object\nshould be destroyed by the client as they will no longer be used by\nthe compositor.\n\nIt is a protocol error to make this request if the locked event was\nsent, the unlock_and_destroy request must be used instead.",
            "summary": "destroy the session lock"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_lock_surface",
          "description": {
            "type": "description",
            "text": "The client is expected to create lock surfaces for all outputs\ncurrently present and any new outputs as they are advertised. These\nwon't be displayed by the compositor unless the lock is successful\nand the locked event is sent.\n\nProviding a wl_surface which already has a role or already has a buffer\nattached or committed is a protocol error, as is attaching/committing\na buffer before the first ext_session_lock_surface_v1.configure event.\n\nAttempting to create more than one lock surface for a given output\nis a duplicate_output protocol error.",
            "summary": "create a lock surface for a given output"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "ext_session_lock_surface_v1"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "unlock_and_destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "This request indicates that the session should be unlocked, for\nexample because the user has entered their password and it has been\nverified by the client.\n\nThis request also informs the compositor that the lock object will\nno longer be used and should be destroyed. Existing objects created\nthrough this interface remain valid.\n\nAfter this request is made, lock surfaces created through this object\nshould be destroyed by the client as they will no longer be used by\nthe compositor.\n\nIt is a protocol error to make this request if the locked event has\nnot been sent. In that case, the lock object must be destroyed using\nthe destroy request.\n\nNote that a correct client that wishes to exit directly after unlocking\nthe session must use the wl_display.sync request to ensure the server\nreceives and processes the unlock_and_destroy request. Otherwise\nthere is no guarantee that the server has unlocked the session due\nto the asynchronous nature of the Wayland protocol. For example,\nthe server might terminate the client with a protocol error before\nit processes the unlock_and_destroy request.",
            "summary": "unlock the session, destroying the object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "locked",
          "description": {
            "type": "description",
            "text": "This client is now responsible for displaying graphics while the\nsession is locked and deciding when to unlock the session.\n\nThe locked event must not be sent until a new \"locked\" frame has been\npresented on all outputs and no security sensitive normal/unlocked\ncontent is possibly visible.\n\nIf this event is sent, making the destroy request is a protocol error,\nthe lock object must be destroyed using the unlock_and_destroy request.",
            "summary": "session successfully locked"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "finished",
          "description": {
            "type": "description",
            "text": "The compositor has decided that the session lock should be destroyed\nas it will no longer be used by the compositor. Exactly when this\nevent is sent is compositor policy, but it must never be sent more\nthan once for a given session lock object.\n\nThis might be sent because there is already another ext_session_lock_v1\nobject held by a client, or the compositor has decided to deny the\nrequest to lock the session for some other reason. This might also\nbe sent because the compositor implements some alternative, secure\nway to authenticate and unlock the session.\n\nThe finished event should be sent immediately on creation of this\nobject if the compositor decides that the locked event will not\nbe sent.\n\nIf the locked event is sent on creation of this object the finished\nevent may still be sent at some later time in this object's\nlifetime. This is compositor policy.\n\nUpon receiving this event, the client should make either the destroy\nrequest or the unlock_and_destroy request, depending on whether or\nnot the locked event was received on this object.",
            "summary": "the session lock object should be destroyed"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_destroy",
              "value": "0",
              "summary": "attempted to destroy session lock while locked"
            },
            {
              "type": "entry",
              "name": "invalid_unlock",
              "value": "1",
              "summary": "unlock requested but locked event was never sent"
            },
            {
              "type": "entry",
              "name": "role",
              "value": "2",
              "summary": "given wl_surface already has a role"
            },
            {
              "type": "entry",
              "name": "duplicate_output",
              "value": "3",
              "summary": "given output already has a lock surface"
            },
            {
              "type": "entry",
              "name": "already_constructed",
              "value": "4",
              "summary": "given wl_surface has a buffer attached or committed"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "ext_session_lock_surface_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The client may use lock surfaces to display a screensaver, render a\ndialog to enter a password and unlock the session, or however else it\nsees fit.\n\nOn binding this interface the compositor will immediately send the\nfirst configure event. After making the ack_configure request in\nresponse to this event the client should attach and commit the first\nbuffer. Committing the surface before acking the first configure is a\nprotocol error. Committing the surface with a null buffer at any time\nis a protocol error.\n\nThe compositor is free to handle keyboard/pointer focus for lock\nsurfaces however it chooses. A reasonable way to do this would be to\ngive the first lock surface created keyboard focus and change keyboard\nfocus if the user clicks on other surfaces.",
        "summary": "a surface displayed while the session is locked"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "This informs the compositor that the lock surface object will no\nlonger be used.\n\nIt is recommended for a lock client to destroy lock surfaces if\ntheir corresponding wl_output global is removed.\n\nIf a lock surface on an active output is destroyed before the\next_session_lock_v1.unlock_and_destroy event is sent, the compositor\nmust fall back to rendering a solid color.",
            "summary": "destroy the lock surface object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "ack_configure",
          "description": {
            "type": "description",
            "text": "When a configure event is received, if a client commits the surface\nin response to the configure event, then the client must make an\nack_configure request sometime before the commit request, passing\nalong the serial of the configure event.\n\nIf the client receives multiple configure events before it can\nrespond to one, it only has to ack the last configure event.\n\nA client is not required to commit immediately after sending an\nack_configure request - it may even ack_configure several times\nbefore its next surface commit.\n\nA client may send multiple ack_configure requests before committing,\nbut only the last request sent before a commit indicates which\nconfigure event the client really is responding to.\n\nSending an ack_configure request consumes the configure event\nreferenced by the given serial, as well as all older configure events\nsent on this object.\n\nIt is a protocol error to issue multiple ack_configure requests\nreferencing the same configure event or to issue an ack_configure\nrequest referencing a configure event older than the last configure\nevent acked for a given lock surface.",
            "summary": "ack a configure event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial from the configure event"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "configure",
          "description": {
            "type": "description",
            "text": "This event is sent once on binding the interface and may be sent again\nat the compositor's discretion, for example if output geometry changes.\n\nThe width and height are in surface-local coordinates and are exact\nrequirements. Failing to match these surface dimensions in the next\ncommit after acking a configure is a protocol error.",
            "summary": "the client should resize its surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial for use in ack_configure"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "commit_before_first_ack",
              "value": "0",
              "summary": "surface committed before first ack_configure request"
            },
            {
              "type": "entry",
              "name": "null_buffer",
              "value": "1",
              "summary": "surface committed with a null buffer"
            },
            {
              "type": "entry",
              "name": "dimensions_mismatch",
              "value": "2",
              "summary": "failed to match ack'd width/height"
            },
            {
              "type": "entry",
              "name": "invalid_serial",
              "value": "3",
              "summary": "serial provided in ack_configure is invalid"
            }
          ]
        }
      ]
    }
  ]
}
