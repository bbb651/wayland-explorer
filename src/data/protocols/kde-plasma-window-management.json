{
  "type": "protocol",
  "name": "plasma_window_management",
  "copyright": {
    "type": "copyright",
    "text": "\nSPDX-FileCopyrightText: 2013-2014 Pier Luigi Fiorini\n\nSPDX-License-Identifier: LGPL-2.1-or-later\n"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "org_kde_plasma_window_management",
      "version": "18",
      "description": {
        "type": "description",
        "text": "This interface manages application windows.\nIt provides requests to show and hide the desktop and emits\nan event every time a window is created so that the client can\nuse it to manage the window.\n\nOnly one client can bind this interface at a time.\n\nWarning! The protocol described in this file is a desktop environment\nimplementation detail. Regular clients must not use this protocol.\nBackward incompatible changes may be added without bumping the major\nversion of the extension.",
        "summary": "application windows management"
      },
      "requests": [
        {
          "type": "request",
          "name": "show_desktop",
          "description": {
            "type": "description",
            "text": "Tell the compositor to show/hide the desktop.",
            "summary": "show/hide the desktop"
          },
          "args": [
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "requested state"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_window",
          "description": {
            "type": "description",
            "text": "Deprecated: use get_window_by_uuid",
            "summary": "deprecated"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "internal_window_id",
              "argType": "uint",
              "summary": "The internal window id of the window to create"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_window_by_uuid",
          "since": "12",
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "internal_window_uuid",
              "argType": "string",
              "summary": "The internal window uuiid of the window to create"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_stacking_order",
          "since": "17",
          "description": {
            "type": "description",
            "summary": "get the stacking order"
          },
          "args": [
            {
              "type": "arg",
              "name": "stacking_order",
              "argType": "new_id",
              "interface": "org_kde_plasma_stacking_order"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "show_desktop_changed",
          "description": {
            "type": "description",
            "text": "This event will be sent whenever the show desktop mode changes. E.g. when it is entered\nor left.\n\nOn binding the interface the current state is sent.",
            "summary": "notify the client when the show desktop mode is entered/left"
          },
          "args": [
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "new state"
            }
          ]
        },
        {
          "type": "event",
          "name": "window",
          "description": {
            "type": "description",
            "text": "This event will be sent immediately after a window is mapped.",
            "summary": "notify the client that a window was mapped"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "uint",
              "summary": "Deprecated: internal window Id"
            }
          ]
        },
        {
          "type": "event",
          "name": "stacking_order_changed",
          "since": "11",
          "description": {
            "type": "description",
            "text": "This event will be sent when stacking order changed and on bind.\n\nWith version 17 this event is deprecated and will no longer be sent.",
            "summary": "notify the client when stacking order changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "ids",
              "argType": "array",
              "summary": "internal windows id array"
            }
          ]
        },
        {
          "type": "event",
          "name": "stacking_order_uuid_changed",
          "since": "12",
          "description": {
            "type": "description",
            "text": "This event will be sent when stacking order changed and on bind.\n\nWith version 17 this event is deprecated and will no longer be sent.",
            "summary": "notify the client when stacking order changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "uuids",
              "argType": "string",
              "summary": "internal windows id ;-separated"
            }
          ]
        },
        {
          "type": "event",
          "name": "window_with_uuid",
          "since": "13",
          "description": {
            "type": "description",
            "text": "This event will be sent immediately after a window is mapped.",
            "summary": "notify the client that a window was mapped"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "uint",
              "summary": "Deprecated: internal window Id"
            },
            {
              "type": "arg",
              "name": "uuid",
              "argType": "string",
              "summary": "internal window uuid"
            }
          ]
        },
        {
          "type": "event",
          "name": "stacking_order_changed_2",
          "since": "17",
          "description": {
            "type": "description",
            "text": "This event will be sent when stacking order changed.",
            "summary": "notify the client when stacking order changed"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "state",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "active",
              "value": "0x1"
            },
            {
              "type": "entry",
              "name": "minimized",
              "value": "0x2"
            },
            {
              "type": "entry",
              "name": "maximized",
              "value": "0x4"
            },
            {
              "type": "entry",
              "name": "fullscreen",
              "value": "0x8"
            },
            {
              "type": "entry",
              "name": "keep_above",
              "value": "0x10"
            },
            {
              "type": "entry",
              "name": "keep_below",
              "value": "0x20"
            },
            {
              "type": "entry",
              "name": "on_all_desktops",
              "value": "0x40"
            },
            {
              "type": "entry",
              "name": "demands_attention",
              "value": "0x80"
            },
            {
              "type": "entry",
              "name": "closeable",
              "value": "0x100"
            },
            {
              "type": "entry",
              "name": "minimizable",
              "value": "0x200"
            },
            {
              "type": "entry",
              "name": "maximizable",
              "value": "0x400"
            },
            {
              "type": "entry",
              "name": "fullscreenable",
              "value": "0x800"
            },
            {
              "type": "entry",
              "name": "skiptaskbar",
              "value": "0x1000",
              "since": "2"
            },
            {
              "type": "entry",
              "name": "shadeable",
              "value": "0x2000",
              "since": "3"
            },
            {
              "type": "entry",
              "name": "shaded",
              "value": "0x4000",
              "since": "3"
            },
            {
              "type": "entry",
              "name": "movable",
              "value": "0x8000",
              "since": "3"
            },
            {
              "type": "entry",
              "name": "resizable",
              "value": "0x10000",
              "since": "3"
            },
            {
              "type": "entry",
              "name": "virtual_desktop_changeable",
              "value": "0x20000",
              "since": "3"
            },
            {
              "type": "entry",
              "name": "skipswitcher",
              "value": "0x40000",
              "since": "9"
            }
          ]
        },
        {
          "type": "enum",
          "name": "show_desktop",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "disabled",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "enabled",
              "value": "1"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "org_kde_plasma_window",
      "version": "18",
      "description": {
        "type": "description",
        "text": "Manages and control an application window.\n\nOnly one client can bind this interface at a time.",
        "summary": "interface to control application windows"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_state",
          "description": {
            "type": "description",
            "text": "Set window state.\n\nValues for state argument are described by org_kde_plasma_window_management.state\nand can be used together in a bitfield. The flags bitfield describes which flags are\nsupposed to be set, the state bitfield the value for the set flags",
            "summary": "set window state"
          },
          "args": [
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "bitfield of set state flags"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "bitfield of state flags"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_virtual_desktop",
          "description": {
            "type": "description",
            "text": "Deprecated: use enter_virtual_desktop\nMaps the window to a different virtual desktop.\n\nTo show the window on all virtual desktops, call the\norg_kde_plasma_window.set_state request and specify a on_all_desktops\nstate in the bitfield.",
            "summary": "map window on a virtual desktop"
          },
          "args": [
            {
              "type": "arg",
              "name": "number",
              "argType": "uint",
              "summary": "zero based virtual desktop number"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_minimized_geometry",
          "description": {
            "type": "description",
            "text": "Sets the geometry of the taskbar entry for this window.\nThe geometry is relative to a panel in particular.",
            "summary": "set the geometry for a taskbar entry"
          },
          "args": [
            {
              "type": "arg",
              "name": "panel",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_minimized_geometry",
          "description": {
            "type": "description",
            "text": "Remove the task geometry information for a particular panel.",
            "summary": "set the geometry for a taskbar entry"
          },
          "args": [
            {
              "type": "arg",
              "name": "panel",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "close",
          "description": {
            "type": "description",
            "text": "Close this window.",
            "summary": "close window"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "request_move",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Request an interactive move for this window.",
            "summary": "request move"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "request_resize",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Request an interactive resize for this window.",
            "summary": "request resize"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "since": "4",
          "description": {
            "type": "description",
            "text": "Removes the resource bound for this org_kde_plasma_window.",
            "summary": "remove resource for the org_kde_plasma_window"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_icon",
          "since": "7",
          "description": {
            "type": "description",
            "text": "The compositor will write the window icon into the provided file descriptor.\nThe data is a serialized QIcon with QDataStream.",
            "summary": "Requests to get the window icon"
          },
          "args": [
            {
              "type": "arg",
              "name": "fd",
              "argType": "fd",
              "summary": "file descriptor for the icon"
            }
          ]
        },
        {
          "type": "request",
          "name": "request_enter_virtual_desktop",
          "since": "8",
          "description": {
            "type": "description",
            "text": "Make the window enter a virtual desktop. A window can enter more\nthan one virtual desktop. if the id is empty or invalid, no action will be performed.",
            "summary": "map window on a virtual desktop"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "string",
              "summary": "desktop id"
            }
          ]
        },
        {
          "type": "request",
          "name": "request_enter_new_virtual_desktop",
          "since": "8",
          "description": {
            "type": "description",
            "text": "RFC: do this with an empty id to request_enter_virtual_desktop?\nMake the window enter a new virtual desktop. If the server consents the request,\nit will create a new virtual desktop and assign the window to it.",
            "summary": "map window on a virtual desktop"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "request_leave_virtual_desktop",
          "since": "8",
          "description": {
            "type": "description",
            "text": "Make the window exit a virtual desktop. If it exits all desktops it will be considered on all of them.",
            "summary": "remove a window from a virtual desktop"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "string",
              "summary": "desktop id"
            }
          ]
        },
        {
          "type": "request",
          "name": "request_enter_activity",
          "since": "14",
          "description": {
            "type": "description",
            "text": "Make the window enter an activity. A window can enter more activity. If the id is empty or invalid, no action will be performed.",
            "summary": "map window on an activity"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "string",
              "summary": "activity id"
            }
          ]
        },
        {
          "type": "request",
          "name": "request_leave_activity",
          "since": "14",
          "description": {
            "type": "description",
            "text": "Make the window exit a an activity. If it exits all activities it will be considered on all of them.",
            "summary": "remove a window from an activity"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "string",
              "summary": "activity id"
            }
          ]
        },
        {
          "type": "request",
          "name": "send_to_output",
          "since": "15",
          "description": {
            "type": "description",
            "text": "Requests this window to be displayed in a specific output.",
            "summary": "send window to specified output"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "title_changed",
          "description": {
            "type": "description",
            "text": "This event will be sent as soon as the window title is changed.",
            "summary": "window title has been changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "title",
              "argType": "string",
              "summary": "window title"
            }
          ]
        },
        {
          "type": "event",
          "name": "app_id_changed",
          "description": {
            "type": "description",
            "text": "This event will be sent as soon as the application\nidentifier is changed.",
            "summary": "application identifier has been changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "app_id",
              "argType": "string"
            }
          ]
        },
        {
          "type": "event",
          "name": "state_changed",
          "description": {
            "type": "description",
            "text": "This event will be sent as soon as the window state changes.\n\nValues for state argument are described by org_kde_plasma_window_management.state.",
            "summary": "window state has been changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "bitfield of state flags"
            }
          ]
        },
        {
          "type": "event",
          "name": "virtual_desktop_changed",
          "description": {
            "type": "description",
            "text": "DEPRECATED: use virtual_desktop_entered and virtual_desktop_left instead\nThis event will be sent when a window is moved to another\nvirtual desktop.\n\nIt is not sent if it becomes visible on all virtual desktops though.",
            "summary": "window was moved to another workspace"
          },
          "args": [
            {
              "type": "arg",
              "name": "number",
              "argType": "int",
              "summary": "zero based virtual desktop number"
            }
          ]
        },
        {
          "type": "event",
          "name": "themed_icon_name_changed",
          "description": {
            "type": "description",
            "text": "This event will be sent whenever the themed icon name changes. May be null.",
            "summary": "window's icon name changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string",
              "summary": "the new themed icon name"
            }
          ]
        },
        {
          "type": "event",
          "name": "unmapped",
          "description": {
            "type": "description",
            "text": "This event will be sent immediately after the window is closed\nand its surface is unmapped.",
            "summary": "window's surface was unmapped"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "initial_state",
          "since": "4",
          "description": {
            "type": "description",
            "text": "This event will be sent immediately after all initial state been sent to the client.\nIf the Plasma window is already unmapped, the unmapped event will be sent before the\ninitial_state event.",
            "summary": "All initial known state is submitted"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "parent_window",
          "since": "5",
          "description": {
            "type": "description",
            "text": "This event will be sent whenever the parent window of this org_kde_plasma_window changes.\nThe passed parent is another org_kde_plasma_window and this org_kde_plasma_window is a\ntransient window to the parent window. If the parent argument is null, this\norg_kde_plasma_window does not have a parent window.",
            "summary": "The parent window changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "parent",
              "argType": "object",
              "summary": "The parent window",
              "interface": "org_kde_plasma_window",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "event",
          "name": "geometry",
          "since": "6",
          "description": {
            "type": "description",
            "text": "This event will be sent whenever the window geometry of this org_kde_plasma_window changes.\nThe coordinates are in absolute coordinates of the windowing system.",
            "summary": "The geometry of this window in absolute coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position of the org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position of the org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint",
              "summary": "width of the org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint",
              "summary": "height of the org_kde_plasma_window"
            }
          ]
        },
        {
          "type": "event",
          "name": "icon_changed",
          "since": "7",
          "description": {
            "type": "description",
            "text": "This event will be sent whenever the icon of the window changes, but there is no themed\nicon name. Common examples are Xwayland windows which have a pixmap based icon.\n\nThe client can request the icon using get_icon.",
            "summary": "The icon of the window changed"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "pid_changed",
          "description": {
            "type": "description",
            "text": "This event will be sent when the compositor has set the process id this window belongs to.\nThis should be set once before the initial_state is sent.",
            "summary": "process id of application owning the window has changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "pid",
              "argType": "uint",
              "summary": "process id"
            }
          ]
        },
        {
          "type": "event",
          "name": "virtual_desktop_entered",
          "since": "8",
          "description": {
            "type": "description",
            "text": "This event will be sent when the window has entered a new virtual desktop. The window can be on more than one desktop, or none: then is considered on all of them.",
            "summary": "the window entered a new virtual desktop"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "string",
              "summary": "desktop id"
            }
          ]
        },
        {
          "type": "event",
          "name": "virtual_desktop_left",
          "since": "8",
          "description": {
            "type": "description",
            "text": "This event will be sent when the window left a virtual desktop. If the window leaves all desktops, it can be considered on all.\nIf the window gets manually added on all desktops, the server has to send virtual_desktop_left for every previous desktop it was in for the window to be really considered on all desktops.",
            "summary": "the window left a virtual desktop"
          },
          "args": [
            {
              "type": "arg",
              "name": "is",
              "argType": "string",
              "summary": "desktop id"
            }
          ]
        },
        {
          "type": "event",
          "name": "application_menu",
          "since": "10",
          "description": {
            "type": "description",
            "text": "This event will be sent after the application menu\nfor the window has changed.",
            "summary": "notify the client that the current appmenu changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "service_name",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "object_path",
              "argType": "string"
            }
          ]
        },
        {
          "type": "event",
          "name": "activity_entered",
          "since": "14",
          "description": {
            "type": "description",
            "text": "This event will be sent when the window has entered an activity. The window can be on more than one activity, or none: then is considered on all of them.",
            "summary": "the window entered an activity"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "string",
              "summary": "activity id"
            }
          ]
        },
        {
          "type": "event",
          "name": "activity_left",
          "since": "14",
          "description": {
            "type": "description",
            "text": "This event will be sent when the window left an activity. If the window leaves all activities, it will be considered on all.\nIf the window gets manually added on all activities, the server has to send activity_left for every previous activity it was in for the window to be really considered on all activities.",
            "summary": "the window left an activity"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "string",
              "summary": "activity id"
            }
          ]
        },
        {
          "type": "event",
          "name": "resource_name_changed",
          "since": "16",
          "description": {
            "type": "description",
            "text": "This event will be sent when the X11 resource name of the window has changed.\nThis is only set for XWayland windows.",
            "summary": "X11 resource name has changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "resource_name",
              "argType": "string",
              "summary": "resource name"
            }
          ]
        },
        {
          "type": "event",
          "name": "client_geometry",
          "since": "18",
          "description": {
            "type": "description",
            "text": "This event will be sent whenever the window geometry of this org_kde_plasma_window changes.\nThe coordinates are in absolute coordinates of the windowing system.",
            "summary": "The client geometry (i.e. without decorations etc) of this window in absolute coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position of the org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position of the org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint",
              "summary": "width of the org_kde_plasma_window"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint",
              "summary": "height of the org_kde_plasma_window"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "org_kde_plasma_activation_feedback",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The activation manager interface provides a way to get notified\nwhen an application is about to be activated.",
        "summary": "activation feedback"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the activation manager object. The activation objects introduced\nby this manager object will be unaffected.",
            "summary": "destroy the activation manager object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "activation",
          "description": {
            "type": "description",
            "text": "Will be issued when an app is set to be activated. It offers\nan instance of org_kde_plasma_activation that will tell us the app_id\nand the extent of the activation.",
            "summary": "notify that an app is starting"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "org_kde_plasma_activation"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "org_kde_plasma_activation",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Notify the compositor that the org_kde_plasma_activation object will no\nlonger be used.",
            "summary": "destroy the org_kde_plasma_activation object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "app_id",
          "description": {
            "type": "description",
            "summary": "Offers the app_id"
          },
          "args": [
            {
              "type": "arg",
              "name": "app_id",
              "argType": "string",
              "summary": "application id, as described in xdg_activation_v1"
            }
          ]
        },
        {
          "type": "event",
          "name": "finished",
          "description": {
            "type": "description",
            "summary": "Notifies about activation finished, either by activation or because it got invalidated"
          },
          "args": []
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "org_kde_plasma_stacking_order",
      "version": "17",
      "description": {
        "type": "description",
        "text": "When this object is created, the compositor sends a window event for\neach window in the stacking order, and afterwards sends the done event\nand destroys this object.",
        "summary": "helper object for sending the stacking order"
      },
      "requests": [],
      "events": [
        {
          "type": "event",
          "name": "window",
          "description": {
            "type": "description",
            "summary": "a window in the stacking order list"
          },
          "args": [
            {
              "type": "arg",
              "name": "uuid",
              "argType": "string",
              "summary": "window uuid"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "eventType": "destructor",
          "description": {
            "type": "description",
            "summary": "marks the end of the list"
          },
          "args": []
        }
      ],
      "enums": []
    }
  ]
}
