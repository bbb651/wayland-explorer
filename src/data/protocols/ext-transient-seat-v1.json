{
  "type": "protocol",
  "name": "ext_transient_seat_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2020 - 2023 Andri Yngvason\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "The transient seat protocol can be used by privileged clients to create\nindependent seats that will be removed from the compositor when the client\ndestroys its transient seat.\n\nThis protocol is intended for use with virtual input protocols such as\n\"virtual_keyboard_unstable_v1\" or \"wlr_virtual_pointer_unstable_v1\", both\nof which allow the user to select a seat.\n\nThe \"wl_seat\" global created by this protocol does not generate input events\non its own, or have any capabilities except those assigned to it by other\nprotocol extensions, such as the ones mentioned above.\n\nFor example, a remote desktop server can create a seat with virtual inputs\nfor each remote user by following these steps for each new connection:\n* Create a transient seat\n* Wait for the transient seat to be created\n* Locate a \"wl_seat\" global with a matching name\n* Create virtual inputs using the resulting \"wl_seat\" global",
    "summary": "protocol for creating temporary seats"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "ext_transient_seat_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The transient seat manager creates short-lived seats.",
        "summary": "transient seat manager"
      },
      "requests": [
        {
          "type": "request",
          "name": "create",
          "description": {
            "type": "description",
            "text": "Create a new seat that is removed when the client side transient seat\nobject is destroyed.\n\nThe actual seat may be removed sooner, in which case the transient seat\nobject shall become inert.",
            "summary": "create a transient seat"
          },
          "args": [
            {
              "type": "arg",
              "name": "seat",
              "argType": "new_id",
              "interface": "ext_transient_seat_v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the manager.\n\nAll objects created by the manager will remain valid until they are\ndestroyed themselves.",
            "summary": "destroy the manager"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "ext_transient_seat_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "When the transient seat handle is destroyed, the seat itself will also be\ndestroyed.",
        "summary": "transient seat handle"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "When the transient seat object is destroyed by the client, the\nassociated seat created by the compositor is also destroyed.",
            "summary": "destroy transient seat"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "ready",
          "description": {
            "type": "description",
            "text": "This event advertises the global name for the wl_seat to be used with\nwl_registry_bind.\n\nIt is sent exactly once, immediately after the transient seat is created\nand the new \"wl_seat\" global is advertised, if and only if the creation\nof the transient seat was allowed.",
            "summary": "transient seat is ready"
          },
          "args": [
            {
              "type": "arg",
              "name": "global_name",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "denied",
          "description": {
            "type": "description",
            "text": "The event informs the client that the compositor denied its request to\ncreate a transient seat.\n\nIt is sent exactly once, immediately after the transient seat object is\ncreated, if and only if the creation of the transient seat was denied.\n\nAfter receiving this event, the client should destroy the object.",
            "summary": "transient seat creation denied"
          },
          "args": []
        }
      ],
      "enums": []
    }
  ]
}
