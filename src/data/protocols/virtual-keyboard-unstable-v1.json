{
  "type": "protocol",
  "name": "virtual_keyboard_unstable_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright © 2008-2011  Kristian Høgsberg\nCopyright © 2010-2013  Intel Corporation\nCopyright © 2012-2013  Collabora, Ltd.\nCopyright © 2018       Purism SPC\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zwp_virtual_keyboard_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The virtual keyboard provides an application with requests which emulate\nthe behaviour of a physical keyboard.\n\nThis interface can be used by clients on its own to provide raw input\nevents, or it can accompany the input method protocol.",
        "summary": "virtual keyboard"
      },
      "requests": [
        {
          "type": "request",
          "name": "keymap",
          "description": {
            "type": "description",
            "text": "Provide a file descriptor to the compositor which can be\nmemory-mapped to provide a keyboard mapping description.\n\nFormat carries a value from the keymap_format enumeration.",
            "summary": "keyboard mapping"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "keymap format"
            },
            {
              "type": "arg",
              "name": "fd",
              "argType": "fd",
              "summary": "keymap file descriptor"
            },
            {
              "type": "arg",
              "name": "size",
              "argType": "uint",
              "summary": "keymap size, in bytes"
            }
          ]
        },
        {
          "type": "request",
          "name": "key",
          "description": {
            "type": "description",
            "text": "A key was pressed or released.\nThe time argument is a timestamp with millisecond granularity, with an\nundefined base. All requests regarding a single object must share the\nsame clock.\n\nKeymap must be set before issuing this request.\n\nState carries a value from the key_state enumeration.",
            "summary": "key event"
          },
          "args": [
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint",
              "summary": "key that produced the event"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "physical state of the key"
            }
          ]
        },
        {
          "type": "request",
          "name": "modifiers",
          "description": {
            "type": "description",
            "text": "Notifies the compositor that the modifier and/or group state has\nchanged, and it should update state.\n\nThe client should use wl_keyboard.modifiers event to synchronize its\ninternal state with seat state.\n\nKeymap must be set before issuing this request.",
            "summary": "modifier and group state"
          },
          "args": [
            {
              "type": "arg",
              "name": "mods_depressed",
              "argType": "uint",
              "summary": "depressed modifiers"
            },
            {
              "type": "arg",
              "name": "mods_latched",
              "argType": "uint",
              "summary": "latched modifiers"
            },
            {
              "type": "arg",
              "name": "mods_locked",
              "argType": "uint",
              "summary": "locked modifiers"
            },
            {
              "type": "arg",
              "name": "group",
              "argType": "uint",
              "summary": "keyboard layout"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "since": "1",
          "description": {
            "type": "description",
            "summary": "destroy the virtual keyboard keyboard object"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "no_keymap",
              "value": "0",
              "summary": "No keymap was set"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zwp_virtual_keyboard_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A virtual keyboard manager allows an application to provide keyboard\ninput events as if they came from a physical keyboard.",
        "summary": "virtual keyboard manager"
      },
      "requests": [
        {
          "type": "request",
          "name": "create_virtual_keyboard",
          "description": {
            "type": "description",
            "text": "Creates a new virtual keyboard associated to a seat.\n\nIf the compositor enables a keyboard to perform arbitrary actions, it\nshould present an error when an untrusted client requests a new\nkeyboard.",
            "summary": "Create a new virtual keyboard"
          },
          "args": [
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "interface": "wl_seat",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "zwp_virtual_keyboard_v1"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "unauthorized",
              "value": "0",
              "summary": "client not authorized to use the interface"
            }
          ]
        }
      ]
    }
  ]
}
