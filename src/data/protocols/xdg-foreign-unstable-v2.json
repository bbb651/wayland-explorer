{
  "type": "protocol",
  "name": "xdg_foreign_unstable_v2",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2015-2016 Red Hat Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol specifies a way for making it possible to reference a surface\nof a different client. With such a reference, a client can, by using the\ninterfaces provided by this protocol, manipulate the relationship between\nits own surfaces and the surface of some other client. For example, stack\nsome of its own surface above the other clients surface.\n\nIn order for a client A to get a reference of a surface of client B, client\nB must first export its surface using xdg_exporter.export_toplevel. Upon\ndoing this, client B will receive a handle (a unique string) that it may\nshare with client A in some way (for example D-Bus). After client A has\nreceived the handle from client B, it may use xdg_importer.import_toplevel\nto create a reference to the surface client B just exported. See the\ncorresponding requests for details.\n\nA possible use case for this is out-of-process dialogs. For example when a\nsandboxed client without file system access needs the user to select a file\non the file system, given sandbox environment support, it can export its\nsurface, passing the exported surface handle to an unsandboxed process that\ncan show a file browser dialog and stack it above the sandboxed client's\nsurface.\n\nWarning! The protocol described in this file is experimental and backward\nincompatible changes may be made. Backward compatible changes may be added\ntogether with the corresponding interface version bump. Backward\nincompatible changes are done by bumping the version number in the protocol\nand interface names and resetting the interface version. Once the protocol\nis to be declared stable, the 'z' prefix and the version number in the\nprotocol and interface names are removed and the interface version number is\nreset.",
    "summary": "Protocol for exporting xdg surface handles"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zxdg_exporter_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A global interface used for exporting surfaces that can later be imported\nusing xdg_importer.",
        "summary": "interface for exporting surfaces"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Notify the compositor that the xdg_exporter object will no longer be\nused.",
            "summary": "destroy the xdg_exporter object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "export_toplevel",
          "description": {
            "type": "description",
            "text": "The export_toplevel request exports the passed surface so that it can later be\nimported via xdg_importer. When called, a new xdg_exported object will\nbe created and xdg_exported.handle will be sent immediately. See the\ncorresponding interface and event for details.\n\nA surface may be exported multiple times, and each exported handle may\nbe used to create an xdg_imported multiple times. Only xdg_toplevel\nequivalent surfaces may be exported, otherwise an invalid_surface\nprotocol error is sent.",
            "summary": "export a toplevel surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new xdg_exported object",
              "interface": "zxdg_exported_v2"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface to export",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These errors can be emitted in response to invalid xdg_exporter\nrequests.",
            "summary": "error values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "invalid_surface",
              "value": "0",
              "summary": "surface is not an xdg_toplevel"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zxdg_importer_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A global interface used for importing surfaces exported by xdg_exporter.\nWith this interface, a client can create a reference to a surface of\nanother client.",
        "summary": "interface for importing surfaces"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Notify the compositor that the xdg_importer object will no longer be\nused.",
            "summary": "destroy the xdg_importer object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "import_toplevel",
          "description": {
            "type": "description",
            "text": "The import_toplevel request imports a surface from any client given a handle\nretrieved by exporting said surface using xdg_exporter.export_toplevel.\nWhen called, a new xdg_imported object will be created. This new object\nrepresents the imported surface, and the importing client can\nmanipulate its relationship using it. See xdg_imported for details.",
            "summary": "import a toplevel surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new xdg_imported object",
              "interface": "zxdg_imported_v2"
            },
            {
              "type": "arg",
              "name": "handle",
              "argType": "string",
              "summary": "the exported surface handle"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "zxdg_exported_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "An xdg_exported object represents an exported reference to a surface. The\nexported surface may be referenced as long as the xdg_exported object not\ndestroyed. Destroying the xdg_exported invalidates any relationship the\nimporter may have established using xdg_imported.",
        "summary": "an exported surface handle"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Revoke the previously exported surface. This invalidates any\nrelationship the importer may have set up using the xdg_imported created\ngiven the handle sent via xdg_exported.handle.",
            "summary": "unexport the exported surface"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "handle",
          "description": {
            "type": "description",
            "text": "The handle event contains the unique handle of this exported surface\nreference. It may be shared with any client, which then can use it to\nimport the surface by calling xdg_importer.import_toplevel. A handle\nmay be used to import the surface multiple times.",
            "summary": "the exported surface handle"
          },
          "args": [
            {
              "type": "arg",
              "name": "handle",
              "argType": "string",
              "summary": "the exported surface handle"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "zxdg_imported_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "An xdg_imported object represents an imported reference to surface exported\nby some client. A client can use this interface to manipulate\nrelationships between its own surfaces and the imported surface.",
        "summary": "an imported surface handle"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Notify the compositor that it will no longer use the xdg_imported\nobject. Any relationship that may have been set up will at this point\nbe invalidated.",
            "summary": "destroy the xdg_imported object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_parent_of",
          "description": {
            "type": "description",
            "text": "Set the imported surface as the parent of some surface of the client.\nThe passed surface must be an xdg_toplevel equivalent, otherwise an\ninvalid_surface protocol error is sent. Calling this function sets up\na surface to surface relation with the same stacking and positioning\nsemantics as xdg_toplevel.set_parent.",
            "summary": "set as the parent of some surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the child surface",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "destroyed",
          "description": {
            "type": "description",
            "text": "The imported surface handle has been destroyed and any relationship set\nup has been invalidated. This may happen for various reasons, for\nexample if the exported surface or the exported surface handle has been\ndestroyed, if the handle used for importing was invalid.",
            "summary": "the imported surface handle has been destroyed"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These errors can be emitted in response to invalid xdg_imported\nrequests.",
            "summary": "error values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "invalid_surface",
              "value": "0",
              "summary": "surface is not an xdg_toplevel"
            }
          ]
        }
      ]
    }
  ]
}
