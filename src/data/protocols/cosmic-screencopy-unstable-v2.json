{
  "type": "protocol",
  "name": "cosmic_screencopy_unstable_v2",
  "copyright": {
    "type": "copyright",
    "text": "Copyright © 2021-2023 Andri Yngvason\nCopyright © 2024 Simon Ser\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol allows clients to ask the compositor to capture screen\ncontents to user submitted buffers.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.",
    "summary": "screen content capturing on client buffers"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zcosmic_screencopy_manager_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This object is a manager which offers requests to start capturing from a\nsource.",
        "summary": "manager to inform clients and begin capturing"
      },
      "requests": [
        {
          "type": "request",
          "name": "create_session",
          "description": {
            "type": "description",
            "text": "Create a capturing session for an image source.\n\nIf the paint_cursors option is set, cursors shall be composited onto\nthe captured frame. The cursor shall not be composited onto the frame\nif this flag is not set.",
            "summary": "capture an image source"
          },
          "args": [
            {
              "type": "arg",
              "name": "session",
              "argType": "new_id",
              "interface": "zcosmic_screencopy_session_v2"
            },
            {
              "type": "arg",
              "name": "source",
              "argType": "object",
              "interface": "zcosmic_image_source_v1",
              "protocol": "cosmic-image-source-unstable-v1"
            },
            {
              "type": "arg",
              "name": "options",
              "argType": "uint",
              "enum": "options"
            }
          ]
        },
        {
          "type": "request",
          "name": "create_pointer_cursor_session",
          "description": {
            "type": "description",
            "text": "Create a cursor capturing session for the pointer of an image source.\n\nThe options argument has no effect and must be set to 0. This is\nintended for any future flags that might be added.",
            "summary": "capture the pointer cursor of an image source"
          },
          "args": [
            {
              "type": "arg",
              "name": "session",
              "argType": "new_id",
              "interface": "zcosmic_screencopy_cursor_session_v2"
            },
            {
              "type": "arg",
              "name": "source",
              "argType": "object",
              "interface": "zcosmic_image_source_v1",
              "protocol": "cosmic-image-source-unstable-v1"
            },
            {
              "type": "arg",
              "name": "pointer",
              "argType": "object",
              "interface": "wl_pointer",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "options",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the manager object.\n\nOther objects created via this interface are unaffected.",
            "summary": "destroy the manager"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_option",
              "value": "1",
              "summary": "invalid option flag"
            }
          ]
        },
        {
          "type": "enum",
          "name": "options",
          "bitfield": true,
          "entries": [
            {
              "type": "entry",
              "name": "paint_cursors",
              "value": "1",
              "summary": "paint cursors onto captured frames"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zcosmic_screencopy_session_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This object represents an active screencopy session.\n\nAfter a screencopy session is created, buffer constraint events will be\nemitted from the compositor to tell the client which buffer types and\nformats are supported for reading from the session. The compositor may\nre-send buffer constraint events whenever they change.\n\nThe advertise buffer constraints, the compositor must send in no\nparticular order: zero or more shm_format and dmabuf_format events, zero\nor one dmabuf_device event, and exactly one buffer_size event. Then the\ncompositor must send a done event.\n\nWhen the client has received all the buffer constraints, it can create a\nbuffer accordingly, attach it to the screencopy session using the\nattach_buffer request, set the buffer damage using the damage_buffer\nrequest and then send the capture request.",
        "summary": "screen capture session"
      },
      "requests": [
        {
          "type": "request",
          "name": "create_frame",
          "description": {
            "type": "description",
            "text": "Create a capture frame for this session.",
            "summary": "create a frame"
          },
          "args": [
            {
              "type": "arg",
              "name": "frame",
              "argType": "new_id",
              "interface": "zcosmic_screencopy_frame_v2"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroys the session. This request can be sent at any time by the\nclient.\n\nThis request doesn't affect zcosmic_screencopy_frame_v2 objects created by\nthis object.",
            "summary": "delete this object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "buffer_size",
          "description": {
            "type": "description",
            "text": "Provides the dimensions of the source image in buffer pixel coordinates.\n\nThe client must attach buffers that match this size.",
            "summary": "image source dimensions"
          },
          "args": [
            {
              "type": "arg",
              "name": "width",
              "argType": "uint",
              "summary": "buffer width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint",
              "summary": "buffer height"
            }
          ]
        },
        {
          "type": "event",
          "name": "shm_format",
          "description": {
            "type": "description",
            "text": "Provides the format that must be used for shared-memory buffers.\n\nThis event may be emitted multiple times, in which case the client may\nchoose any given format.",
            "summary": "shm buffer format"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "shm format"
            }
          ]
        },
        {
          "type": "event",
          "name": "dmabuf_device",
          "description": {
            "type": "description",
            "text": "This event advertises the device buffers must be allocated on for\ndma-buf buffers.\n\nIn general the device is a DRM node. The DRM node type (primary vs.\nrender) is unspecified. Clients must not rely on the compositor sending\na particular node type. Clients cannot check two devices for equality\nby comparing the dev_t value.",
            "summary": "dma-buf device"
          },
          "args": [
            {
              "type": "arg",
              "name": "device",
              "argType": "array",
              "summary": "device dev_t value"
            }
          ]
        },
        {
          "type": "event",
          "name": "dmabuf_format",
          "description": {
            "type": "description",
            "text": "Provides the format that must be used for dma-buf buffers.\n\nThe client may choose any of the modifiers advertised in the array of\n64-bit unsigned integers.\n\nThis event may be emitted multiple times, in which case the client may\nchoose any given format.",
            "summary": "dma-buf format"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "drm format code"
            },
            {
              "type": "arg",
              "name": "modifiers",
              "argType": "array",
              "summary": "drm format modifiers"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "This event is sent once when all buffer constraint events have been\nsent.\n\nThe compositor must always end a batch of buffer constraint events with\nthis event, regardless of whether it sends the initial constraints or\nan update.",
            "summary": "all constraints have been sent"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "stopped",
          "description": {
            "type": "description",
            "text": "This event indicates that the capture session has stopped and is no\nlonger available. This can happen in a number of cases, e.g. when the\nunderlying source is destroyed, if the user decides to end the screen\ncapture, or if an unrecoverable runtime error has occurred.\n\nThe client should destroy the session after receiving this event.",
            "summary": "session is no longer available"
          },
          "args": []
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "zcosmic_screencopy_frame_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This object represents a screen capture frame.\n\nThe client should attach a buffer, damage the buffer, and then send a\ncapture request.\n\nIf the screen capture is successful, the compositor will send the frame\nmetadata (transform, damage, presentation_time in any order) followed by\nthe ready event.\n\nIf the screen capture fails, the compositor will send the failed event.",
        "summary": "screen capture frame"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroys the session. This request can be sent at any time by the\nclient.",
            "summary": "destroy this object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "attach_buffer",
          "description": {
            "type": "description",
            "text": "Attach a buffer to the session.\n\nThe wl_buffer.release request is unused.\n\nThis request must not be sent after capture, or else the\nalready_captured protocol error is raised.",
            "summary": "attach buffer to session"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "damage_buffer",
          "description": {
            "type": "description",
            "text": "Apply damage to the buffer which is to be captured next. This request\nmay be sent multiple times to describe a region.\n\nThe client indicates the accumulated damage since this wl_buffer was\nlast captured. During capture, the compositor will update the buffer\nwith at least the union of the region passed by the client and the\nregion advertised by zcosmic_screencopy_frame_v2.damage.\n\nWhen a wl_buffer is captured for the first time, or when the client\ndoesn't track damage, the client must damage the whole buffer.\n\nThis is for optimisation purposes. The compositor may use this\ninformation to reduce copying.\n\nThese coordinates originate from the upper left corner of the buffer.\n\nIf x or y are strictly negative, or if width or height are negative or\nzero, the invalid_buffer_damage protocol error is raised.\n\nThis request must not be sent after capture, or else the\nalready_captured protocol error is raised.",
            "summary": "damage buffer"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "region x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "region y coordinate"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "region width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "region height"
            }
          ]
        },
        {
          "type": "request",
          "name": "capture",
          "description": {
            "type": "description",
            "text": "Capture a frame.\n\nUnless this is the first successful captured frame performed in this\nsession, the compositor may wait an indefinite amount of time for the\nsource content to change before performing the copy.\n\nThis request may only be sent once, or else the already_captured\nprotocol error is raised. A buffer must be attached before this request\nis sent, or else the no_buffer protocol error is raised.",
            "summary": "capture a frame"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "transform",
          "description": {
            "type": "description",
            "text": "This event is sent before the ready event and holds the transform of\nthe source buffer.",
            "summary": "buffer transform"
          },
          "args": [
            {
              "type": "arg",
              "name": "transform",
              "argType": "uint",
              "enum": "wl_output.transform",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "damage",
          "description": {
            "type": "description",
            "text": "This event is sent before the ready event. It may be generated multiple\ntimes to describe a region.\n\nThe first captured frame in a session will always carry full damage.\nSubsequent frames' damaged regions describe which parts of the buffer\nhave changed since the last ready event.\n\nThese coordinates originate in the upper left corner of the buffer.",
            "summary": "buffer damaged region"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "damage x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "damage y coordinate"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "damage width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "damage height"
            }
          ]
        },
        {
          "type": "event",
          "name": "presentation_time",
          "description": {
            "type": "description",
            "text": "This event indicates the time at which the frame is presented to the\noutput in system monotonic time. This event is sent before the ready\nevent.\n\nThe timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,\neach component being an unsigned 32-bit value. Whole seconds are in\ntv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,\nand the additional fractional part in tv_nsec as nanoseconds. Hence,\nfor valid timestamps tv_nsec must be in [0, 999999999].",
            "summary": "presentation time of the frame"
          },
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint",
              "summary": "high 32 bits of the seconds part of the timestamp"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint",
              "summary": "low 32 bits of the seconds part of the timestamp"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint",
              "summary": "nanoseconds part of the timestamp"
            }
          ]
        },
        {
          "type": "event",
          "name": "ready",
          "description": {
            "type": "description",
            "text": "Called as soon as the frame is copied, indicating it is available\nfor reading.\n\nThe buffer may be re-used by the client after this event.\n\nAfter receiving this event, the client must destroy the object.",
            "summary": "frame is available for reading"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "failed",
          "description": {
            "type": "description",
            "text": "This event indicates that the attempted frame copy has failed.\n\nAfter receiving this event, the client must destroy the object.",
            "summary": "capture failed"
          },
          "args": [
            {
              "type": "arg",
              "name": "reason",
              "argType": "uint",
              "enum": "failure_reason"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "no_buffer",
              "value": "1",
              "summary": "capture sent without attach_buffer"
            },
            {
              "type": "entry",
              "name": "invalid_buffer_damage",
              "value": "2",
              "summary": "invalid buffer damage"
            },
            {
              "type": "entry",
              "name": "already_captured",
              "value": "3",
              "summary": "capture request has been sent"
            }
          ]
        },
        {
          "type": "enum",
          "name": "failure_reason",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "unknown",
              "value": "0",
              "description": {
                "type": "description",
                "text": "An unspecified runtime error has occurred. The client may retry.",
                "summary": "unknown runtime error"
              }
            },
            {
              "type": "entry",
              "name": "buffer_constraints",
              "value": "1",
              "description": {
                "type": "description",
                "text": "The buffer submitted by the client doesn't match the latest session\nconstraints. The client should re-allocate its buffers and retry.",
                "summary": "buffer constraints mismatch"
              }
            },
            {
              "type": "entry",
              "name": "stopped",
              "value": "2",
              "description": {
                "type": "description",
                "text": "The session has stopped. See zcosmic_screencopy_session_v2.stopped.",
                "summary": "session is no longer available"
              }
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zcosmic_screencopy_cursor_session_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This object represents a cursor capture session. It extends the base\ncapture session with cursor-specific metadata.",
        "summary": "cursor capture session"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroys the session. This request can be sent at any time by the\nclient.\n\nThis request doesn't affect zcosmic_screencopy_frame_v2 objects created by\nthis object.",
            "summary": "delete this object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_screencopy_session",
          "description": {
            "type": "description",
            "text": "Gets the screencopy session for this cursor session.\n\nThe session will produce frames of the cursor image. The compositor may\npause the session when the cursor leaves the captured area.\n\nThis request must not be sent more than once, or else the\nduplicate_session protocol error is raised.",
            "summary": "get screencopy session"
          },
          "args": [
            {
              "type": "arg",
              "name": "session",
              "argType": "new_id",
              "interface": "zcosmic_screencopy_session_v2"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "enter",
          "description": {
            "type": "description",
            "text": "Sent when a cursor enters the captured area. It shall be generated\nbefore the \"position\" and \"hotspot\" events when and only when a cursor\nenters the area.\n\nThe cursor enters the captured area when the cursor image intersects\nwith the captured area. Note, this is different from e.g.\nwl_pointer.enter.",
            "summary": "cursor entered captured area"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "leave",
          "description": {
            "type": "description",
            "text": "Sent when a cursor leaves the captured area. No \"position\" or \"hotspot\"\nevent is generated for the cursor until the cursor enters the captured\narea again.",
            "summary": "cursor left captured area"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "position",
          "description": {
            "type": "description",
            "text": "Cursors outside the image source do not get captured and no event will\nbe generated for them.\n\nThe given position is the position of the cursor's hotspot and it is\nrelative to the main buffer's top left corner in transformed buffer\npixel coordinates.\n\nThe position coordinates are relative to the main buffer's upper left\ncorner. The coordinates may be negative or greater than the main buffer\nsize.",
            "summary": "position changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "position x coordinates"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "position y coordinates"
            }
          ]
        },
        {
          "type": "event",
          "name": "hotspot",
          "description": {
            "type": "description",
            "text": "The hotspot describes the offset between the cursor image and the\nposition of the input device.\n\nThe given coordinates are the hotspot's offset from the origin in\nbuffer coordinates.\n\nClients should not apply the hotspot immediately: the hotspot becomes\neffective when the next zcosmic_screencopy_frame_v2.ready event is received.",
            "summary": "hotspot changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "hotspot x coordinates"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "hotspot y coordinates"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "duplicate_session",
              "value": "1",
              "summary": "get_screencopy_session sent twice"
            }
          ]
        }
      ]
    }
  ]
}
