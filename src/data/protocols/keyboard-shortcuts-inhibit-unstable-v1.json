{
  "type": "protocol",
  "name": "keyboard_shortcuts_inhibit_unstable_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2017 Red Hat Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol specifies a way for a client to request the compositor\nto ignore its own keyboard shortcuts for a given seat, so that all\nkey events from that seat get forwarded to a surface.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible\nchanges may be added together with the corresponding interface\nversion bump.\nBackward incompatible changes are done by bumping the version\nnumber in the protocol and interface names and resetting the\ninterface version. Once the protocol is to be declared stable,\nthe 'z' prefix and the version number in the protocol and\ninterface names are removed and the interface version number is\nreset.",
    "summary": "Protocol for inhibiting the compositor keyboard shortcuts"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zwp_keyboard_shortcuts_inhibit_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A global interface used for inhibiting the compositor keyboard shortcuts.",
        "summary": "context object for keyboard grab_manager"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the keyboard shortcuts inhibitor manager.",
            "summary": "destroy the keyboard shortcuts inhibitor object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "inhibit_shortcuts",
          "description": {
            "type": "description",
            "text": "Create a new keyboard shortcuts inhibitor object associated with\nthe given surface for the given seat.\n\nIf shortcuts are already inhibited for the specified seat and surface,\na protocol error \"already_inhibited\" is raised by the compositor.",
            "summary": "create a new keyboard shortcuts inhibitor object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "zwp_keyboard_shortcuts_inhibitor_v1"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface that inhibits the keyboard shortcuts behavior",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "summary": "the wl_seat for which keyboard shortcuts should be disabled",
              "interface": "wl_seat",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "already_inhibited",
              "value": "0",
              "summary": "the shortcuts are already inhibited for this surface"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zwp_keyboard_shortcuts_inhibitor_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A keyboard shortcuts inhibitor instructs the compositor to ignore\nits own keyboard shortcuts when the associated surface has keyboard\nfocus. As a result, when the surface has keyboard focus on the given\nseat, it will receive all key events originating from the specified\nseat, even those which would normally be caught by the compositor for\nits own shortcuts.\n\nThe Wayland compositor is however under no obligation to disable\nall of its shortcuts, and may keep some special key combo for its own\nuse, including but not limited to one allowing the user to forcibly\nrestore normal keyboard events routing in the case of an unwilling\nclient. The compositor may also use the same key combo to reactivate\nan existing shortcut inhibitor that was previously deactivated on\nuser request.\n\nWhen the compositor restores its own keyboard shortcuts, an\n\"inactive\" event is emitted to notify the client that the keyboard\nshortcuts inhibitor is not effectively active for the surface and\nseat any more, and the client should not expect to receive all\nkeyboard events.\n\nWhen the keyboard shortcuts inhibitor is inactive, the client has\nno way to forcibly reactivate the keyboard shortcuts inhibitor.\n\nThe user can chose to re-enable a previously deactivated keyboard\nshortcuts inhibitor using any mechanism the compositor may offer,\nin which case the compositor will send an \"active\" event to notify\nthe client.\n\nIf the surface is destroyed, unmapped, or loses the seat's keyboard\nfocus, the keyboard shortcuts inhibitor becomes irrelevant and the\ncompositor will restore its own keyboard shortcuts but no \"inactive\"\nevent is emitted in this case.",
        "summary": "context object for keyboard shortcuts inhibitor"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Remove the keyboard shortcuts inhibitor from the associated wl_surface.",
            "summary": "destroy the keyboard shortcuts inhibitor object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "active",
          "description": {
            "type": "description",
            "text": "This event indicates that the shortcut inhibitor is active.\n\nThe compositor sends this event every time compositor shortcuts\nare inhibited on behalf of the surface. When active, the client\nmay receive input events normally reserved by the compositor\n(see zwp_keyboard_shortcuts_inhibitor_v1).\n\nThis occurs typically when the initial request \"inhibit_shortcuts\"\nfirst becomes active or when the user instructs the compositor to\nre-enable and existing shortcuts inhibitor using any mechanism\noffered by the compositor.",
            "summary": "shortcuts are inhibited"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "inactive",
          "description": {
            "type": "description",
            "text": "This event indicates that the shortcuts inhibitor is inactive,\nnormal shortcuts processing is restored by the compositor.",
            "summary": "shortcuts are restored"
          },
          "args": []
        }
      ],
      "enums": []
    }
  ]
}
