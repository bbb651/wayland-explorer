{
  "type": "protocol",
  "name": "weston_test",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2012 Intel Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "weston_test",
      "version": "1",
      "description": {
        "type": "description",
        "text": "Internal testing facilities for the weston compositor.\n\nIt can't be stressed enough that these should never ever be used\noutside of running weston's tests.  The weston-test.so module should\nnever be installed.\n\nThese requests may allow clients to do very bad things.",
        "summary": "weston internal testing"
      },
      "requests": [
        {
          "type": "request",
          "name": "move_surface",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "move_pointer",
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "send_button",
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "button",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "send_axis",
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "axis",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "fixed"
            }
          ]
        },
        {
          "type": "request",
          "name": "activate_surface",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "send_key",
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "device_release",
          "args": [
            {
              "type": "arg",
              "name": "device",
              "argType": "string"
            }
          ]
        },
        {
          "type": "request",
          "name": "device_add",
          "args": [
            {
              "type": "arg",
              "name": "device",
              "argType": "string"
            }
          ]
        },
        {
          "type": "request",
          "name": "send_touch",
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "touch_id",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "touch_type",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "client_break",
          "description": {
            "type": "description",
            "text": "Request that the compositor pauses execution at a certain point. When\nexecution is paused, the compositor will signal the shared semaphore\nto the client.",
            "summary": "request compositor pause at a certain point"
          },
          "args": [
            {
              "type": "arg",
              "name": "breakpoint",
              "argType": "uint",
              "summary": "event type to wait for",
              "enum": "breakpoint"
            },
            {
              "type": "arg",
              "name": "resource_id",
              "argType": "uint",
              "summary": "optional Wayland resource ID to filter for (type-specific)"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "pointer_position",
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "touch_up_with_coordinate",
              "value": "0",
              "summary": "invalid coordinate"
            }
          ]
        },
        {
          "type": "enum",
          "name": "breakpoint",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "post_repaint",
              "value": "0",
              "summary": "after output repaint (filter type: wl_output)"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "weston_test_runner",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This is a global singleton interface for Weston internal tests.\n\nThis interface allows a test client to trigger compositor-side\ntest procedures. This is useful for cases, where the actual tests\nare in compositor plugins, but they also require the presence of\na particular client.\n\nThis interface is implemented by the compositor plugins containing\nthe testing code.\n\nA test client starts a test with the \"run\" request. It must not send\nanother \"run\" request until receiving the \"finished\" event. If the\ncompositor-side test succeeds, the \"finished\" event is sent. If the\ncompositor-side test fails, the compositor should send the protocol\nerror \"test_failed\", but it may also exit with an error (e.g. SEGV).\n\nUnknown test name will raise \"unknown_test\" protocol error.",
        "summary": "weston internal testing"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "run",
          "args": [
            {
              "type": "arg",
              "name": "test_name",
              "argType": "string"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "finished",
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "test_failed",
              "value": "0",
              "summary": "compositor test failed"
            },
            {
              "type": "entry",
              "name": "unknown_test",
              "value": "1",
              "summary": "unrecognized test name"
            }
          ]
        }
      ]
    }
  ]
}
