{
  "type": "protocol",
  "name": "xdg_output_unstable_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright © 2017 Red Hat Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol aims at describing outputs in a way which is more in line\nwith the concept of an output on desktop oriented systems.\n\nSome information are more specific to the concept of an output for\na desktop oriented system and may not make sense in other applications,\nsuch as IVI systems for example.\n\nTypically, the global compositor space on a desktop system is made of\na contiguous or overlapping set of rectangular regions.\n\nThe logical_position and logical_size events defined in this protocol\nmight provide information identical to their counterparts already\navailable from wl_output, in which case the information provided by this\nprotocol should be preferred to their equivalent in wl_output. The goal is\nto move the desktop specific concepts (such as output location within the\nglobal compositor space, etc.) out of the core wl_output protocol.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible\nchanges may be added together with the corresponding interface\nversion bump.\nBackward incompatible changes are done by bumping the version\nnumber in the protocol and interface names and resetting the\ninterface version. Once the protocol is to be declared stable,\nthe 'z' prefix and the version number in the protocol and\ninterface names are removed and the interface version number is\nreset.",
    "summary": "Protocol to describe output regions"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zxdg_output_manager_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "A global factory interface for xdg_output objects.",
        "summary": "manage xdg_output objects"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the server that it is not\ngoing to use the xdg_output_manager object anymore.\n\nAny objects already created through this instance are not affected.",
            "summary": "destroy the xdg_output_manager object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_xdg_output",
          "description": {
            "type": "description",
            "text": "This creates a new xdg_output object for the given wl_output.",
            "summary": "create an xdg output from a wl_output"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "zxdg_output_v1"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "zxdg_output_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "An xdg_output describes part of the compositor geometry.\n\nThis typically corresponds to a monitor that displays part of the\ncompositor space.\n\nFor objects version 3 onwards, after all xdg_output properties have been\nsent (when the object is created and when properties are updated), a\nwl_output.done event is sent. This allows changes to the output\nproperties to be seen as atomic, even if they happen via multiple events.",
        "summary": "compositor logical output region"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the server that it is not\ngoing to use the xdg_output object anymore.",
            "summary": "destroy the xdg_output object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "logical_position",
          "description": {
            "type": "description",
            "text": "The position event describes the location of the wl_output within\nthe global compositor space.\n\nThe logical_position event is sent after creating an xdg_output\n(see xdg_output_manager.get_xdg_output) and whenever the location\nof the output changes within the global compositor space.",
            "summary": "position of the output within the global compositor space"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position within the global compositor space"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position within the global compositor space"
            }
          ]
        },
        {
          "type": "event",
          "name": "logical_size",
          "description": {
            "type": "description",
            "text": "The logical_size event describes the size of the output in the\nglobal compositor space.\n\nMost regular Wayland clients should not pay attention to the\nlogical size and would rather rely on xdg_shell interfaces.\n\nSome clients such as Xwayland, however, need this to configure\ntheir surfaces in the global compositor space as the compositor\nmay apply a different scale from what is advertised by the output\nscaling property (to achieve fractional scaling, for example).\n\nFor example, for a wl_output mode 3840×2160 and a scale factor 2:\n\n- A compositor not scaling the monitor viewport in its compositing space\nwill advertise a logical size of 3840×2160,\n\n- A compositor scaling the monitor viewport with scale factor 2 will\nadvertise a logical size of 1920×1080,\n\n- A compositor scaling the monitor viewport using a fractional scale of\n1.5 will advertise a logical size of 2560×1440.\n\nFor example, for a wl_output mode 1920×1080 and a 90 degree rotation,\nthe compositor will advertise a logical size of 1080x1920.\n\nThe logical_size event is sent after creating an xdg_output\n(see xdg_output_manager.get_xdg_output) and whenever the logical\nsize of the output changes, either as a result of a change in the\napplied scale or because of a change in the corresponding output\nmode(see wl_output.mode) or transform (see wl_output.transform).",
            "summary": "size of the output in the global compositor space"
          },
          "args": [
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "width in global compositor space"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "height in global compositor space"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "This event is sent after all other properties of an xdg_output\nhave been sent.\n\nThis allows changes to the xdg_output properties to be seen as\natomic, even if they happen via multiple events.\n\nFor objects version 3 onwards, this event is deprecated. Compositors\nare not required to send it anymore and must send wl_output.done\ninstead.",
            "summary": "all information about the output have been sent"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "name",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Many compositors will assign names to their outputs, show them to the\nuser, allow them to be configured by name, etc. The client may wish to\nknow this name as well to offer the user similar behaviors.\n\nThe naming convention is compositor defined, but limited to\nalphanumeric characters and dashes (-). Each name is unique among all\nwl_output globals, but if a wl_output global is destroyed the same name\nmay be reused later. The names will also remain consistent across\nsessions with the same hardware and software configuration.\n\nExamples of names include 'HDMI-A-1', 'WL-1', 'X11-1', etc. However, do\nnot assume that the name is a reflection of an underlying DRM\nconnector, X11 connection, etc.\n\nThe name event is sent after creating an xdg_output (see\nxdg_output_manager.get_xdg_output). This event is only sent once per\nxdg_output, and the name does not change over the lifetime of the\nwl_output global.\n\nThis event is deprecated, instead clients should use wl_output.name.\nCompositors must still support this event.",
            "summary": "name of this output"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string",
              "summary": "output name"
            }
          ]
        },
        {
          "type": "event",
          "name": "description",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Many compositors can produce human-readable descriptions of their\noutputs.  The client may wish to know this description as well, to\ncommunicate the user for various purposes.\n\nThe description is a UTF-8 string with no convention defined for its\ncontents. Examples might include 'Foocorp 11\" Display' or 'Virtual X11\noutput via :1'.\n\nThe description event is sent after creating an xdg_output (see\nxdg_output_manager.get_xdg_output) and whenever the description\nchanges. The description is optional, and may not be sent at all.\n\nFor objects of version 2 and lower, this event is only sent once per\nxdg_output, and the description does not change over the lifetime of\nthe wl_output global.\n\nThis event is deprecated, instead clients should use\nwl_output.description. Compositors must still support this event.",
            "summary": "human-readable description of this output"
          },
          "args": [
            {
              "type": "arg",
              "name": "description",
              "argType": "string",
              "summary": "output description"
            }
          ]
        }
      ],
      "enums": []
    }
  ]
}
