{"type":"protocol","name":"cosmic_output_management_unstable_v1","copyright":{"type":"copyright","text":"Copyright Â© 2024 Victoria Brekenfeld\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol serves as an extension to wlr-output-management.\n\n    It primarily adds explicit output mirroring,\n    while upstream is figuring out how to best support that.\n\n    It was designed against version 4 of wlr-output-management, but tries\n    it's best to be forward compatible.","summary":"extension protocol to wlr-output-management"},"interfaces":[{"type":"interface","name":"zcosmic_output_manager_v1","version":"1","description":{"type":"description","text":"This interface provides extension points for wlr-output-management types.","summary":"Output configuration manager"},"requests":[{"type":"request","name":"get_head","description":{"type":"description","text":"Gets an extension object for zwlr_output_head_v1.\n\n            As soon as the extended output is created, events will be dispatched with an accompanying\n            `done`-event delivered to the matching `zwlr_output_manager_v1` afterwards.\n\n            Any further updates will produce new events, if properties of the zcosmic_output_head_v1 change,\n            just like for the original `zwlr_output_head_v1`. Events should be handled as atomic, as denoted\n            by `zwlr_output_manager_v1::done`.\n\n            Trying to create more than one zcosmic_output_head_v1 per zwlr_output_head_v1 will raise an\n            \"already_extended\" error.","summary":"Get a zcosmic_output_head_v1 for an existing zwlr_output_head_v1"},"args":[{"type":"arg","name":"extended","argType":"new_id","interface":"zcosmic_output_head_v1"},{"type":"arg","name":"head","argType":"object","interface":"zwlr_output_head_v1"}]},{"type":"request","name":"get_configuration","description":{"type":"description","text":"Gets an extension object for zwlr_output_configuration_v1.\n\n            Trying to create more than one zcosmic_output_configuration_v1 per zwlr_output_configuration_v1\n            will raise an \"already_extended\" error.","summary":"Get a zcosmic_output_configuration_v1 for an existing zwlr_output_configuration_v1"},"args":[{"type":"arg","name":"extended","argType":"new_id","interface":"zcosmic_output_configuration_v1"},{"type":"arg","name":"config","argType":"object","interface":"zwlr_output_configuration_v1"}]},{"type":"request","name":"get_configuration_head","description":{"type":"description","text":"Gets an extension object for zwlr_output_configuration_head_v1.\n\n            Trying to create more than one zcosmic_output_configuration_head_v1 per\n            zwlr_output_configuration_head_v1 will raise an \"already_extended\" error.","summary":"Get a zcosmic_output_configuration_head_v1 for an existing zwlr_output_configuration_head_v1"},"args":[{"type":"arg","name":"extended","argType":"new_id","interface":"zcosmic_output_configuration_head_v1"},{"type":"arg","name":"config_head","argType":"object","interface":"zwlr_output_configuration_head_v1"}]},{"type":"request","name":"release","requestType":"destructor","description":{"type":"description","text":"Destroys this global. All previously created objects remain valid.","summary":"Destroy this global"},"args":[]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"already_extended","value":"1","summary":"object already created"}]}]},{"type":"interface","name":"zcosmic_output_head_v1","version":"1","description":{"type":"description","text":"Extension to zwlr_output_head_v1.\n\n        Adds additional read-only properties.\n\n        Properties sent via this interface are applied atomically via the wlr_output_manager.done event.\n        No guarantees are made regarding the order in which properties are sent.","summary":"Output extension object"},"requests":[{"type":"request","name":"release","requestType":"destructor","description":{"type":"description","text":"Using this request a client can tell the compositor that it is not interested\n        in the head object anymore.","summary":"destroy the output head"},"args":[]}],"events":[{"type":"event","name":"scale_1000","description":{"type":"description","text":"This events describes the scale of the head in the global compositor\n        space multiplied by 1000 for additional precision.\n\n        It is only sent if the output is enabled.","summary":"current scale"},"args":[{"type":"arg","name":"scale_1000","argType":"int"}]},{"type":"event","name":"mirroring","description":{"type":"description","text":"This events describes that the head is mirroring another.\n        In these cases `name` contains the unique name of the matching `zwlr_output_head_v1`.\n        If the name is null, no head is being mirrored onto this one.\n\n        For mirrored heads the `position`-event is meaningless.\n\n        It is only sent if the output is enabled.","summary":"mirroring other output"},"args":[{"type":"arg","name":"name","argType":"string","allowNull":"true"}]}],"enums":[]},{"type":"interface","name":"zcosmic_output_configuration_v1","version":"1","description":{"type":"description","text":"Extension to zwlr_output_configuration_v1.\n\n        Adds additional parameters to be tested/applyed via the original zwlr_output_configuration_v1.","summary":"Output configuration extension object"},"requests":[{"type":"request","name":"mirror_head","description":{"type":"description","text":"Enable a head mirroring another.\n\n        This request creates a head configuration object that can be used to change the head's properties.\n\n        This is an alternative to `zwlr_output_configuration_v1::enable_head` or `zwlr_output_configuration_v1::disable_head`\n        Using either with the same `head` argument will result in an `already_configured_head` error on the original\n        `zwlr_output_configuration_v1` object.\n\n        All properties are still required to be set to the resulting `zwlr_output_configuration_head` by the client\n        as denoted in the original protocol. Some like `set_position` however might be ignored in mirroring configurations.\n\n        Trying to set a disabled or mirroring head as `mirroring` or calling `disable_head`/`mirror_head` after using a head\n        as a `mirroring` argument will raise a `mirrored_head_busy` protocol error.","summary":"enable and configure a head to mirror another head"},"args":[{"type":"arg","name":"id","argType":"new_id","summary":"a new object to configure the head","interface":"zwlr_output_configuration_head_v1"},{"type":"arg","name":"head","argType":"object","summary":"the head to be enabled","interface":"zwlr_output_head_v1"},{"type":"arg","name":"mirroring","argType":"object","summary":"the head to be mirrored","interface":"zwlr_output_head_v1"}]},{"type":"request","name":"release","requestType":"destructor","description":{"type":"description","text":"Using this request a client can tell the compositor that it is not going\n        to use the configuration object anymore. Any changes to the outputs\n        will still be attached to the original `zwlr_output_configuration_head_v1`\n        if it isn't destroyed.","summary":"destroy the output configuration"},"args":[]}],"events":[{"type":"event","name":"finished","description":{"type":"description","text":"This event indicates that the configuration is no longer available.\n\n        This usually happens when the original configuration was `cancelled`, `suceeded` or `failed`.\n\n        Upon receiving this event, the client should destroy this object.\n\n        The configration object becomes inert and any requests other than `destroy` will be ignored.","summary":"the configuration was used"},"args":[]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"already_finished","value":"1","summary":"underlying configuration has already been used"},{"type":"entry","name":"mirrored_head_busy","value":"2","summary":"mirrored head is not enabled"}]}]},{"type":"interface","name":"zcosmic_output_configuration_head_v1","version":"1","description":{"type":"description","text":"Extension to zwlr_output_configuration_head_v1.\n\n        Adds additional/alternative parameters to the original zwlr_output_configuration_head_v1.\n\n        Once the original `zwlr_output_configuration_head_v1` is destroyed this object will also be destroyed.","summary":"Output configuration head extension object"},"requests":[{"type":"request","name":"set_scale_1000","description":{"type":"description","text":"This request sets the head's scale multiplied by 1000 for additional precision.\n\n        This request is meant to be used in place of `zwlr_output_configuration_head_v1::set_scale`.\n        Using `set_scale` and `set_scale_1000` at once will thus raise an `already_set` error on the\n        original `zwlr_output_configuration_head_v1`.\n\n        Any request conflicting with `set_scale` will also conflict with `set_scale_1000`.","summary":"set the scale multiplied by 1000"},"args":[{"type":"arg","name":"scale_1000","argType":"int"}]},{"type":"request","name":"release","requestType":"destructor","description":{"type":"description","text":"Using this request a client can tell the compositor that it is not going\n        to use the configuration object anymore. Already issued requests will\n        still be attached to the original `zwlr_output_configuration_head_v1`\n        until it is destroyed.","summary":"destroy the output configuration head"},"args":[]}],"events":[],"enums":[]}]}
