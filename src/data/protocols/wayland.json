{
  "type": "protocol",
  "name": "wayland",
  "copyright": {
    "type": "copyright",
    "text": "Copyright © 2008-2011 Kristian Høgsberg\nCopyright © 2010-2011 Intel Corporation\nCopyright © 2012-2013 Collabora, Ltd.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice (including the\nnext paragraph) shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wl_display",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The core global object.  This is a special singleton object.  It\nis used for internal Wayland protocol features.",
        "summary": "core global object"
      },
      "requests": [
        {
          "type": "request",
          "name": "sync",
          "description": {
            "type": "description",
            "text": "The sync request asks the server to emit the 'done' event\non the returned wl_callback object.  Since requests are\nhandled in-order and events are delivered in-order, this can\nbe used as a barrier to ensure all previous requests and the\nresulting events have been handled.\n\nThe object returned by this request will be destroyed by the\ncompositor after the callback is fired and as such the client must not\nattempt to use it after that point.\n\nThe callback_data passed in the callback is undefined and should be ignored.",
            "summary": "asynchronous roundtrip"
          },
          "args": [
            {
              "type": "arg",
              "name": "callback",
              "argType": "new_id",
              "summary": "callback object for the sync request",
              "interface": "wl_callback"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_registry",
          "description": {
            "type": "description",
            "text": "This request creates a registry object that allows the client\nto list and bind the global objects available from the\ncompositor.\n\nIt should be noted that the server side resources consumed in\nresponse to a get_registry request can only be released when the\nclient disconnects, not when the client side proxy is destroyed.\nTherefore, clients should invoke get_registry as infrequently as\npossible to avoid wasting memory.",
            "summary": "get global registry object"
          },
          "args": [
            {
              "type": "arg",
              "name": "registry",
              "argType": "new_id",
              "summary": "global registry object",
              "interface": "wl_registry"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "error",
          "description": {
            "type": "description",
            "text": "The error event is sent out when a fatal (non-recoverable)\nerror has occurred.  The object_id argument is the object\nwhere the error occurred, most often in response to a request\nto that object.  The code identifies the error and is defined\nby the object interface.  As such, each interface defines its\nown set of error codes.  The message is a brief description\nof the error, for (debugging) convenience.",
            "summary": "fatal error event"
          },
          "args": [
            {
              "type": "arg",
              "name": "object_id",
              "argType": "object",
              "summary": "object where the error occurred"
            },
            {
              "type": "arg",
              "name": "code",
              "argType": "uint",
              "summary": "error code"
            },
            {
              "type": "arg",
              "name": "message",
              "argType": "string",
              "summary": "error description"
            }
          ]
        },
        {
          "type": "event",
          "name": "delete_id",
          "description": {
            "type": "description",
            "text": "This event is used internally by the object ID management\nlogic. When a client deletes an object that it had created,\nthe server will send this event to acknowledge that it has\nseen the delete request. When the client receives this event,\nit will know that it can safely reuse the object ID.",
            "summary": "acknowledge object ID deletion"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "uint",
              "summary": "deleted object ID"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These errors are global and can be emitted in response to any\nserver request.",
            "summary": "global error values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "invalid_object",
              "value": "0",
              "summary": "server couldn't find object"
            },
            {
              "type": "entry",
              "name": "invalid_method",
              "value": "1",
              "summary": "method doesn't exist on the specified interface or malformed request"
            },
            {
              "type": "entry",
              "name": "no_memory",
              "value": "2",
              "summary": "server is out of memory"
            },
            {
              "type": "entry",
              "name": "implementation",
              "value": "3",
              "summary": "implementation error in compositor"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_registry",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The singleton global registry object.  The server has a number of\nglobal objects that are available to all clients.  These objects\ntypically represent an actual object in the server (for example,\nan input device) or they are singleton objects that provide\nextension functionality.\n\nWhen a client creates a registry object, the registry object\nwill emit a global event for each global currently in the\nregistry.  Globals come and go as a result of device or\nmonitor hotplugs, reconfiguration or other events, and the\nregistry will send out global and global_remove events to\nkeep the client up to date with the changes.  To mark the end\nof the initial burst of events, the client can use the\nwl_display.sync request immediately after calling\nwl_display.get_registry.\n\nA client can bind to a global object by using the bind\nrequest.  This creates a client-side handle that lets the object\nemit events to the client and lets the client invoke requests on\nthe object.",
        "summary": "global registry object"
      },
      "requests": [
        {
          "type": "request",
          "name": "bind",
          "description": {
            "type": "description",
            "text": "Binds a new, client-created object to the server using the\nspecified name as the identifier.",
            "summary": "bind an object to the display"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "uint",
              "summary": "unique numeric name of the object"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "bounded object"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "global",
          "description": {
            "type": "description",
            "text": "Notify the client of global objects.\n\nThe event notifies the client that a global object with\nthe given name is now available, and it implements the\ngiven version of the given interface.",
            "summary": "announce global object"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "uint",
              "summary": "numeric name of the global object"
            },
            {
              "type": "arg",
              "name": "interface",
              "argType": "string",
              "summary": "interface implemented by the object"
            },
            {
              "type": "arg",
              "name": "version",
              "argType": "uint",
              "summary": "interface version"
            }
          ]
        },
        {
          "type": "event",
          "name": "global_remove",
          "description": {
            "type": "description",
            "text": "Notify the client of removed global objects.\n\nThis event notifies the client that the global identified\nby name is no longer available.  If the client bound to\nthe global using the bind request, the client should now\ndestroy that object.\n\nThe object remains valid and requests to the object will be\nignored until the client destroys it, to avoid races between\nthe global going away and a client sending a request to it.",
            "summary": "announce removal of global object"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "uint",
              "summary": "numeric name of the global object"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wl_callback",
      "version": "1",
      "description": {
        "type": "description",
        "text": "Clients can handle the 'done' event to get notified when\nthe related request is done.\n\nNote, because wl_callback objects are created from multiple independent\nfactory interfaces, the wl_callback interface is frozen at version 1.",
        "summary": "callback object"
      },
      "requests": [],
      "events": [
        {
          "type": "event",
          "name": "done",
          "eventType": "destructor",
          "description": {
            "type": "description",
            "text": "Notify the client when the related request is done.",
            "summary": "done event"
          },
          "args": [
            {
              "type": "arg",
              "name": "callback_data",
              "argType": "uint",
              "summary": "request-specific data for the callback"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wl_compositor",
      "version": "6",
      "description": {
        "type": "description",
        "text": "A compositor.  This object is a singleton global.  The\ncompositor is in charge of combining the contents of multiple\nsurfaces into one displayable output.",
        "summary": "the compositor singleton"
      },
      "requests": [
        {
          "type": "request",
          "name": "create_surface",
          "description": {
            "type": "description",
            "text": "Ask the compositor to create a new surface.",
            "summary": "create new surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new surface",
              "interface": "wl_surface"
            }
          ]
        },
        {
          "type": "request",
          "name": "create_region",
          "description": {
            "type": "description",
            "text": "Ask the compositor to create a new region.",
            "summary": "create new region"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new region",
              "interface": "wl_region"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wl_shm_pool",
      "version": "2",
      "description": {
        "type": "description",
        "text": "The wl_shm_pool object encapsulates a piece of memory shared\nbetween the compositor and client.  Through the wl_shm_pool\nobject, the client can allocate shared memory wl_buffer objects.\nAll objects created through the same pool share the same\nunderlying mapped memory. Reusing the mapped memory avoids the\nsetup/teardown overhead and is useful when interactively resizing\na surface or for many small buffers.",
        "summary": "a shared memory pool"
      },
      "requests": [
        {
          "type": "request",
          "name": "create_buffer",
          "description": {
            "type": "description",
            "text": "Create a wl_buffer object from the pool.\n\nThe buffer is created offset bytes into the pool and has\nwidth and height as specified.  The stride argument specifies\nthe number of bytes from the beginning of one row to the beginning\nof the next.  The format is the pixel format of the buffer and\nmust be one of those advertised through the wl_shm.format event.\n\nA buffer will keep a reference to the pool it was created from\nso it is valid to destroy the pool immediately after creating\na buffer from it.",
            "summary": "create a buffer from the pool"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "buffer to create",
              "interface": "wl_buffer"
            },
            {
              "type": "arg",
              "name": "offset",
              "argType": "int",
              "summary": "buffer byte offset within the pool"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "buffer width, in pixels"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "buffer height, in pixels"
            },
            {
              "type": "arg",
              "name": "stride",
              "argType": "int",
              "summary": "number of bytes from the beginning of one row to the beginning of the next row"
            },
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "buffer pixel format",
              "enum": "wl_shm.format"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the shared memory pool.\n\nThe mmapped memory will be released when all\nbuffers that have been created from this pool\nare gone.",
            "summary": "destroy the pool"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "resize",
          "description": {
            "type": "description",
            "text": "This request will cause the server to remap the backing memory\nfor the pool from the file descriptor passed when the pool was\ncreated, but using the new size.  This request can only be\nused to make the pool bigger.\n\nThis request only changes the amount of bytes that are mmapped\nby the server and does not touch the file corresponding to the\nfile descriptor passed at creation time. It is the client's\nresponsibility to ensure that the file is at least as big as\nthe new pool size.",
            "summary": "change the size of the pool mapping"
          },
          "args": [
            {
              "type": "arg",
              "name": "size",
              "argType": "int",
              "summary": "new size of the pool, in bytes"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wl_shm",
      "version": "2",
      "description": {
        "type": "description",
        "text": "A singleton global object that provides support for shared\nmemory.\n\nClients can create wl_shm_pool objects using the create_pool\nrequest.\n\nOn binding the wl_shm object one or more format events\nare emitted to inform clients about the valid pixel formats\nthat can be used for buffers.",
        "summary": "shared memory support"
      },
      "requests": [
        {
          "type": "request",
          "name": "create_pool",
          "description": {
            "type": "description",
            "text": "Create a new wl_shm_pool object.\n\nThe pool can be used to create shared memory based buffer\nobjects.  The server will mmap size bytes of the passed file\ndescriptor, to use as backing memory for the pool.",
            "summary": "create a shm pool"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "pool to create",
              "interface": "wl_shm_pool"
            },
            {
              "type": "arg",
              "name": "fd",
              "argType": "fd",
              "summary": "file descriptor for the pool"
            },
            {
              "type": "arg",
              "name": "size",
              "argType": "int",
              "summary": "pool size, in bytes"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the server that it is not going to\nuse the shm object anymore.\n\nObjects created via this interface remain unaffected.",
            "summary": "release the shm object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "format",
          "description": {
            "type": "description",
            "text": "Informs the client about a valid pixel format that\ncan be used for buffers. Known formats include\nargb8888 and xrgb8888.",
            "summary": "pixel format description"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "buffer pixel format",
              "enum": "format"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These errors can be emitted in response to wl_shm requests.",
            "summary": "wl_shm error values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "invalid_format",
              "value": "0",
              "summary": "buffer format is not known"
            },
            {
              "type": "entry",
              "name": "invalid_stride",
              "value": "1",
              "summary": "invalid size or stride during pool or buffer creation"
            },
            {
              "type": "entry",
              "name": "invalid_fd",
              "value": "2",
              "summary": "mmapping the file descriptor failed"
            }
          ]
        },
        {
          "type": "enum",
          "name": "format",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This describes the memory layout of an individual pixel.\n\nAll renderers should support argb8888 and xrgb8888 but any other\nformats are optional and may not be supported by the particular\nrenderer in use.\n\nThe drm format codes match the macros defined in drm_fourcc.h, except\nargb8888 and xrgb8888. The formats actually supported by the compositor\nwill be reported by the format event.\n\nFor all wl_shm formats and unless specified in another protocol\nextension, pre-multiplied alpha is used for pixel values.",
            "summary": "pixel formats"
          },
          "entries": [
            {
              "type": "entry",
              "name": "argb8888",
              "value": "0",
              "summary": "32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "xrgb8888",
              "value": "1",
              "summary": "32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "c8",
              "value": "0x20203843",
              "summary": "8-bit color index format, [7:0] C"
            },
            {
              "type": "entry",
              "name": "rgb332",
              "value": "0x38424752",
              "summary": "8-bit RGB format, [7:0] R:G:B 3:3:2"
            },
            {
              "type": "entry",
              "name": "bgr233",
              "value": "0x38524742",
              "summary": "8-bit BGR format, [7:0] B:G:R 2:3:3"
            },
            {
              "type": "entry",
              "name": "xrgb4444",
              "value": "0x32315258",
              "summary": "16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "xbgr4444",
              "value": "0x32314258",
              "summary": "16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "rgbx4444",
              "value": "0x32315852",
              "summary": "16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "bgrx4444",
              "value": "0x32315842",
              "summary": "16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "argb4444",
              "value": "0x32315241",
              "summary": "16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "abgr4444",
              "value": "0x32314241",
              "summary": "16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "rgba4444",
              "value": "0x32314152",
              "summary": "16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "bgra4444",
              "value": "0x32314142",
              "summary": "16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian"
            },
            {
              "type": "entry",
              "name": "xrgb1555",
              "value": "0x35315258",
              "summary": "16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian"
            },
            {
              "type": "entry",
              "name": "xbgr1555",
              "value": "0x35314258",
              "summary": "16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian"
            },
            {
              "type": "entry",
              "name": "rgbx5551",
              "value": "0x35315852",
              "summary": "16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian"
            },
            {
              "type": "entry",
              "name": "bgrx5551",
              "value": "0x35315842",
              "summary": "16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian"
            },
            {
              "type": "entry",
              "name": "argb1555",
              "value": "0x35315241",
              "summary": "16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian"
            },
            {
              "type": "entry",
              "name": "abgr1555",
              "value": "0x35314241",
              "summary": "16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian"
            },
            {
              "type": "entry",
              "name": "rgba5551",
              "value": "0x35314152",
              "summary": "16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian"
            },
            {
              "type": "entry",
              "name": "bgra5551",
              "value": "0x35314142",
              "summary": "16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian"
            },
            {
              "type": "entry",
              "name": "rgb565",
              "value": "0x36314752",
              "summary": "16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian"
            },
            {
              "type": "entry",
              "name": "bgr565",
              "value": "0x36314742",
              "summary": "16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian"
            },
            {
              "type": "entry",
              "name": "rgb888",
              "value": "0x34324752",
              "summary": "24-bit RGB format, [23:0] R:G:B little endian"
            },
            {
              "type": "entry",
              "name": "bgr888",
              "value": "0x34324742",
              "summary": "24-bit BGR format, [23:0] B:G:R little endian"
            },
            {
              "type": "entry",
              "name": "xbgr8888",
              "value": "0x34324258",
              "summary": "32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "rgbx8888",
              "value": "0x34325852",
              "summary": "32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "bgrx8888",
              "value": "0x34325842",
              "summary": "32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "abgr8888",
              "value": "0x34324241",
              "summary": "32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "rgba8888",
              "value": "0x34324152",
              "summary": "32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "bgra8888",
              "value": "0x34324142",
              "summary": "32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "xrgb2101010",
              "value": "0x30335258",
              "summary": "32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "xbgr2101010",
              "value": "0x30334258",
              "summary": "32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "rgbx1010102",
              "value": "0x30335852",
              "summary": "32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian"
            },
            {
              "type": "entry",
              "name": "bgrx1010102",
              "value": "0x30335842",
              "summary": "32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian"
            },
            {
              "type": "entry",
              "name": "argb2101010",
              "value": "0x30335241",
              "summary": "32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "abgr2101010",
              "value": "0x30334241",
              "summary": "32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "rgba1010102",
              "value": "0x30334152",
              "summary": "32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian"
            },
            {
              "type": "entry",
              "name": "bgra1010102",
              "value": "0x30334142",
              "summary": "32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian"
            },
            {
              "type": "entry",
              "name": "yuyv",
              "value": "0x56595559",
              "summary": "packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "yvyu",
              "value": "0x55595659",
              "summary": "packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "uyvy",
              "value": "0x59565955",
              "summary": "packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "vyuy",
              "value": "0x59555956",
              "summary": "packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "ayuv",
              "value": "0x56555941",
              "summary": "packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "nv12",
              "value": "0x3231564e",
              "summary": "2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane"
            },
            {
              "type": "entry",
              "name": "nv21",
              "value": "0x3132564e",
              "summary": "2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane"
            },
            {
              "type": "entry",
              "name": "nv16",
              "value": "0x3631564e",
              "summary": "2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane"
            },
            {
              "type": "entry",
              "name": "nv61",
              "value": "0x3136564e",
              "summary": "2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane"
            },
            {
              "type": "entry",
              "name": "yuv410",
              "value": "0x39565559",
              "summary": "3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes"
            },
            {
              "type": "entry",
              "name": "yvu410",
              "value": "0x39555659",
              "summary": "3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes"
            },
            {
              "type": "entry",
              "name": "yuv411",
              "value": "0x31315559",
              "summary": "3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes"
            },
            {
              "type": "entry",
              "name": "yvu411",
              "value": "0x31315659",
              "summary": "3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes"
            },
            {
              "type": "entry",
              "name": "yuv420",
              "value": "0x32315559",
              "summary": "3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes"
            },
            {
              "type": "entry",
              "name": "yvu420",
              "value": "0x32315659",
              "summary": "3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes"
            },
            {
              "type": "entry",
              "name": "yuv422",
              "value": "0x36315559",
              "summary": "3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes"
            },
            {
              "type": "entry",
              "name": "yvu422",
              "value": "0x36315659",
              "summary": "3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes"
            },
            {
              "type": "entry",
              "name": "yuv444",
              "value": "0x34325559",
              "summary": "3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes"
            },
            {
              "type": "entry",
              "name": "yvu444",
              "value": "0x34325659",
              "summary": "3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes"
            },
            {
              "type": "entry",
              "name": "r8",
              "value": "0x20203852",
              "summary": "[7:0] R"
            },
            {
              "type": "entry",
              "name": "r16",
              "value": "0x20363152",
              "summary": "[15:0] R little endian"
            },
            {
              "type": "entry",
              "name": "rg88",
              "value": "0x38384752",
              "summary": "[15:0] R:G 8:8 little endian"
            },
            {
              "type": "entry",
              "name": "gr88",
              "value": "0x38385247",
              "summary": "[15:0] G:R 8:8 little endian"
            },
            {
              "type": "entry",
              "name": "rg1616",
              "value": "0x32334752",
              "summary": "[31:0] R:G 16:16 little endian"
            },
            {
              "type": "entry",
              "name": "gr1616",
              "value": "0x32335247",
              "summary": "[31:0] G:R 16:16 little endian"
            },
            {
              "type": "entry",
              "name": "xrgb16161616f",
              "value": "0x48345258",
              "summary": "[63:0] x:R:G:B 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "xbgr16161616f",
              "value": "0x48344258",
              "summary": "[63:0] x:B:G:R 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "argb16161616f",
              "value": "0x48345241",
              "summary": "[63:0] A:R:G:B 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "abgr16161616f",
              "value": "0x48344241",
              "summary": "[63:0] A:B:G:R 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "xyuv8888",
              "value": "0x56555958",
              "summary": "[31:0] X:Y:Cb:Cr 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "vuy888",
              "value": "0x34325556",
              "summary": "[23:0] Cr:Cb:Y 8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "vuy101010",
              "value": "0x30335556",
              "summary": "Y followed by U then V, 10:10:10. Non-linear modifier only"
            },
            {
              "type": "entry",
              "name": "y210",
              "value": "0x30313259",
              "summary": "[63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 10:6:10:6:10:6:10:6 little endian per 2 Y pixels"
            },
            {
              "type": "entry",
              "name": "y212",
              "value": "0x32313259",
              "summary": "[63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 12:4:12:4:12:4:12:4 little endian per 2 Y pixels"
            },
            {
              "type": "entry",
              "name": "y216",
              "value": "0x36313259",
              "summary": "[63:0] Cr0:Y1:Cb0:Y0 16:16:16:16 little endian per 2 Y pixels"
            },
            {
              "type": "entry",
              "name": "y410",
              "value": "0x30313459",
              "summary": "[31:0] A:Cr:Y:Cb 2:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "y412",
              "value": "0x32313459",
              "summary": "[63:0] A:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian"
            },
            {
              "type": "entry",
              "name": "y416",
              "value": "0x36313459",
              "summary": "[63:0] A:Cr:Y:Cb 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "xvyu2101010",
              "value": "0x30335658",
              "summary": "[31:0] X:Cr:Y:Cb 2:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "xvyu12_16161616",
              "value": "0x36335658",
              "summary": "[63:0] X:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian"
            },
            {
              "type": "entry",
              "name": "xvyu16161616",
              "value": "0x38345658",
              "summary": "[63:0] X:Cr:Y:Cb 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "y0l0",
              "value": "0x304c3059",
              "summary": "[63:0]   A3:A2:Y3:0:Cr0:0:Y2:0:A1:A0:Y1:0:Cb0:0:Y0:0  1:1:8:2:8:2:8:2:1:1:8:2:8:2:8:2 little endian"
            },
            {
              "type": "entry",
              "name": "x0l0",
              "value": "0x304c3058",
              "summary": "[63:0]   X3:X2:Y3:0:Cr0:0:Y2:0:X1:X0:Y1:0:Cb0:0:Y0:0  1:1:8:2:8:2:8:2:1:1:8:2:8:2:8:2 little endian"
            },
            {
              "type": "entry",
              "name": "y0l2",
              "value": "0x324c3059",
              "summary": "[63:0]   A3:A2:Y3:Cr0:Y2:A1:A0:Y1:Cb0:Y0  1:1:10:10:10:1:1:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "x0l2",
              "value": "0x324c3058",
              "summary": "[63:0]   X3:X2:Y3:Cr0:Y2:X1:X0:Y1:Cb0:Y0  1:1:10:10:10:1:1:10:10:10 little endian"
            },
            {
              "type": "entry",
              "name": "yuv420_8bit",
              "value": "0x38305559"
            },
            {
              "type": "entry",
              "name": "yuv420_10bit",
              "value": "0x30315559"
            },
            {
              "type": "entry",
              "name": "xrgb8888_a8",
              "value": "0x38415258"
            },
            {
              "type": "entry",
              "name": "xbgr8888_a8",
              "value": "0x38414258"
            },
            {
              "type": "entry",
              "name": "rgbx8888_a8",
              "value": "0x38415852"
            },
            {
              "type": "entry",
              "name": "bgrx8888_a8",
              "value": "0x38415842"
            },
            {
              "type": "entry",
              "name": "rgb888_a8",
              "value": "0x38413852"
            },
            {
              "type": "entry",
              "name": "bgr888_a8",
              "value": "0x38413842"
            },
            {
              "type": "entry",
              "name": "rgb565_a8",
              "value": "0x38413552"
            },
            {
              "type": "entry",
              "name": "bgr565_a8",
              "value": "0x38413542"
            },
            {
              "type": "entry",
              "name": "nv24",
              "value": "0x3432564e",
              "summary": "non-subsampled Cr:Cb plane"
            },
            {
              "type": "entry",
              "name": "nv42",
              "value": "0x3234564e",
              "summary": "non-subsampled Cb:Cr plane"
            },
            {
              "type": "entry",
              "name": "p210",
              "value": "0x30313250",
              "summary": "2x1 subsampled Cr:Cb plane, 10 bit per channel"
            },
            {
              "type": "entry",
              "name": "p010",
              "value": "0x30313050",
              "summary": "2x2 subsampled Cr:Cb plane 10 bits per channel"
            },
            {
              "type": "entry",
              "name": "p012",
              "value": "0x32313050",
              "summary": "2x2 subsampled Cr:Cb plane 12 bits per channel"
            },
            {
              "type": "entry",
              "name": "p016",
              "value": "0x36313050",
              "summary": "2x2 subsampled Cr:Cb plane 16 bits per channel"
            },
            {
              "type": "entry",
              "name": "axbxgxrx106106106106",
              "value": "0x30314241",
              "summary": "[63:0] A:x:B:x:G:x:R:x 10:6:10:6:10:6:10:6 little endian"
            },
            {
              "type": "entry",
              "name": "nv15",
              "value": "0x3531564e",
              "summary": "2x2 subsampled Cr:Cb plane"
            },
            {
              "type": "entry",
              "name": "q410",
              "value": "0x30313451"
            },
            {
              "type": "entry",
              "name": "q401",
              "value": "0x31303451"
            },
            {
              "type": "entry",
              "name": "xrgb16161616",
              "value": "0x38345258",
              "summary": "[63:0] x:R:G:B 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "xbgr16161616",
              "value": "0x38344258",
              "summary": "[63:0] x:B:G:R 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "argb16161616",
              "value": "0x38345241",
              "summary": "[63:0] A:R:G:B 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "abgr16161616",
              "value": "0x38344241",
              "summary": "[63:0] A:B:G:R 16:16:16:16 little endian"
            },
            {
              "type": "entry",
              "name": "c1",
              "value": "0x20203143",
              "summary": "[7:0] C0:C1:C2:C3:C4:C5:C6:C7 1:1:1:1:1:1:1:1 eight pixels/byte"
            },
            {
              "type": "entry",
              "name": "c2",
              "value": "0x20203243",
              "summary": "[7:0] C0:C1:C2:C3 2:2:2:2 four pixels/byte"
            },
            {
              "type": "entry",
              "name": "c4",
              "value": "0x20203443",
              "summary": "[7:0] C0:C1 4:4 two pixels/byte"
            },
            {
              "type": "entry",
              "name": "d1",
              "value": "0x20203144",
              "summary": "[7:0] D0:D1:D2:D3:D4:D5:D6:D7 1:1:1:1:1:1:1:1 eight pixels/byte"
            },
            {
              "type": "entry",
              "name": "d2",
              "value": "0x20203244",
              "summary": "[7:0] D0:D1:D2:D3 2:2:2:2 four pixels/byte"
            },
            {
              "type": "entry",
              "name": "d4",
              "value": "0x20203444",
              "summary": "[7:0] D0:D1 4:4 two pixels/byte"
            },
            {
              "type": "entry",
              "name": "d8",
              "value": "0x20203844",
              "summary": "[7:0] D"
            },
            {
              "type": "entry",
              "name": "r1",
              "value": "0x20203152",
              "summary": "[7:0] R0:R1:R2:R3:R4:R5:R6:R7 1:1:1:1:1:1:1:1 eight pixels/byte"
            },
            {
              "type": "entry",
              "name": "r2",
              "value": "0x20203252",
              "summary": "[7:0] R0:R1:R2:R3 2:2:2:2 four pixels/byte"
            },
            {
              "type": "entry",
              "name": "r4",
              "value": "0x20203452",
              "summary": "[7:0] R0:R1 4:4 two pixels/byte"
            },
            {
              "type": "entry",
              "name": "r10",
              "value": "0x20303152",
              "summary": "[15:0] x:R 6:10 little endian"
            },
            {
              "type": "entry",
              "name": "r12",
              "value": "0x20323152",
              "summary": "[15:0] x:R 4:12 little endian"
            },
            {
              "type": "entry",
              "name": "avuy8888",
              "value": "0x59555641",
              "summary": "[31:0] A:Cr:Cb:Y 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "xvuy8888",
              "value": "0x59555658",
              "summary": "[31:0] X:Cr:Cb:Y 8:8:8:8 little endian"
            },
            {
              "type": "entry",
              "name": "p030",
              "value": "0x30333050",
              "summary": "2x2 subsampled Cr:Cb plane 10 bits per channel packed"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_buffer",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A buffer provides the content for a wl_surface. Buffers are\ncreated through factory interfaces such as wl_shm, wp_linux_buffer_params\n(from the linux-dmabuf protocol extension) or similar. It has a width and\na height and can be attached to a wl_surface, but the mechanism by which a\nclient provides and updates the contents is defined by the buffer factory\ninterface.\n\nColor channels are assumed to be electrical rather than optical (in other\nwords, encoded with a transfer function) unless otherwise specified. If\nthe buffer uses a format that has an alpha channel, the alpha channel is\nassumed to be premultiplied into the electrical color channel values\n(after transfer function encoding) unless otherwise specified.\n\nNote, because wl_buffer objects are created from multiple independent\nfactory interfaces, the wl_buffer interface is frozen at version 1.",
        "summary": "content for a wl_surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy a buffer. If and how you need to release the backing\nstorage is defined by the buffer factory interface.\n\nFor possible side-effects to a surface, see wl_surface.attach.",
            "summary": "destroy a buffer"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "release",
          "description": {
            "type": "description",
            "text": "Sent when this wl_buffer is no longer used by the compositor.\nThe client is now free to reuse or destroy this buffer and its\nbacking storage.\n\nIf a client receives a release event before the frame callback\nrequested in the same wl_surface.commit that attaches this\nwl_buffer to a surface, then the client is immediately free to\nreuse the buffer and its backing storage, and does not need a\nsecond buffer for the next surface content update. Typically\nthis is possible, when the compositor maintains a copy of the\nwl_surface contents, e.g. as a GL texture. This is an important\noptimization for GL(ES) compositors with wl_shm clients.",
            "summary": "compositor releases buffer"
          },
          "args": []
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wl_data_offer",
      "version": "3",
      "description": {
        "type": "description",
        "text": "A wl_data_offer represents a piece of data offered for transfer\nby another client (the source client).  It is used by the\ncopy-and-paste and drag-and-drop mechanisms.  The offer\ndescribes the different mime types that the data can be\nconverted to and provides the mechanism for transferring the\ndata directly from the source client.",
        "summary": "offer to transfer data"
      },
      "requests": [
        {
          "type": "request",
          "name": "accept",
          "description": {
            "type": "description",
            "text": "Indicate that the client can accept the given mime type, or\nNULL for not accepted.\n\nFor objects of version 2 or older, this request is used by the\nclient to give feedback whether the client can receive the given\nmime type, or NULL if none is accepted; the feedback does not\ndetermine whether the drag-and-drop operation succeeds or not.\n\nFor objects of version 3 or newer, this request determines the\nfinal result of the drag-and-drop operation. If the end result\nis that no mime types were accepted, the drag-and-drop operation\nwill be cancelled and the corresponding drag source will receive\nwl_data_source.cancelled. Clients may still use this event in\nconjunction with wl_data_source.action for feedback.",
            "summary": "accept one of the offered mime types"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the accept request"
            },
            {
              "type": "arg",
              "name": "mime_type",
              "argType": "string",
              "summary": "mime type accepted by the client",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "request",
          "name": "receive",
          "description": {
            "type": "description",
            "text": "To transfer the offered data, the client issues this request\nand indicates the mime type it wants to receive.  The transfer\nhappens through the passed file descriptor (typically created\nwith the pipe system call).  The source client writes the data\nin the mime type representation requested and then closes the\nfile descriptor.\n\nThe receiving client reads from the read end of the pipe until\nEOF and then closes its end, at which point the transfer is\ncomplete.\n\nThis request may happen multiple times for different mime types,\nboth before and after wl_data_device.drop. Drag-and-drop destination\nclients may preemptively fetch data or examine it more closely to\ndetermine acceptance.",
            "summary": "request that the data is transferred"
          },
          "args": [
            {
              "type": "arg",
              "name": "mime_type",
              "argType": "string",
              "summary": "mime type desired by receiver"
            },
            {
              "type": "arg",
              "name": "fd",
              "argType": "fd",
              "summary": "file descriptor for data transfer"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the data offer.",
            "summary": "destroy data offer"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "finish",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Notifies the compositor that the drag destination successfully\nfinished the drag-and-drop operation.\n\nUpon receiving this request, the compositor will emit\nwl_data_source.dnd_finished on the drag source client.\n\nIt is a client error to perform other requests than\nwl_data_offer.destroy after this one. It is also an error to perform\nthis request after a NULL mime type has been set in\nwl_data_offer.accept or no action was received through\nwl_data_offer.action.\n\nIf wl_data_offer.finish request is received for a non drag and drop\noperation, the invalid_finish protocol error is raised.",
            "summary": "the offer will no longer be used"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_actions",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Sets the actions that the destination side client supports for\nthis operation. This request may trigger the emission of\nwl_data_source.action and wl_data_offer.action events if the compositor\nneeds to change the selected action.\n\nThis request can be called multiple times throughout the\ndrag-and-drop operation, typically in response to wl_data_device.enter\nor wl_data_device.motion events.\n\nThis request determines the final result of the drag-and-drop\noperation. If the end result is that no action is accepted,\nthe drag source will receive wl_data_source.cancelled.\n\nThe dnd_actions argument must contain only values expressed in the\nwl_data_device_manager.dnd_actions enum, and the preferred_action\nargument must only contain one of those values set, otherwise it\nwill result in a protocol error.\n\nWhile managing an \"ask\" action, the destination drag-and-drop client\nmay perform further wl_data_offer.receive requests, and is expected\nto perform one last wl_data_offer.set_actions request with a preferred\naction other than \"ask\" (and optionally wl_data_offer.accept) before\nrequesting wl_data_offer.finish, in order to convey the action selected\nby the user. If the preferred action is not in the\nwl_data_offer.source_actions mask, an error will be raised.\n\nIf the \"ask\" action is dismissed (e.g. user cancellation), the client\nis expected to perform wl_data_offer.destroy right away.\n\nThis request can only be made on drag-and-drop offers, a protocol error\nwill be raised otherwise.",
            "summary": "set the available/preferred drag-and-drop actions"
          },
          "args": [
            {
              "type": "arg",
              "name": "dnd_actions",
              "argType": "uint",
              "summary": "actions supported by the destination client",
              "enum": "wl_data_device_manager.dnd_action"
            },
            {
              "type": "arg",
              "name": "preferred_action",
              "argType": "uint",
              "summary": "action preferred by the destination client",
              "enum": "wl_data_device_manager.dnd_action"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "offer",
          "description": {
            "type": "description",
            "text": "Sent immediately after creating the wl_data_offer object.  One\nevent per offered mime type.",
            "summary": "advertise offered mime type"
          },
          "args": [
            {
              "type": "arg",
              "name": "mime_type",
              "argType": "string",
              "summary": "offered mime type"
            }
          ]
        },
        {
          "type": "event",
          "name": "source_actions",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This event indicates the actions offered by the data source. It\nwill be sent immediately after creating the wl_data_offer object,\nor anytime the source side changes its offered actions through\nwl_data_source.set_actions.",
            "summary": "notify the source-side available actions"
          },
          "args": [
            {
              "type": "arg",
              "name": "source_actions",
              "argType": "uint",
              "summary": "actions offered by the data source",
              "enum": "wl_data_device_manager.dnd_action"
            }
          ]
        },
        {
          "type": "event",
          "name": "action",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This event indicates the action selected by the compositor after\nmatching the source/destination side actions. Only one action (or\nnone) will be offered here.\n\nThis event can be emitted multiple times during the drag-and-drop\noperation in response to destination side action changes through\nwl_data_offer.set_actions.\n\nThis event will no longer be emitted after wl_data_device.drop\nhappened on the drag-and-drop destination, the client must\nhonor the last action received, or the last preferred one set\nthrough wl_data_offer.set_actions when handling an \"ask\" action.\n\nCompositors may also change the selected action on the fly, mainly\nin response to keyboard modifier changes during the drag-and-drop\noperation.\n\nThe most recent action received is always the valid one. Prior to\nreceiving wl_data_device.drop, the chosen action may change (e.g.\ndue to keyboard modifiers being pressed). At the time of receiving\nwl_data_device.drop the drag-and-drop destination must honor the\nlast action received.\n\nAction changes may still happen after wl_data_device.drop,\nespecially on \"ask\" actions, where the drag-and-drop destination\nmay choose another action afterwards. Action changes happening\nat this stage are always the result of inter-client negotiation, the\ncompositor shall no longer be able to induce a different action.\n\nUpon \"ask\" actions, it is expected that the drag-and-drop destination\nmay potentially choose a different action and/or mime type,\nbased on wl_data_offer.source_actions and finally chosen by the\nuser (e.g. popping up a menu with the available options). The\nfinal wl_data_offer.set_actions and wl_data_offer.accept requests\nmust happen before the call to wl_data_offer.finish.",
            "summary": "notify the selected action"
          },
          "args": [
            {
              "type": "arg",
              "name": "dnd_action",
              "argType": "uint",
              "summary": "action selected by the compositor",
              "enum": "wl_data_device_manager.dnd_action"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_finish",
              "value": "0",
              "summary": "finish request was called untimely"
            },
            {
              "type": "entry",
              "name": "invalid_action_mask",
              "value": "1",
              "summary": "action mask contains invalid values"
            },
            {
              "type": "entry",
              "name": "invalid_action",
              "value": "2",
              "summary": "action argument has an invalid value"
            },
            {
              "type": "entry",
              "name": "invalid_offer",
              "value": "3",
              "summary": "offer doesn't accept this request"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_data_source",
      "version": "3",
      "description": {
        "type": "description",
        "text": "The wl_data_source object is the source side of a wl_data_offer.\nIt is created by the source client in a data transfer and\nprovides a way to describe the offered data and a way to respond\nto requests to transfer the data.",
        "summary": "offer to transfer data"
      },
      "requests": [
        {
          "type": "request",
          "name": "offer",
          "description": {
            "type": "description",
            "text": "This request adds a mime type to the set of mime types\nadvertised to targets.  Can be called several times to offer\nmultiple types.",
            "summary": "add an offered mime type"
          },
          "args": [
            {
              "type": "arg",
              "name": "mime_type",
              "argType": "string",
              "summary": "mime type offered by the data source"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the data source.",
            "summary": "destroy the data source"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_actions",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Sets the actions that the source side client supports for this\noperation. This request may trigger wl_data_source.action and\nwl_data_offer.action events if the compositor needs to change the\nselected action.\n\nThe dnd_actions argument must contain only values expressed in the\nwl_data_device_manager.dnd_actions enum, otherwise it will result\nin a protocol error.\n\nThis request must be made once only, and can only be made on sources\nused in drag-and-drop, so it must be performed before\nwl_data_device.start_drag. Attempting to use the source other than\nfor drag-and-drop will raise a protocol error.",
            "summary": "set the available drag-and-drop actions"
          },
          "args": [
            {
              "type": "arg",
              "name": "dnd_actions",
              "argType": "uint",
              "summary": "actions supported by the data source",
              "enum": "wl_data_device_manager.dnd_action"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "target",
          "description": {
            "type": "description",
            "text": "Sent when a target accepts pointer_focus or motion events.  If\na target does not accept any of the offered types, type is NULL.\n\nUsed for feedback during drag-and-drop.",
            "summary": "a target accepts an offered mime type"
          },
          "args": [
            {
              "type": "arg",
              "name": "mime_type",
              "argType": "string",
              "summary": "mime type accepted by the target",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "event",
          "name": "send",
          "description": {
            "type": "description",
            "text": "Request for data from the client.  Send the data as the\nspecified mime type over the passed file descriptor, then\nclose it.",
            "summary": "send the data"
          },
          "args": [
            {
              "type": "arg",
              "name": "mime_type",
              "argType": "string",
              "summary": "mime type for the data"
            },
            {
              "type": "arg",
              "name": "fd",
              "argType": "fd",
              "summary": "file descriptor for the data"
            }
          ]
        },
        {
          "type": "event",
          "name": "cancelled",
          "description": {
            "type": "description",
            "text": "This data source is no longer valid. There are several reasons why\nthis could happen:\n\n- The data source has been replaced by another data source.\n- The drag-and-drop operation was performed, but the drop destination\ndid not accept any of the mime types offered through\nwl_data_source.target.\n- The drag-and-drop operation was performed, but the drop destination\ndid not select any of the actions present in the mask offered through\nwl_data_source.action.\n- The drag-and-drop operation was performed but didn't happen over a\nsurface.\n- The compositor cancelled the drag-and-drop operation (e.g. compositor\ndependent timeouts to avoid stale drag-and-drop transfers).\n\nThe client should clean up and destroy this data source.\n\nFor objects of version 2 or older, wl_data_source.cancelled will\nonly be emitted if the data source was replaced by another data\nsource.",
            "summary": "selection was cancelled"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "dnd_drop_performed",
          "since": "3",
          "description": {
            "type": "description",
            "text": "The user performed the drop action. This event does not indicate\nacceptance, wl_data_source.cancelled may still be emitted afterwards\nif the drop destination does not accept any mime type.\n\nHowever, this event might however not be received if the compositor\ncancelled the drag-and-drop operation before this event could happen.\n\nNote that the data_source may still be used in the future and should\nnot be destroyed here.",
            "summary": "the drag-and-drop operation physically finished"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "dnd_finished",
          "since": "3",
          "description": {
            "type": "description",
            "text": "The drop destination finished interoperating with this data\nsource, so the client is now free to destroy this data source and\nfree all associated data.\n\nIf the action used to perform the operation was \"move\", the\nsource can now delete the transferred data.",
            "summary": "the drag-and-drop operation concluded"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "action",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This event indicates the action selected by the compositor after\nmatching the source/destination side actions. Only one action (or\nnone) will be offered here.\n\nThis event can be emitted multiple times during the drag-and-drop\noperation, mainly in response to destination side changes through\nwl_data_offer.set_actions, and as the data device enters/leaves\nsurfaces.\n\nIt is only possible to receive this event after\nwl_data_source.dnd_drop_performed if the drag-and-drop operation\nended in an \"ask\" action, in which case the final wl_data_source.action\nevent will happen immediately before wl_data_source.dnd_finished.\n\nCompositors may also change the selected action on the fly, mainly\nin response to keyboard modifier changes during the drag-and-drop\noperation.\n\nThe most recent action received is always the valid one. The chosen\naction may change alongside negotiation (e.g. an \"ask\" action can turn\ninto a \"move\" operation), so the effects of the final action must\nalways be applied in wl_data_offer.dnd_finished.\n\nClients can trigger cursor surface changes from this point, so\nthey reflect the current action.",
            "summary": "notify the selected action"
          },
          "args": [
            {
              "type": "arg",
              "name": "dnd_action",
              "argType": "uint",
              "summary": "action selected by the compositor",
              "enum": "wl_data_device_manager.dnd_action"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_action_mask",
              "value": "0",
              "summary": "action mask contains invalid values"
            },
            {
              "type": "entry",
              "name": "invalid_source",
              "value": "1",
              "summary": "source doesn't accept this request"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_data_device",
      "version": "3",
      "description": {
        "type": "description",
        "text": "There is one wl_data_device per seat which can be obtained\nfrom the global wl_data_device_manager singleton.\n\nA wl_data_device provides access to inter-client data transfer\nmechanisms such as copy-and-paste and drag-and-drop.",
        "summary": "data transfer device"
      },
      "requests": [
        {
          "type": "request",
          "name": "start_drag",
          "description": {
            "type": "description",
            "text": "This request asks the compositor to start a drag-and-drop\noperation on behalf of the client.\n\nThe source argument is the data source that provides the data\nfor the eventual data transfer. If source is NULL, enter, leave\nand motion events are sent only to the client that initiated the\ndrag and the client is expected to handle the data passing\ninternally. If source is destroyed, the drag-and-drop session will be\ncancelled.\n\nThe origin surface is the surface where the drag originates and\nthe client must have an active implicit grab that matches the\nserial.\n\nThe icon surface is an optional (can be NULL) surface that\nprovides an icon to be moved around with the cursor.  Initially,\nthe top-left corner of the icon surface is placed at the cursor\nhotspot, but subsequent wl_surface.offset requests can move the\nrelative position. Attach requests must be confirmed with\nwl_surface.commit as usual. The icon surface is given the role of\na drag-and-drop icon. If the icon surface already has another role,\nit raises a protocol error.\n\nThe input region is ignored for wl_surfaces with the role of a\ndrag-and-drop icon.\n\nThe given source may not be used in any further set_selection or\nstart_drag requests. Attempting to reuse a previously-used source\nmay send a used_source error.",
            "summary": "start drag-and-drop operation"
          },
          "args": [
            {
              "type": "arg",
              "name": "source",
              "argType": "object",
              "summary": "data source for the eventual transfer",
              "interface": "wl_data_source",
              "allowNull": "true"
            },
            {
              "type": "arg",
              "name": "origin",
              "argType": "object",
              "summary": "surface where the drag originates",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "icon",
              "argType": "object",
              "summary": "drag-and-drop icon surface",
              "interface": "wl_surface",
              "allowNull": "true"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the implicit grab on the origin"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_selection",
          "description": {
            "type": "description",
            "text": "This request asks the compositor to set the selection\nto the data from the source on behalf of the client.\n\nTo unset the selection, set the source to NULL.\n\nThe given source may not be used in any further set_selection or\nstart_drag requests. Attempting to reuse a previously-used source\nmay send a used_source error.",
            "summary": "copy data to the selection"
          },
          "args": [
            {
              "type": "arg",
              "name": "source",
              "argType": "object",
              "summary": "data source for the selection",
              "interface": "wl_data_source",
              "allowNull": "true"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the event that triggered this request"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This request destroys the data device.",
            "summary": "destroy data device"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "data_offer",
          "description": {
            "type": "description",
            "text": "The data_offer event introduces a new wl_data_offer object,\nwhich will subsequently be used in either the\ndata_device.enter event (for drag-and-drop) or the\ndata_device.selection event (for selections).  Immediately\nfollowing the data_device.data_offer event, the new data_offer\nobject will send out data_offer.offer events to describe the\nmime types it offers.",
            "summary": "introduce a new wl_data_offer"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new data_offer object",
              "interface": "wl_data_offer"
            }
          ]
        },
        {
          "type": "event",
          "name": "enter",
          "description": {
            "type": "description",
            "text": "This event is sent when an active drag-and-drop pointer enters\na surface owned by the client.  The position of the pointer at\nenter time is provided by the x and y arguments, in surface-local\ncoordinates.",
            "summary": "initiate drag-and-drop session"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the enter event"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "client surface entered",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed",
              "summary": "surface-local y coordinate"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "object",
              "summary": "source data_offer object",
              "interface": "wl_data_offer",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "event",
          "name": "leave",
          "description": {
            "type": "description",
            "text": "This event is sent when the drag-and-drop pointer leaves the\nsurface and the session ends.  The client must destroy the\nwl_data_offer introduced at enter time at this point.",
            "summary": "end drag-and-drop session"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "motion",
          "description": {
            "type": "description",
            "text": "This event is sent when the drag-and-drop pointer moves within\nthe currently focused surface. The new position of the pointer\nis provided by the x and y arguments, in surface-local\ncoordinates.",
            "summary": "drag-and-drop session motion"
          },
          "args": [
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed",
              "summary": "surface-local y coordinate"
            }
          ]
        },
        {
          "type": "event",
          "name": "drop",
          "description": {
            "type": "description",
            "text": "The event is sent when a drag-and-drop operation is ended\nbecause the implicit grab is removed.\n\nThe drag-and-drop destination is expected to honor the last action\nreceived through wl_data_offer.action, if the resulting action is\n\"copy\" or \"move\", the destination can still perform\nwl_data_offer.receive requests, and is expected to end all\ntransfers with a wl_data_offer.finish request.\n\nIf the resulting action is \"ask\", the action will not be considered\nfinal. The drag-and-drop destination is expected to perform one last\nwl_data_offer.set_actions request, or wl_data_offer.destroy in order\nto cancel the operation.",
            "summary": "end drag-and-drop session successfully"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "selection",
          "description": {
            "type": "description",
            "text": "The selection event is sent out to notify the client of a new\nwl_data_offer for the selection for this device.  The\ndata_device.data_offer and the data_offer.offer events are\nsent out immediately before this event to introduce the data\noffer object.  The selection event is sent to a client\nimmediately before receiving keyboard focus and when a new\nselection is set while the client has keyboard focus.  The\ndata_offer is valid until a new data_offer or NULL is received\nor until the client loses keyboard focus.  Switching surface with\nkeyboard focus within the same client doesn't mean a new selection\nwill be sent.  The client must destroy the previous selection\ndata_offer, if any, upon receiving this event.",
            "summary": "advertise new selection"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "object",
              "summary": "selection data_offer object",
              "interface": "wl_data_offer",
              "allowNull": "true"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "role",
              "value": "0",
              "summary": "given wl_surface has another role"
            },
            {
              "type": "entry",
              "name": "used_source",
              "value": "1",
              "summary": "source has already been used"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_data_device_manager",
      "version": "3",
      "description": {
        "type": "description",
        "text": "The wl_data_device_manager is a singleton global object that\nprovides access to inter-client data transfer mechanisms such as\ncopy-and-paste and drag-and-drop.  These mechanisms are tied to\na wl_seat and this interface lets a client get a wl_data_device\ncorresponding to a wl_seat.\n\nDepending on the version bound, the objects created from the bound\nwl_data_device_manager object will have different requirements for\nfunctioning properly. See wl_data_source.set_actions,\nwl_data_offer.accept and wl_data_offer.finish for details.",
        "summary": "data transfer interface"
      },
      "requests": [
        {
          "type": "request",
          "name": "create_data_source",
          "description": {
            "type": "description",
            "text": "Create a new data source.",
            "summary": "create a new data source"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "data source to create",
              "interface": "wl_data_source"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_data_device",
          "description": {
            "type": "description",
            "text": "Create a new data device for a given seat.",
            "summary": "create a new data device"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "data device to create",
              "interface": "wl_data_device"
            },
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "summary": "seat associated with the data device",
              "interface": "wl_seat"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "dnd_action",
          "since": "3",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "This is a bitmask of the available/preferred actions in a\ndrag-and-drop operation.\n\nIn the compositor, the selected action is a result of matching the\nactions offered by the source and destination sides.  \"action\" events\nwith a \"none\" action will be sent to both source and destination if\nthere is no match. All further checks will effectively happen on\n(source actions ∩ destination actions).\n\nIn addition, compositors may also pick different actions in\nreaction to key modifiers being pressed. One common design that\nis used in major toolkits (and the behavior recommended for\ncompositors) is:\n\n- If no modifiers are pressed, the first match (in bit order)\nwill be used.\n- Pressing Shift selects \"move\", if enabled in the mask.\n- Pressing Control selects \"copy\", if enabled in the mask.\n\nBehavior beyond that is considered implementation-dependent.\nCompositors may for example bind other modifiers (like Alt/Meta)\nor drags initiated with other buttons than BTN_LEFT to specific\nactions (e.g. \"ask\").",
            "summary": "drag and drop actions"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "no action"
            },
            {
              "type": "entry",
              "name": "copy",
              "value": "1",
              "summary": "copy action"
            },
            {
              "type": "entry",
              "name": "move",
              "value": "2",
              "summary": "move action"
            },
            {
              "type": "entry",
              "name": "ask",
              "value": "4",
              "summary": "ask action"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_shell",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This interface is implemented by servers that provide\ndesktop-style user interfaces.\n\nIt allows clients to associate a wl_shell_surface with\na basic surface.\n\nNote! This protocol is deprecated and not intended for production use.\nFor desktop-style user interfaces, use xdg_shell. Compositors and clients\nshould not implement this interface.",
        "summary": "create desktop-style surfaces"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_shell_surface",
          "description": {
            "type": "description",
            "text": "Create a shell surface for an existing surface. This gives\nthe wl_surface the role of a shell surface. If the wl_surface\nalready has another role, it raises a protocol error.\n\nOnly one shell surface can be associated with a given surface.",
            "summary": "create a shell surface from a surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "shell surface to create",
              "interface": "wl_shell_surface"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "surface to be given the shell surface role",
              "interface": "wl_surface"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "role",
              "value": "0",
              "summary": "given wl_surface has another role"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_shell_surface",
      "version": "1",
      "description": {
        "type": "description",
        "text": "An interface that may be implemented by a wl_surface, for\nimplementations that provide a desktop-style user interface.\n\nIt provides requests to treat surfaces like toplevel, fullscreen\nor popup windows, move, resize or maximize them, associate\nmetadata like title and class, etc.\n\nOn the server side the object is automatically destroyed when\nthe related wl_surface is destroyed. On the client side,\nwl_shell_surface_destroy() must be called before destroying\nthe wl_surface object.",
        "summary": "desktop-style metadata interface"
      },
      "requests": [
        {
          "type": "request",
          "name": "pong",
          "description": {
            "type": "description",
            "text": "A client must respond to a ping event with a pong request or\nthe client may be deemed unresponsive.",
            "summary": "respond to a ping event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the ping event"
            }
          ]
        },
        {
          "type": "request",
          "name": "move",
          "description": {
            "type": "description",
            "text": "Start a pointer-driven move of the surface.\n\nThis request must be used in response to a button press event.\nThe server may ignore move requests depending on the state of\nthe surface (e.g. fullscreen or maximized).",
            "summary": "start an interactive move"
          },
          "args": [
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "summary": "seat whose pointer is used",
              "interface": "wl_seat"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the implicit grab on the pointer"
            }
          ]
        },
        {
          "type": "request",
          "name": "resize",
          "description": {
            "type": "description",
            "text": "Start a pointer-driven resizing of the surface.\n\nThis request must be used in response to a button press event.\nThe server may ignore resize requests depending on the state of\nthe surface (e.g. fullscreen or maximized).",
            "summary": "start an interactive resize"
          },
          "args": [
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "summary": "seat whose pointer is used",
              "interface": "wl_seat"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the implicit grab on the pointer"
            },
            {
              "type": "arg",
              "name": "edges",
              "argType": "uint",
              "summary": "which edge or corner is being dragged",
              "enum": "resize"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_toplevel",
          "description": {
            "type": "description",
            "text": "Map the surface as a toplevel surface.\n\nA toplevel surface is not fullscreen, maximized or transient.",
            "summary": "make the surface a toplevel surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_transient",
          "description": {
            "type": "description",
            "text": "Map the surface relative to an existing surface.\n\nThe x and y arguments specify the location of the upper left\ncorner of the surface relative to the upper left corner of the\nparent surface, in surface-local coordinates.\n\nThe flags argument controls details of the transient behaviour.",
            "summary": "make the surface a transient surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "parent",
              "argType": "object",
              "summary": "parent surface",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "surface-local y coordinate"
            },
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "transient surface behavior",
              "enum": "transient"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_fullscreen",
          "description": {
            "type": "description",
            "text": "Map the surface as a fullscreen surface.\n\nIf an output parameter is given then the surface will be made\nfullscreen on that output. If the client does not specify the\noutput then the compositor will apply its policy - usually\nchoosing the output on which the surface has the biggest surface\narea.\n\nThe client may specify a method to resolve a size conflict\nbetween the output size and the surface size - this is provided\nthrough the method parameter.\n\nThe framerate parameter is used only when the method is set\nto \"driver\", to indicate the preferred framerate. A value of 0\nindicates that the client does not care about framerate.  The\nframerate is specified in mHz, that is framerate of 60000 is 60Hz.\n\nA method of \"scale\" or \"driver\" implies a scaling operation of\nthe surface, either via a direct scaling operation or a change of\nthe output mode. This will override any kind of output scaling, so\nthat mapping a surface with a buffer size equal to the mode can\nfill the screen independent of buffer_scale.\n\nA method of \"fill\" means we don't scale up the buffer, however\nany output scale is applied. This means that you may run into\nan edge case where the application maps a buffer with the same\nsize of the output mode but buffer_scale 1 (thus making a\nsurface larger than the output). In this case it is allowed to\ndownscale the results to fit the screen.\n\nThe compositor must reply to this request with a configure event\nwith the dimensions for the output on which the surface will\nbe made fullscreen.",
            "summary": "make the surface a fullscreen surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "method",
              "argType": "uint",
              "summary": "method for resolving size conflict",
              "enum": "fullscreen_method"
            },
            {
              "type": "arg",
              "name": "framerate",
              "argType": "uint",
              "summary": "framerate in mHz"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "summary": "output on which the surface is to be fullscreen",
              "interface": "wl_output",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_popup",
          "description": {
            "type": "description",
            "text": "Map the surface as a popup.\n\nA popup surface is a transient surface with an added pointer\ngrab.\n\nAn existing implicit grab will be changed to owner-events mode,\nand the popup grab will continue after the implicit grab ends\n(i.e. releasing the mouse button does not cause the popup to\nbe unmapped).\n\nThe popup grab continues until the window is destroyed or a\nmouse button is pressed in any other client's window. A click\nin any of the client's surfaces is reported as normal, however,\nclicks in other clients' surfaces will be discarded and trigger\nthe callback.\n\nThe x and y arguments specify the location of the upper left\ncorner of the surface relative to the upper left corner of the\nparent surface, in surface-local coordinates.",
            "summary": "make the surface a popup surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "summary": "seat whose pointer is used",
              "interface": "wl_seat"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the implicit grab on the pointer"
            },
            {
              "type": "arg",
              "name": "parent",
              "argType": "object",
              "summary": "parent surface",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "surface-local y coordinate"
            },
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "transient surface behavior",
              "enum": "transient"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_maximized",
          "description": {
            "type": "description",
            "text": "Map the surface as a maximized surface.\n\nIf an output parameter is given then the surface will be\nmaximized on that output. If the client does not specify the\noutput then the compositor will apply its policy - usually\nchoosing the output on which the surface has the biggest surface\narea.\n\nThe compositor will reply with a configure event telling\nthe expected new surface size. The operation is completed\non the next buffer attach to this surface.\n\nA maximized surface typically fills the entire output it is\nbound to, except for desktop elements such as panels. This is\nthe main difference between a maximized shell surface and a\nfullscreen shell surface.\n\nThe details depend on the compositor implementation.",
            "summary": "make the surface a maximized surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "summary": "output on which the surface is to be maximized",
              "interface": "wl_output",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_title",
          "description": {
            "type": "description",
            "text": "Set a short title for the surface.\n\nThis string may be used to identify the surface in a task bar,\nwindow list, or other user interface elements provided by the\ncompositor.\n\nThe string must be encoded in UTF-8.",
            "summary": "set surface title"
          },
          "args": [
            {
              "type": "arg",
              "name": "title",
              "argType": "string",
              "summary": "surface title"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_class",
          "description": {
            "type": "description",
            "text": "Set a class for the surface.\n\nThe surface class identifies the general class of applications\nto which the surface belongs. A common convention is to use the\nfile name (or the full path if it is a non-standard location) of\nthe application's .desktop file as the class.",
            "summary": "set surface class"
          },
          "args": [
            {
              "type": "arg",
              "name": "class_",
              "argType": "string",
              "summary": "surface class"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "ping",
          "description": {
            "type": "description",
            "text": "Ping a client to check if it is receiving events and sending\nrequests. A client is expected to reply with a pong request.",
            "summary": "ping client"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the ping"
            }
          ]
        },
        {
          "type": "event",
          "name": "configure",
          "description": {
            "type": "description",
            "text": "The configure event asks the client to resize its surface.\n\nThe size is a hint, in the sense that the client is free to\nignore it if it doesn't resize, pick a smaller size (to\nsatisfy aspect ratio or resize in steps of NxM pixels).\n\nThe edges parameter provides a hint about how the surface\nwas resized. The client may use this information to decide\nhow to adjust its content to the new size (e.g. a scrolling\narea might adjust its content position to leave the viewable\ncontent unmoved).\n\nThe client is free to dismiss all but the last configure\nevent it received.\n\nThe width and height arguments specify the size of the window\nin surface-local coordinates.",
            "summary": "suggest resize"
          },
          "args": [
            {
              "type": "arg",
              "name": "edges",
              "argType": "uint",
              "summary": "how the surface was resized",
              "enum": "resize"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "new width of the surface"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "new height of the surface"
            }
          ]
        },
        {
          "type": "event",
          "name": "popup_done",
          "description": {
            "type": "description",
            "text": "The popup_done event is sent out when a popup grab is broken,\nthat is, when the user clicks a surface that doesn't belong\nto the client owning the popup surface.",
            "summary": "popup interaction is done"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "resize",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "These values are used to indicate which edge of a surface\nis being dragged in a resize operation. The server may\nuse this information to adapt its behavior, e.g. choose\nan appropriate cursor image.",
            "summary": "edge values for resizing"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "no edge"
            },
            {
              "type": "entry",
              "name": "top",
              "value": "1",
              "summary": "top edge"
            },
            {
              "type": "entry",
              "name": "bottom",
              "value": "2",
              "summary": "bottom edge"
            },
            {
              "type": "entry",
              "name": "left",
              "value": "4",
              "summary": "left edge"
            },
            {
              "type": "entry",
              "name": "top_left",
              "value": "5",
              "summary": "top and left edges"
            },
            {
              "type": "entry",
              "name": "bottom_left",
              "value": "6",
              "summary": "bottom and left edges"
            },
            {
              "type": "entry",
              "name": "right",
              "value": "8",
              "summary": "right edge"
            },
            {
              "type": "entry",
              "name": "top_right",
              "value": "9",
              "summary": "top and right edges"
            },
            {
              "type": "entry",
              "name": "bottom_right",
              "value": "10",
              "summary": "bottom and right edges"
            }
          ]
        },
        {
          "type": "enum",
          "name": "transient",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "These flags specify details of the expected behaviour\nof transient surfaces. Used in the set_transient request.",
            "summary": "details of transient behaviour"
          },
          "entries": [
            {
              "type": "entry",
              "name": "inactive",
              "value": "0x1",
              "summary": "do not set keyboard focus"
            }
          ]
        },
        {
          "type": "enum",
          "name": "fullscreen_method",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Hints to indicate to the compositor how to deal with a conflict\nbetween the dimensions of the surface and the dimensions of the\noutput. The compositor is free to ignore this parameter.",
            "summary": "different method to set the surface fullscreen"
          },
          "entries": [
            {
              "type": "entry",
              "name": "default",
              "value": "0",
              "summary": "no preference, apply default policy"
            },
            {
              "type": "entry",
              "name": "scale",
              "value": "1",
              "summary": "scale, preserve the surface's aspect ratio and center on output"
            },
            {
              "type": "entry",
              "name": "driver",
              "value": "2",
              "summary": "switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch"
            },
            {
              "type": "entry",
              "name": "fill",
              "value": "3",
              "summary": "no upscaling, center on output and add black borders to compensate size mismatch"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_surface",
      "version": "6",
      "description": {
        "type": "description",
        "text": "A surface is a rectangular area that may be displayed on zero\nor more outputs, and shown any number of times at the compositor's\ndiscretion. They can present wl_buffers, receive user input, and\ndefine a local coordinate system.\n\nThe size of a surface (and relative positions on it) is described\nin surface-local coordinates, which may differ from the buffer\ncoordinates of the pixel content, in case a buffer_transform\nor a buffer_scale is used.\n\nA surface without a \"role\" is fairly useless: a compositor does\nnot know where, when or how to present it. The role is the\npurpose of a wl_surface. Examples of roles are a cursor for a\npointer (as set by wl_pointer.set_cursor), a drag icon\n(wl_data_device.start_drag), a sub-surface\n(wl_subcompositor.get_subsurface), and a window as defined by a\nshell protocol (e.g. wl_shell.get_shell_surface).\n\nA surface can have only one role at a time. Initially a\nwl_surface does not have a role. Once a wl_surface is given a\nrole, it is set permanently for the whole lifetime of the\nwl_surface object. Giving the current role again is allowed,\nunless explicitly forbidden by the relevant interface\nspecification.\n\nSurface roles are given by requests in other interfaces such as\nwl_pointer.set_cursor. The request should explicitly mention\nthat this request gives a role to a wl_surface. Often, this\nrequest also creates a new protocol object that represents the\nrole and adds additional functionality to wl_surface. When a\nclient wants to destroy a wl_surface, they must destroy this role\nobject before the wl_surface, otherwise a defunct_role_object error is\nsent.\n\nDestroying the role object does not remove the role from the\nwl_surface, but it may stop the wl_surface from \"playing the role\".\nFor instance, if a wl_subsurface object is destroyed, the wl_surface\nit was created for will be unmapped and forget its position and\nz-order. It is allowed to create a wl_subsurface for the same\nwl_surface again, but it is not allowed to use the wl_surface as\na cursor (cursor is a different role than sub-surface, and role\nswitching is not allowed).",
        "summary": "an onscreen surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Deletes the surface and invalidates its object ID.",
            "summary": "delete surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "attach",
          "description": {
            "type": "description",
            "text": "Set a buffer as the content of this surface.\n\nThe new size of the surface is calculated based on the buffer\nsize transformed by the inverse buffer_transform and the\ninverse buffer_scale. This means that at commit time the supplied\nbuffer size must be an integer multiple of the buffer_scale. If\nthat's not the case, an invalid_size error is sent.\n\nThe x and y arguments specify the location of the new pending\nbuffer's upper left corner, relative to the current buffer's upper\nleft corner, in surface-local coordinates. In other words, the\nx and y, combined with the new surface size define in which\ndirections the surface's size changes. Setting anything other than 0\nas x and y arguments is discouraged, and should instead be replaced\nwith using the separate wl_surface.offset request.\n\nWhen the bound wl_surface version is 5 or higher, passing any\nnon-zero x or y is a protocol violation, and will result in an\n'invalid_offset' error being raised. The x and y arguments are ignored\nand do not change the pending state. To achieve equivalent semantics,\nuse wl_surface.offset.\n\nSurface contents are double-buffered state, see wl_surface.commit.\n\nThe initial surface contents are void; there is no content.\nwl_surface.attach assigns the given wl_buffer as the pending\nwl_buffer. wl_surface.commit makes the pending wl_buffer the new\nsurface contents, and the size of the surface becomes the size\ncalculated from the wl_buffer, as described above. After commit,\nthere is no pending buffer until the next attach.\n\nCommitting a pending wl_buffer allows the compositor to read the\npixels in the wl_buffer. The compositor may access the pixels at\nany time after the wl_surface.commit request. When the compositor\nwill not access the pixels anymore, it will send the\nwl_buffer.release event. Only after receiving wl_buffer.release,\nthe client may reuse the wl_buffer. A wl_buffer that has been\nattached and then replaced by another attach instead of committed\nwill not receive a release event, and is not used by the\ncompositor.\n\nIf a pending wl_buffer has been committed to more than one wl_surface,\nthe delivery of wl_buffer.release events becomes undefined. A well\nbehaved client should not rely on wl_buffer.release events in this\ncase. Alternatively, a client could create multiple wl_buffer objects\nfrom the same backing storage or use wp_linux_buffer_release.\n\nDestroying the wl_buffer after wl_buffer.release does not change\nthe surface contents. Destroying the wl_buffer before wl_buffer.release\nis allowed as long as the underlying buffer storage isn't re-used (this\ncan happen e.g. on client process termination). However, if the client\ndestroys the wl_buffer before receiving the wl_buffer.release event and\nmutates the underlying buffer storage, the surface contents become\nundefined immediately.\n\nIf wl_surface.attach is sent with a NULL wl_buffer, the\nfollowing wl_surface.commit will remove the surface content.\n\nIf a pending wl_buffer has been destroyed, the result is not specified.\nMany compositors are known to remove the surface content on the following\nwl_surface.commit, but this behaviour is not universal. Clients seeking to\nmaximise compatibility should not destroy pending buffers and should\nensure that they explicitly remove content from surfaces, even after\ndestroying buffers.",
            "summary": "set the surface contents"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "summary": "buffer of surface contents",
              "interface": "wl_buffer",
              "allowNull": "true"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "surface-local y coordinate"
            }
          ]
        },
        {
          "type": "request",
          "name": "damage",
          "description": {
            "type": "description",
            "text": "This request is used to describe the regions where the pending\nbuffer is different from the current surface contents, and where\nthe surface therefore needs to be repainted. The compositor\nignores the parts of the damage that fall outside of the surface.\n\nDamage is double-buffered state, see wl_surface.commit.\n\nThe damage rectangle is specified in surface-local coordinates,\nwhere x and y specify the upper left corner of the damage rectangle.\n\nThe initial value for pending damage is empty: no damage.\nwl_surface.damage adds pending damage: the new pending damage\nis the union of old pending damage and the given rectangle.\n\nwl_surface.commit assigns pending damage as the current damage,\nand clears pending damage. The server will clear the current\ndamage as it repaints the surface.\n\nNote! New clients should not use this request. Instead damage can be\nposted with wl_surface.damage_buffer which uses buffer coordinates\ninstead of surface coordinates.",
            "summary": "mark part of the surface damaged"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "surface-local y coordinate"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "width of damage rectangle"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "height of damage rectangle"
            }
          ]
        },
        {
          "type": "request",
          "name": "frame",
          "description": {
            "type": "description",
            "text": "Request a notification when it is a good time to start drawing a new\nframe, by creating a frame callback. This is useful for throttling\nredrawing operations, and driving animations.\n\nWhen a client is animating on a wl_surface, it can use the 'frame'\nrequest to get notified when it is a good time to draw and commit the\nnext frame of animation. If the client commits an update earlier than\nthat, it is likely that some updates will not make it to the display,\nand the client is wasting resources by drawing too often.\n\nThe frame request will take effect on the next wl_surface.commit.\nThe notification will only be posted for one frame unless\nrequested again. For a wl_surface, the notifications are posted in\nthe order the frame requests were committed.\n\nThe server must send the notifications so that a client\nwill not send excessive updates, while still allowing\nthe highest possible update rate for clients that wait for the reply\nbefore drawing again. The server should give some time for the client\nto draw and commit after sending the frame callback events to let it\nhit the next output refresh.\n\nA server should avoid signaling the frame callbacks if the\nsurface is not visible in any way, e.g. the surface is off-screen,\nor completely obscured by other opaque surfaces.\n\nThe object returned by this request will be destroyed by the\ncompositor after the callback is fired and as such the client must not\nattempt to use it after that point.\n\nThe callback_data passed in the callback is the current time, in\nmilliseconds, with an undefined base.",
            "summary": "request a frame throttling hint"
          },
          "args": [
            {
              "type": "arg",
              "name": "callback",
              "argType": "new_id",
              "summary": "callback object for the frame request",
              "interface": "wl_callback"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_opaque_region",
          "description": {
            "type": "description",
            "text": "This request sets the region of the surface that contains\nopaque content.\n\nThe opaque region is an optimization hint for the compositor\nthat lets it optimize the redrawing of content behind opaque\nregions.  Setting an opaque region is not required for correct\nbehaviour, but marking transparent content as opaque will result\nin repaint artifacts.\n\nThe opaque region is specified in surface-local coordinates.\n\nThe compositor ignores the parts of the opaque region that fall\noutside of the surface.\n\nOpaque region is double-buffered state, see wl_surface.commit.\n\nwl_surface.set_opaque_region changes the pending opaque region.\nwl_surface.commit copies the pending region to the current region.\nOtherwise, the pending and current regions are never changed.\n\nThe initial value for an opaque region is empty. Setting the pending\nopaque region has copy semantics, and the wl_region object can be\ndestroyed immediately. A NULL wl_region causes the pending opaque\nregion to be set to empty.",
            "summary": "set opaque region"
          },
          "args": [
            {
              "type": "arg",
              "name": "region",
              "argType": "object",
              "summary": "opaque region of the surface",
              "interface": "wl_region",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_input_region",
          "description": {
            "type": "description",
            "text": "This request sets the region of the surface that can receive\npointer and touch events.\n\nInput events happening outside of this region will try the next\nsurface in the server surface stack. The compositor ignores the\nparts of the input region that fall outside of the surface.\n\nThe input region is specified in surface-local coordinates.\n\nInput region is double-buffered state, see wl_surface.commit.\n\nwl_surface.set_input_region changes the pending input region.\nwl_surface.commit copies the pending region to the current region.\nOtherwise the pending and current regions are never changed,\nexcept cursor and icon surfaces are special cases, see\nwl_pointer.set_cursor and wl_data_device.start_drag.\n\nThe initial value for an input region is infinite. That means the\nwhole surface will accept input. Setting the pending input region\nhas copy semantics, and the wl_region object can be destroyed\nimmediately. A NULL wl_region causes the input region to be set\nto infinite.",
            "summary": "set input region"
          },
          "args": [
            {
              "type": "arg",
              "name": "region",
              "argType": "object",
              "summary": "input region of the surface",
              "interface": "wl_region",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "request",
          "name": "commit",
          "description": {
            "type": "description",
            "text": "Surface state (input, opaque, and damage regions, attached buffers,\netc.) is double-buffered. Protocol requests modify the pending state,\nas opposed to the active state in use by the compositor.\n\nA commit request atomically creates a content update from the pending\nstate, even if the pending state has not been touched. The content\nupdate is placed in a queue until it becomes active. After commit, the\nnew pending state is as documented for each related request.\n\nWhen the content update is applied, the wl_buffer is applied before all\nother state. This means that all coordinates in double-buffered state\nare relative to the newly attached wl_buffers, except for\nwl_surface.attach itself. If there is no newly attached wl_buffer, the\ncoordinates are relative to the previous content update.\n\nAll requests that need a commit to become effective are documented\nto affect double-buffered state.\n\nOther interfaces may add further double-buffered surface state.",
            "summary": "commit pending surface state"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_buffer_transform",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This request sets the transformation that the client has already applied\nto the content of the buffer. The accepted values for the transform\nparameter are the values for wl_output.transform.\n\nThe compositor applies the inverse of this transformation whenever it\nuses the buffer contents.\n\nBuffer transform is double-buffered state, see wl_surface.commit.\n\nA newly created surface has its buffer transformation set to normal.\n\nwl_surface.set_buffer_transform changes the pending buffer\ntransformation. wl_surface.commit copies the pending buffer\ntransformation to the current one. Otherwise, the pending and current\nvalues are never changed.\n\nThe purpose of this request is to allow clients to render content\naccording to the output transform, thus permitting the compositor to\nuse certain optimizations even if the display is rotated. Using\nhardware overlays and scanning out a client buffer for fullscreen\nsurfaces are examples of such optimizations. Those optimizations are\nhighly dependent on the compositor implementation, so the use of this\nrequest should be considered on a case-by-case basis.\n\nNote that if the transform value includes 90 or 270 degree rotation,\nthe width of the buffer will become the surface height and the height\nof the buffer will become the surface width.\n\nIf transform is not one of the values from the\nwl_output.transform enum the invalid_transform protocol error\nis raised.",
            "summary": "sets the buffer transformation"
          },
          "args": [
            {
              "type": "arg",
              "name": "transform",
              "argType": "int",
              "summary": "transform for interpreting buffer contents",
              "enum": "wl_output.transform"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_buffer_scale",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This request sets an optional scaling factor on how the compositor\ninterprets the contents of the buffer attached to the window.\n\nBuffer scale is double-buffered state, see wl_surface.commit.\n\nA newly created surface has its buffer scale set to 1.\n\nwl_surface.set_buffer_scale changes the pending buffer scale.\nwl_surface.commit copies the pending buffer scale to the current one.\nOtherwise, the pending and current values are never changed.\n\nThe purpose of this request is to allow clients to supply higher\nresolution buffer data for use on high resolution outputs. It is\nintended that you pick the same buffer scale as the scale of the\noutput that the surface is displayed on. This means the compositor\ncan avoid scaling when rendering the surface on that output.\n\nNote that if the scale is larger than 1, then you have to attach\na buffer that is larger (by a factor of scale in each dimension)\nthan the desired surface size.\n\nIf scale is not greater than 0 the invalid_scale protocol error is\nraised.",
            "summary": "sets the buffer scaling factor"
          },
          "args": [
            {
              "type": "arg",
              "name": "scale",
              "argType": "int",
              "summary": "scale for interpreting buffer contents"
            }
          ]
        },
        {
          "type": "request",
          "name": "damage_buffer",
          "since": "4",
          "description": {
            "type": "description",
            "text": "This request is used to describe the regions where the pending\nbuffer is different from the current surface contents, and where\nthe surface therefore needs to be repainted. The compositor\nignores the parts of the damage that fall outside of the surface.\n\nDamage is double-buffered state, see wl_surface.commit.\n\nThe damage rectangle is specified in buffer coordinates,\nwhere x and y specify the upper left corner of the damage rectangle.\n\nThe initial value for pending damage is empty: no damage.\nwl_surface.damage_buffer adds pending damage: the new pending\ndamage is the union of old pending damage and the given rectangle.\n\nwl_surface.commit assigns pending damage as the current damage,\nand clears pending damage. The server will clear the current\ndamage as it repaints the surface.\n\nThis request differs from wl_surface.damage in only one way - it\ntakes damage in buffer coordinates instead of surface-local\ncoordinates. While this generally is more intuitive than surface\ncoordinates, it is especially desirable when using wp_viewport\nor when a drawing library (like EGL) is unaware of buffer scale\nand buffer transform.\n\nNote: Because buffer transformation changes and damage requests may\nbe interleaved in the protocol stream, it is impossible to determine\nthe actual mapping between surface and buffer damage until\nwl_surface.commit time. Therefore, compositors wishing to take both\nkinds of damage into account will have to accumulate damage from the\ntwo requests separately and only transform from one to the other\nafter receiving the wl_surface.commit.",
            "summary": "mark part of the surface damaged using buffer coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "buffer-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "buffer-local y coordinate"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "width of damage rectangle"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "height of damage rectangle"
            }
          ]
        },
        {
          "type": "request",
          "name": "offset",
          "since": "5",
          "description": {
            "type": "description",
            "text": "The x and y arguments specify the location of the new pending\nbuffer's upper left corner, relative to the current buffer's upper\nleft corner, in surface-local coordinates. In other words, the\nx and y, combined with the new surface size define in which\ndirections the surface's size changes.\n\nSurface location offset is double-buffered state, see\nwl_surface.commit.\n\nThis request is semantically equivalent to and the replaces the x and y\narguments in the wl_surface.attach request in wl_surface versions prior\nto 5. See wl_surface.attach for details.",
            "summary": "set the surface contents offset"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "surface-local y coordinate"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "enter",
          "description": {
            "type": "description",
            "text": "This is emitted whenever a surface's creation, movement, or resizing\nresults in some part of it being within the scanout region of an\noutput.\n\nNote that a surface may be overlapping with zero or more outputs.",
            "summary": "surface enters an output"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "summary": "output entered by the surface",
              "interface": "wl_output"
            }
          ]
        },
        {
          "type": "event",
          "name": "leave",
          "description": {
            "type": "description",
            "text": "This is emitted whenever a surface's creation, movement, or resizing\nresults in it no longer having any part of it within the scanout region\nof an output.\n\nClients should not use the number of outputs the surface is on for frame\nthrottling purposes. The surface might be hidden even if no leave event\nhas been sent, and the compositor might expect new surface content\nupdates even if no enter event has been sent. The frame event should be\nused instead.",
            "summary": "surface leaves an output"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "summary": "output left by the surface",
              "interface": "wl_output"
            }
          ]
        },
        {
          "type": "event",
          "name": "preferred_buffer_scale",
          "since": "6",
          "description": {
            "type": "description",
            "text": "This event indicates the preferred buffer scale for this surface. It is\nsent whenever the compositor's preference changes.\n\nBefore receiving this event the preferred buffer scale for this surface\nis 1.\n\nIt is intended that scaling aware clients use this event to scale their\ncontent and use wl_surface.set_buffer_scale to indicate the scale they\nhave rendered with. This allows clients to supply a higher detail\nbuffer.\n\nThe compositor shall emit a scale value greater than 0.",
            "summary": "preferred buffer scale for the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "factor",
              "argType": "int",
              "summary": "preferred scaling factor"
            }
          ]
        },
        {
          "type": "event",
          "name": "preferred_buffer_transform",
          "since": "6",
          "description": {
            "type": "description",
            "text": "This event indicates the preferred buffer transform for this surface.\nIt is sent whenever the compositor's preference changes.\n\nBefore receiving this event the preferred buffer transform for this\nsurface is normal.\n\nApplying this transformation to the surface buffer contents and using\nwl_surface.set_buffer_transform might allow the compositor to use the\nsurface buffer more efficiently.",
            "summary": "preferred buffer transform for the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "transform",
              "argType": "uint",
              "summary": "preferred transform",
              "enum": "wl_output.transform"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These errors can be emitted in response to wl_surface requests.",
            "summary": "wl_surface error values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "invalid_scale",
              "value": "0",
              "summary": "buffer scale value is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_transform",
              "value": "1",
              "summary": "buffer transform value is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_size",
              "value": "2",
              "summary": "buffer size is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_offset",
              "value": "3",
              "summary": "buffer offset is invalid"
            },
            {
              "type": "entry",
              "name": "defunct_role_object",
              "value": "4",
              "summary": "surface was destroyed before its role object"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_seat",
      "version": "9",
      "description": {
        "type": "description",
        "text": "A seat is a group of keyboards, pointer and touch devices. This\nobject is published as a global during start up, or when such a\ndevice is hot plugged.  A seat typically has a pointer and\nmaintains a keyboard focus and a pointer focus.",
        "summary": "group of input devices"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_pointer",
          "description": {
            "type": "description",
            "text": "The ID provided will be initialized to the wl_pointer interface\nfor this seat.\n\nThis request only takes effect if the seat has the pointer\ncapability, or has had the pointer capability in the past.\nIt is a protocol violation to issue this request on a seat that has\nnever had the pointer capability. The missing_capability error will\nbe sent in this case.",
            "summary": "return pointer object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "seat pointer",
              "interface": "wl_pointer"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_keyboard",
          "description": {
            "type": "description",
            "text": "The ID provided will be initialized to the wl_keyboard interface\nfor this seat.\n\nThis request only takes effect if the seat has the keyboard\ncapability, or has had the keyboard capability in the past.\nIt is a protocol violation to issue this request on a seat that has\nnever had the keyboard capability. The missing_capability error will\nbe sent in this case.",
            "summary": "return keyboard object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "seat keyboard",
              "interface": "wl_keyboard"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_touch",
          "description": {
            "type": "description",
            "text": "The ID provided will be initialized to the wl_touch interface\nfor this seat.\n\nThis request only takes effect if the seat has the touch\ncapability, or has had the touch capability in the past.\nIt is a protocol violation to issue this request on a seat that has\nnever had the touch capability. The missing_capability error will\nbe sent in this case.",
            "summary": "return touch object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "seat touch interface",
              "interface": "wl_touch"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "since": "5",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the server that it is not going to\nuse the seat object anymore.",
            "summary": "release the seat object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "capabilities",
          "description": {
            "type": "description",
            "text": "This is emitted whenever a seat gains or loses the pointer,\nkeyboard or touch capabilities.  The argument is a capability\nenum containing the complete set of capabilities this seat has.\n\nWhen the pointer capability is added, a client may create a\nwl_pointer object using the wl_seat.get_pointer request. This object\nwill receive pointer events until the capability is removed in the\nfuture.\n\nWhen the pointer capability is removed, a client should destroy the\nwl_pointer objects associated with the seat where the capability was\nremoved, using the wl_pointer.release request. No further pointer\nevents will be received on these objects.\n\nIn some compositors, if a seat regains the pointer capability and a\nclient has a previously obtained wl_pointer object of version 4 or\nless, that object may start sending pointer events again. This\nbehavior is considered a misinterpretation of the intended behavior\nand must not be relied upon by the client. wl_pointer objects of\nversion 5 or later must not send events if created before the most\nrecent event notifying the client of an added pointer capability.\n\nThe above behavior also applies to wl_keyboard and wl_touch with the\nkeyboard and touch capabilities, respectively.",
            "summary": "seat capabilities changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "capabilities",
              "argType": "uint",
              "summary": "capabilities of the seat",
              "enum": "capability"
            }
          ]
        },
        {
          "type": "event",
          "name": "name",
          "since": "2",
          "description": {
            "type": "description",
            "text": "In a multi-seat configuration the seat name can be used by clients to\nhelp identify which physical devices the seat represents.\n\nThe seat name is a UTF-8 string with no convention defined for its\ncontents. Each name is unique among all wl_seat globals. The name is\nonly guaranteed to be unique for the current compositor instance.\n\nThe same seat names are used for all clients. Thus, the name can be\nshared across processes to refer to a specific wl_seat global.\n\nThe name event is sent after binding to the seat global. This event is\nonly sent once per seat object, and the name does not change over the\nlifetime of the wl_seat global.\n\nCompositors may re-use the same seat name if the wl_seat global is\ndestroyed and re-created later.",
            "summary": "unique identifier for this seat"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string",
              "summary": "seat identifier"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "capability",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "This is a bitmask of capabilities this seat has; if a member is\nset, then it is present on the seat.",
            "summary": "seat capability bitmask"
          },
          "entries": [
            {
              "type": "entry",
              "name": "pointer",
              "value": "1",
              "summary": "the seat has pointer devices"
            },
            {
              "type": "entry",
              "name": "keyboard",
              "value": "2",
              "summary": "the seat has one or more keyboards"
            },
            {
              "type": "entry",
              "name": "touch",
              "value": "4",
              "summary": "the seat has touch devices"
            }
          ]
        },
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These errors can be emitted in response to wl_seat requests.",
            "summary": "wl_seat error values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "missing_capability",
              "value": "0",
              "summary": "get_pointer, get_keyboard or get_touch called on seat without the matching capability"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_pointer",
      "version": "9",
      "description": {
        "type": "description",
        "text": "The wl_pointer interface represents one or more input devices,\nsuch as mice, which control the pointer location and pointer_focus\nof a seat.\n\nThe wl_pointer interface generates motion, enter and leave\nevents for the surfaces that the pointer is located over,\nand button and axis events for button presses, button releases\nand scrolling.",
        "summary": "pointer input device"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_cursor",
          "description": {
            "type": "description",
            "text": "Set the pointer surface, i.e., the surface that contains the\npointer image (cursor). This request gives the surface the role\nof a cursor. If the surface already has another role, it raises\na protocol error.\n\nThe cursor actually changes only if the pointer\nfocus for this device is one of the requesting client's surfaces\nor the surface parameter is the current pointer surface. If\nthere was a previous surface set with this request it is\nreplaced. If surface is NULL, the pointer image is hidden.\n\nThe parameters hotspot_x and hotspot_y define the position of\nthe pointer surface relative to the pointer location. Its\ntop-left corner is always at (x, y) - (hotspot_x, hotspot_y),\nwhere (x, y) are the coordinates of the pointer location, in\nsurface-local coordinates.\n\nOn wl_surface.offset requests to the pointer surface, hotspot_x\nand hotspot_y are decremented by the x and y parameters\npassed to the request. The offset must be applied by\nwl_surface.commit as usual.\n\nThe hotspot can also be updated by passing the currently set\npointer surface to this request with new values for hotspot_x\nand hotspot_y.\n\nThe input region is ignored for wl_surfaces with the role of\na cursor. When the use as a cursor ends, the wl_surface is\nunmapped.\n\nThe serial parameter must match the latest wl_pointer.enter\nserial number sent to the client. Otherwise the request will be\nignored.",
            "summary": "set the pointer surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the enter event"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "pointer surface",
              "interface": "wl_surface",
              "allowNull": "true"
            },
            {
              "type": "arg",
              "name": "hotspot_x",
              "argType": "int",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "hotspot_y",
              "argType": "int",
              "summary": "surface-local y coordinate"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the server that it is not going to\nuse the pointer object anymore.\n\nThis request destroys the pointer proxy object, so clients must not call\nwl_pointer_destroy() after using this request.",
            "summary": "release the pointer object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "enter",
          "description": {
            "type": "description",
            "text": "Notification that this seat's pointer is focused on a certain\nsurface.\n\nWhen a seat's focus enters a surface, the pointer image\nis undefined and a client should respond to this event by setting\nan appropriate pointer image with the set_cursor request.",
            "summary": "enter event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the enter event"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "surface entered by the pointer",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "surface_x",
              "argType": "fixed",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "surface_y",
              "argType": "fixed",
              "summary": "surface-local y coordinate"
            }
          ]
        },
        {
          "type": "event",
          "name": "leave",
          "description": {
            "type": "description",
            "text": "Notification that this seat's pointer is no longer focused on\na certain surface.\n\nThe leave notification is sent before the enter notification\nfor the new focus.",
            "summary": "leave event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the leave event"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "surface left by the pointer",
              "interface": "wl_surface"
            }
          ]
        },
        {
          "type": "event",
          "name": "motion",
          "description": {
            "type": "description",
            "text": "Notification of pointer location change. The arguments\nsurface_x and surface_y are the location relative to the\nfocused surface.",
            "summary": "pointer motion event"
          },
          "args": [
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "surface_x",
              "argType": "fixed",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "surface_y",
              "argType": "fixed",
              "summary": "surface-local y coordinate"
            }
          ]
        },
        {
          "type": "event",
          "name": "button",
          "description": {
            "type": "description",
            "text": "Mouse button click and release notifications.\n\nThe location of the click is given by the last motion or\nenter event.\nThe time argument is a timestamp with millisecond\ngranularity, with an undefined base.\n\nThe button is a button code as defined in the Linux kernel's\nlinux/input-event-codes.h header file, e.g. BTN_LEFT.\n\nAny 16-bit button code value is reserved for future additions to the\nkernel's event code list. All other button codes above 0xFFFF are\ncurrently undefined but may be used in future versions of this\nprotocol.",
            "summary": "pointer button event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the button event"
            },
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "button",
              "argType": "uint",
              "summary": "button that produced the event"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "physical state of the button",
              "enum": "button_state"
            }
          ]
        },
        {
          "type": "event",
          "name": "axis",
          "description": {
            "type": "description",
            "text": "Scroll and other axis notifications.\n\nFor scroll events (vertical and horizontal scroll axes), the\nvalue parameter is the length of a vector along the specified\naxis in a coordinate space identical to those of motion events,\nrepresenting a relative movement along the specified axis.\n\nFor devices that support movements non-parallel to axes multiple\naxis events will be emitted.\n\nWhen applicable, for example for touch pads, the server can\nchoose to emit scroll events where the motion vector is\nequivalent to a motion event vector.\n\nWhen applicable, a client can transform its content relative to the\nscroll distance.",
            "summary": "axis event"
          },
          "args": [
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "axis",
              "argType": "uint",
              "summary": "axis type",
              "enum": "axis"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "fixed",
              "summary": "length of vector in surface-local coordinate space"
            }
          ]
        },
        {
          "type": "event",
          "name": "frame",
          "since": "5",
          "description": {
            "type": "description",
            "text": "Indicates the end of a set of events that logically belong together.\nA client is expected to accumulate the data in all events within the\nframe before proceeding.\n\nAll wl_pointer events before a wl_pointer.frame event belong\nlogically together. For example, in a diagonal scroll motion the\ncompositor will send an optional wl_pointer.axis_source event, two\nwl_pointer.axis events (horizontal and vertical) and finally a\nwl_pointer.frame event. The client may use this information to\ncalculate a diagonal vector for scrolling.\n\nWhen multiple wl_pointer.axis events occur within the same frame,\nthe motion vector is the combined motion of all events.\nWhen a wl_pointer.axis and a wl_pointer.axis_stop event occur within\nthe same frame, this indicates that axis movement in one axis has\nstopped but continues in the other axis.\nWhen multiple wl_pointer.axis_stop events occur within the same\nframe, this indicates that these axes stopped in the same instance.\n\nA wl_pointer.frame event is sent for every logical event group,\neven if the group only contains a single wl_pointer event.\nSpecifically, a client may get a sequence: motion, frame, button,\nframe, axis, frame, axis_stop, frame.\n\nThe wl_pointer.enter and wl_pointer.leave events are logical events\ngenerated by the compositor and not the hardware. These events are\nalso grouped by a wl_pointer.frame. When a pointer moves from one\nsurface to another, a compositor should group the\nwl_pointer.leave event within the same wl_pointer.frame.\nHowever, a client must not rely on wl_pointer.leave and\nwl_pointer.enter being in the same wl_pointer.frame.\nCompositor-specific policies may require the wl_pointer.leave and\nwl_pointer.enter event being split across multiple wl_pointer.frame\ngroups.",
            "summary": "end of a pointer event sequence"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "axis_source",
          "since": "5",
          "description": {
            "type": "description",
            "text": "Source information for scroll and other axes.\n\nThis event does not occur on its own. It is sent before a\nwl_pointer.frame event and carries the source information for\nall events within that frame.\n\nThe source specifies how this event was generated. If the source is\nwl_pointer.axis_source.finger, a wl_pointer.axis_stop event will be\nsent when the user lifts the finger off the device.\n\nIf the source is wl_pointer.axis_source.wheel,\nwl_pointer.axis_source.wheel_tilt or\nwl_pointer.axis_source.continuous, a wl_pointer.axis_stop event may\nor may not be sent. Whether a compositor sends an axis_stop event\nfor these sources is hardware-specific and implementation-dependent;\nclients must not rely on receiving an axis_stop event for these\nscroll sources and should treat scroll sequences from these scroll\nsources as unterminated by default.\n\nThis event is optional. If the source is unknown for a particular\naxis event sequence, no event is sent.\nOnly one wl_pointer.axis_source event is permitted per frame.\n\nThe order of wl_pointer.axis_discrete and wl_pointer.axis_source is\nnot guaranteed.",
            "summary": "axis source event"
          },
          "args": [
            {
              "type": "arg",
              "name": "axis_source",
              "argType": "uint",
              "summary": "source of the axis event",
              "enum": "axis_source"
            }
          ]
        },
        {
          "type": "event",
          "name": "axis_stop",
          "since": "5",
          "description": {
            "type": "description",
            "text": "Stop notification for scroll and other axes.\n\nFor some wl_pointer.axis_source types, a wl_pointer.axis_stop event\nis sent to notify a client that the axis sequence has terminated.\nThis enables the client to implement kinetic scrolling.\nSee the wl_pointer.axis_source documentation for information on when\nthis event may be generated.\n\nAny wl_pointer.axis events with the same axis_source after this\nevent should be considered as the start of a new axis motion.\n\nThe timestamp is to be interpreted identical to the timestamp in the\nwl_pointer.axis event. The timestamp value may be the same as a\npreceding wl_pointer.axis event.",
            "summary": "axis stop event"
          },
          "args": [
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "axis",
              "argType": "uint",
              "summary": "the axis stopped with this event",
              "enum": "axis"
            }
          ]
        },
        {
          "type": "event",
          "name": "axis_discrete",
          "since": "5",
          "deprecatedSince": "8",
          "description": {
            "type": "description",
            "text": "Discrete step information for scroll and other axes.\n\nThis event carries the axis value of the wl_pointer.axis event in\ndiscrete steps (e.g. mouse wheel clicks).\n\nThis event is deprecated with wl_pointer version 8 - this event is not\nsent to clients supporting version 8 or later.\n\nThis event does not occur on its own, it is coupled with a\nwl_pointer.axis event that represents this axis value on a\ncontinuous scale. The protocol guarantees that each axis_discrete\nevent is always followed by exactly one axis event with the same\naxis number within the same wl_pointer.frame. Note that the protocol\nallows for other events to occur between the axis_discrete and\nits coupled axis event, including other axis_discrete or axis\nevents. A wl_pointer.frame must not contain more than one axis_discrete\nevent per axis type.\n\nThis event is optional; continuous scrolling devices\nlike two-finger scrolling on touchpads do not have discrete\nsteps and do not generate this event.\n\nThe discrete value carries the directional information. e.g. a value\nof -2 is two steps towards the negative direction of this axis.\n\nThe axis number is identical to the axis number in the associated\naxis event.\n\nThe order of wl_pointer.axis_discrete and wl_pointer.axis_source is\nnot guaranteed.",
            "summary": "axis click event"
          },
          "args": [
            {
              "type": "arg",
              "name": "axis",
              "argType": "uint",
              "summary": "axis type",
              "enum": "axis"
            },
            {
              "type": "arg",
              "name": "discrete",
              "argType": "int",
              "summary": "number of steps"
            }
          ]
        },
        {
          "type": "event",
          "name": "axis_value120",
          "since": "8",
          "description": {
            "type": "description",
            "text": "Discrete high-resolution scroll information.\n\nThis event carries high-resolution wheel scroll information,\nwith each multiple of 120 representing one logical scroll step\n(a wheel detent). For example, an axis_value120 of 30 is one quarter of\na logical scroll step in the positive direction, a value120 of\n-240 are two logical scroll steps in the negative direction within the\nsame hardware event.\nClients that rely on discrete scrolling should accumulate the\nvalue120 to multiples of 120 before processing the event.\n\nThe value120 must not be zero.\n\nThis event replaces the wl_pointer.axis_discrete event in clients\nsupporting wl_pointer version 8 or later.\n\nWhere a wl_pointer.axis_source event occurs in the same\nwl_pointer.frame, the axis source applies to this event.\n\nThe order of wl_pointer.axis_value120 and wl_pointer.axis_source is\nnot guaranteed.",
            "summary": "axis high-resolution scroll event"
          },
          "args": [
            {
              "type": "arg",
              "name": "axis",
              "argType": "uint",
              "summary": "axis type",
              "enum": "axis"
            },
            {
              "type": "arg",
              "name": "value120",
              "argType": "int",
              "summary": "scroll distance as fraction of 120"
            }
          ]
        },
        {
          "type": "event",
          "name": "axis_relative_direction",
          "since": "9",
          "description": {
            "type": "description",
            "text": "Relative directional information of the entity causing the axis\nmotion.\n\nFor a wl_pointer.axis event, the wl_pointer.axis_relative_direction\nevent specifies the movement direction of the entity causing the\nwl_pointer.axis event. For example:\n- if a user's fingers on a touchpad move down and this\ncauses a wl_pointer.axis vertical_scroll down event, the physical\ndirection is 'identical'\n- if a user's fingers on a touchpad move down and this causes a\nwl_pointer.axis vertical_scroll up scroll up event ('natural\nscrolling'), the physical direction is 'inverted'.\n\nA client may use this information to adjust scroll motion of\ncomponents. Specifically, enabling natural scrolling causes the\ncontent to change direction compared to traditional scrolling.\nSome widgets like volume control sliders should usually match the\nphysical direction regardless of whether natural scrolling is\nactive. This event enables clients to match the scroll direction of\na widget to the physical direction.\n\nThis event does not occur on its own, it is coupled with a\nwl_pointer.axis event that represents this axis value.\nThe protocol guarantees that each axis_relative_direction event is\nalways followed by exactly one axis event with the same\naxis number within the same wl_pointer.frame. Note that the protocol\nallows for other events to occur between the axis_relative_direction\nand its coupled axis event.\n\nThe axis number is identical to the axis number in the associated\naxis event.\n\nThe order of wl_pointer.axis_relative_direction,\nwl_pointer.axis_discrete and wl_pointer.axis_source is not\nguaranteed.",
            "summary": "axis relative physical direction event"
          },
          "args": [
            {
              "type": "arg",
              "name": "axis",
              "argType": "uint",
              "summary": "axis type",
              "enum": "axis"
            },
            {
              "type": "arg",
              "name": "direction",
              "argType": "uint",
              "summary": "physical direction relative to axis motion",
              "enum": "axis_relative_direction"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "role",
              "value": "0",
              "summary": "given wl_surface has another role"
            }
          ]
        },
        {
          "type": "enum",
          "name": "button_state",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Describes the physical state of a button that produced the button\nevent.",
            "summary": "physical button state"
          },
          "entries": [
            {
              "type": "entry",
              "name": "released",
              "value": "0",
              "summary": "the button is not pressed"
            },
            {
              "type": "entry",
              "name": "pressed",
              "value": "1",
              "summary": "the button is pressed"
            }
          ]
        },
        {
          "type": "enum",
          "name": "axis",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Describes the axis types of scroll events.",
            "summary": "axis types"
          },
          "entries": [
            {
              "type": "entry",
              "name": "vertical_scroll",
              "value": "0",
              "summary": "vertical axis"
            },
            {
              "type": "entry",
              "name": "horizontal_scroll",
              "value": "1",
              "summary": "horizontal axis"
            }
          ]
        },
        {
          "type": "enum",
          "name": "axis_source",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Describes the source types for axis events. This indicates to the\nclient how an axis event was physically generated; a client may\nadjust the user interface accordingly. For example, scroll events\nfrom a \"finger\" source may be in a smooth coordinate space with\nkinetic scrolling whereas a \"wheel\" source may be in discrete steps\nof a number of lines.\n\nThe \"continuous\" axis source is a device generating events in a\ncontinuous coordinate space, but using something other than a\nfinger. One example for this source is button-based scrolling where\nthe vertical motion of a device is converted to scroll events while\na button is held down.\n\nThe \"wheel tilt\" axis source indicates that the actual device is a\nwheel but the scroll event is not caused by a rotation but a\n(usually sideways) tilt of the wheel.",
            "summary": "axis source types"
          },
          "entries": [
            {
              "type": "entry",
              "name": "wheel",
              "value": "0",
              "summary": "a physical wheel rotation"
            },
            {
              "type": "entry",
              "name": "finger",
              "value": "1",
              "summary": "finger on a touch surface"
            },
            {
              "type": "entry",
              "name": "continuous",
              "value": "2",
              "summary": "continuous coordinate space"
            },
            {
              "type": "entry",
              "name": "wheel_tilt",
              "value": "3",
              "summary": "a physical wheel tilt",
              "since": "6"
            }
          ]
        },
        {
          "type": "enum",
          "name": "axis_relative_direction",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This specifies the direction of the physical motion that caused a\nwl_pointer.axis event, relative to the wl_pointer.axis direction.",
            "summary": "axis relative direction"
          },
          "entries": [
            {
              "type": "entry",
              "name": "identical",
              "value": "0",
              "summary": "physical motion matches axis direction"
            },
            {
              "type": "entry",
              "name": "inverted",
              "value": "1",
              "summary": "physical motion is the inverse of the axis direction"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_keyboard",
      "version": "9",
      "description": {
        "type": "description",
        "text": "The wl_keyboard interface represents one or more keyboards\nassociated with a seat.\n\nEach wl_keyboard has the following logical state:\n\n- an active surface (possibly null),\n- the keys currently logically down,\n- the active modifiers,\n- the active group.\n\nBy default, the active surface is null, the keys currently logically down\nare empty, the active modifiers and the active group are 0.",
        "summary": "keyboard input device"
      },
      "requests": [
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "since": "3",
          "description": {
            "type": "description",
            "summary": "release the keyboard object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "keymap",
          "description": {
            "type": "description",
            "text": "This event provides a file descriptor to the client which can be\nmemory-mapped in read-only mode to provide a keyboard mapping\ndescription.\n\nFrom version 7 onwards, the fd must be mapped with MAP_PRIVATE by\nthe recipient, as MAP_SHARED may fail.",
            "summary": "keyboard mapping"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "keymap format",
              "enum": "keymap_format"
            },
            {
              "type": "arg",
              "name": "fd",
              "argType": "fd",
              "summary": "keymap file descriptor"
            },
            {
              "type": "arg",
              "name": "size",
              "argType": "uint",
              "summary": "keymap size, in bytes"
            }
          ]
        },
        {
          "type": "event",
          "name": "enter",
          "description": {
            "type": "description",
            "text": "Notification that this seat's keyboard focus is on a certain\nsurface.\n\nThe compositor must send the wl_keyboard.modifiers event after this\nevent.\n\nIn the wl_keyboard logical state, this event sets the active surface to\nthe surface argument and the keys currently logically down to the keys\nin the keys argument. The compositor must not send this event if the\nwl_keyboard already had an active surface immediately before this event.",
            "summary": "enter event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the enter event"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "surface gaining keyboard focus",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "keys",
              "argType": "array",
              "summary": "the keys currently logically down"
            }
          ]
        },
        {
          "type": "event",
          "name": "leave",
          "description": {
            "type": "description",
            "text": "Notification that this seat's keyboard focus is no longer on\na certain surface.\n\nThe leave notification is sent before the enter notification\nfor the new focus.\n\nIn the wl_keyboard logical state, this event resets all values to their\ndefaults. The compositor must not send this event if the active surface\nof the wl_keyboard was not equal to the surface argument immediately\nbefore this event.",
            "summary": "leave event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the leave event"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "surface that lost keyboard focus",
              "interface": "wl_surface"
            }
          ]
        },
        {
          "type": "event",
          "name": "key",
          "description": {
            "type": "description",
            "text": "A key was pressed or released.\nThe time argument is a timestamp with millisecond\ngranularity, with an undefined base.\n\nThe key is a platform-specific key code that can be interpreted\nby feeding it to the keyboard mapping (see the keymap event).\n\nIf this event produces a change in modifiers, then the resulting\nwl_keyboard.modifiers event must be sent after this event.\n\nIn the wl_keyboard logical state, this event adds the key to the keys\ncurrently logically down (if the state argument is pressed) or removes\nthe key from the keys currently logically down (if the state argument is\nreleased). The compositor must not send this event if the wl_keyboard\ndid not have an active surface immediately before this event. The\ncompositor must not send this event if state is pressed (resp. released)\nand the key was already logically down (resp. was not logically down)\nimmediately before this event.",
            "summary": "key event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the key event"
            },
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint",
              "summary": "key that produced the event"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "physical state of the key",
              "enum": "key_state"
            }
          ]
        },
        {
          "type": "event",
          "name": "modifiers",
          "description": {
            "type": "description",
            "text": "Notifies clients that the modifier and/or group state has\nchanged, and it should update its local state.\n\nThe compositor may send this event without a surface of the client\nhaving keyboard focus, for example to tie modifier information to\npointer focus instead. If a modifier event with pressed modifiers is sent\nwithout a prior enter event, the client can assume the modifier state is\nvalid until it receives the next wl_keyboard.modifiers event. In order to\nreset the modifier state again, the compositor can send a\nwl_keyboard.modifiers event with no pressed modifiers.\n\nIn the wl_keyboard logical state, this event updates the modifiers and\ngroup.",
            "summary": "modifier and group state"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the modifiers event"
            },
            {
              "type": "arg",
              "name": "mods_depressed",
              "argType": "uint",
              "summary": "depressed modifiers"
            },
            {
              "type": "arg",
              "name": "mods_latched",
              "argType": "uint",
              "summary": "latched modifiers"
            },
            {
              "type": "arg",
              "name": "mods_locked",
              "argType": "uint",
              "summary": "locked modifiers"
            },
            {
              "type": "arg",
              "name": "group",
              "argType": "uint",
              "summary": "keyboard layout"
            }
          ]
        },
        {
          "type": "event",
          "name": "repeat_info",
          "since": "4",
          "description": {
            "type": "description",
            "text": "Informs the client about the keyboard's repeat rate and delay.\n\nThis event is sent as soon as the wl_keyboard object has been created,\nand is guaranteed to be received by the client before any key press\nevent.\n\nNegative values for either rate or delay are illegal. A rate of zero\nwill disable any repeating (regardless of the value of delay).\n\nThis event can be sent later on as well with a new value if necessary,\nso clients should continue listening for the event past the creation\nof wl_keyboard.",
            "summary": "repeat rate and delay"
          },
          "args": [
            {
              "type": "arg",
              "name": "rate",
              "argType": "int",
              "summary": "the rate of repeating keys in characters per second"
            },
            {
              "type": "arg",
              "name": "delay",
              "argType": "int",
              "summary": "delay in milliseconds since key down until repeating starts"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "keymap_format",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This specifies the format of the keymap provided to the\nclient with the wl_keyboard.keymap event.",
            "summary": "keyboard mapping format"
          },
          "entries": [
            {
              "type": "entry",
              "name": "no_keymap",
              "value": "0",
              "summary": "no keymap; client must understand how to interpret the raw keycode"
            },
            {
              "type": "entry",
              "name": "xkb_v1",
              "value": "1",
              "summary": "libxkbcommon compatible, null-terminated string; to determine the xkb keycode, clients must add 8 to the key event keycode"
            }
          ]
        },
        {
          "type": "enum",
          "name": "key_state",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Describes the physical state of a key that produced the key event.",
            "summary": "physical key state"
          },
          "entries": [
            {
              "type": "entry",
              "name": "released",
              "value": "0",
              "summary": "key is not pressed"
            },
            {
              "type": "entry",
              "name": "pressed",
              "value": "1",
              "summary": "key is pressed"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_touch",
      "version": "9",
      "description": {
        "type": "description",
        "text": "The wl_touch interface represents a touchscreen\nassociated with a seat.\n\nTouch interactions can consist of one or more contacts.\nFor each contact, a series of events is generated, starting\nwith a down event, followed by zero or more motion events,\nand ending with an up event. Events relating to the same\ncontact point can be identified by the ID of the sequence.",
        "summary": "touchscreen input device"
      },
      "requests": [
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "since": "3",
          "description": {
            "type": "description",
            "summary": "release the touch object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "down",
          "description": {
            "type": "description",
            "text": "A new touch point has appeared on the surface. This touch point is\nassigned a unique ID. Future events from this touch point reference\nthis ID. The ID ceases to be valid after a touch up event and may be\nreused in the future.",
            "summary": "touch down event and beginning of a touch sequence"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the touch down event"
            },
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "surface touched",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the unique ID of this touch point"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed",
              "summary": "surface-local y coordinate"
            }
          ]
        },
        {
          "type": "event",
          "name": "up",
          "description": {
            "type": "description",
            "text": "The touch point has disappeared. No further events will be sent for\nthis touch point and the touch point's ID is released and may be\nreused in a future touch down event.",
            "summary": "end of a touch event sequence"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number of the touch up event"
            },
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the unique ID of this touch point"
            }
          ]
        },
        {
          "type": "event",
          "name": "motion",
          "description": {
            "type": "description",
            "text": "A touch point has changed coordinates.",
            "summary": "update of touch point coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the unique ID of this touch point"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed",
              "summary": "surface-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed",
              "summary": "surface-local y coordinate"
            }
          ]
        },
        {
          "type": "event",
          "name": "frame",
          "description": {
            "type": "description",
            "text": "Indicates the end of a set of events that logically belong together.\nA client is expected to accumulate the data in all events within the\nframe before proceeding.\n\nA wl_touch.frame terminates at least one event but otherwise no\nguarantee is provided about the set of events within a frame. A client\nmust assume that any state not updated in a frame is unchanged from the\npreviously known state.",
            "summary": "end of touch frame event"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "cancel",
          "description": {
            "type": "description",
            "text": "Sent if the compositor decides the touch stream is a global\ngesture. No further events are sent to the clients from that\nparticular gesture. Touch cancellation applies to all touch points\ncurrently active on this client's surface. The client is\nresponsible for finalizing the touch points, future touch points on\nthis surface may reuse the touch point ID.\n\nNo frame event is required after the cancel event.",
            "summary": "touch session cancelled"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "shape",
          "since": "6",
          "description": {
            "type": "description",
            "text": "Sent when a touchpoint has changed its shape.\n\nThis event does not occur on its own. It is sent before a\nwl_touch.frame event and carries the new shape information for\nany previously reported, or new touch points of that frame.\n\nOther events describing the touch point such as wl_touch.down,\nwl_touch.motion or wl_touch.orientation may be sent within the\nsame wl_touch.frame. A client should treat these events as a single\nlogical touch point update. The order of wl_touch.shape,\nwl_touch.orientation and wl_touch.motion is not guaranteed.\nA wl_touch.down event is guaranteed to occur before the first\nwl_touch.shape event for this touch ID but both events may occur within\nthe same wl_touch.frame.\n\nA touchpoint shape is approximated by an ellipse through the major and\nminor axis length. The major axis length describes the longer diameter\nof the ellipse, while the minor axis length describes the shorter\ndiameter. Major and minor are orthogonal and both are specified in\nsurface-local coordinates. The center of the ellipse is always at the\ntouchpoint location as reported by wl_touch.down or wl_touch.move.\n\nThis event is only sent by the compositor if the touch device supports\nshape reports. The client has to make reasonable assumptions about the\nshape if it did not receive this event.",
            "summary": "update shape of touch point"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the unique ID of this touch point"
            },
            {
              "type": "arg",
              "name": "major",
              "argType": "fixed",
              "summary": "length of the major axis in surface-local coordinates"
            },
            {
              "type": "arg",
              "name": "minor",
              "argType": "fixed",
              "summary": "length of the minor axis in surface-local coordinates"
            }
          ]
        },
        {
          "type": "event",
          "name": "orientation",
          "since": "6",
          "description": {
            "type": "description",
            "text": "Sent when a touchpoint has changed its orientation.\n\nThis event does not occur on its own. It is sent before a\nwl_touch.frame event and carries the new shape information for\nany previously reported, or new touch points of that frame.\n\nOther events describing the touch point such as wl_touch.down,\nwl_touch.motion or wl_touch.shape may be sent within the\nsame wl_touch.frame. A client should treat these events as a single\nlogical touch point update. The order of wl_touch.shape,\nwl_touch.orientation and wl_touch.motion is not guaranteed.\nA wl_touch.down event is guaranteed to occur before the first\nwl_touch.orientation event for this touch ID but both events may occur\nwithin the same wl_touch.frame.\n\nThe orientation describes the clockwise angle of a touchpoint's major\naxis to the positive surface y-axis and is normalized to the -180 to\n+180 degree range. The granularity of orientation depends on the touch\ndevice, some devices only support binary rotation values between 0 and\n90 degrees.\n\nThis event is only sent by the compositor if the touch device supports\norientation reports.",
            "summary": "update orientation of touch point"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the unique ID of this touch point"
            },
            {
              "type": "arg",
              "name": "orientation",
              "argType": "fixed",
              "summary": "angle between major axis and positive surface y-axis in degrees"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wl_output",
      "version": "4",
      "description": {
        "type": "description",
        "text": "An output describes part of the compositor geometry.  The\ncompositor works in the 'compositor coordinate system' and an\noutput corresponds to a rectangular area in that space that is\nactually visible.  This typically corresponds to a monitor that\ndisplays part of the compositor space.  This object is published\nas global during start up, or when a monitor is hotplugged.",
        "summary": "compositor output region"
      },
      "requests": [
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the server that it is not going to\nuse the output object anymore.",
            "summary": "release the output object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "geometry",
          "description": {
            "type": "description",
            "text": "The geometry event describes geometric properties of the output.\nThe event is sent when binding to the output object and whenever\nany of the properties change.\n\nThe physical size can be set to zero if it doesn't make sense for this\noutput (e.g. for projectors or virtual outputs).\n\nThe geometry event will be followed by a done event (starting from\nversion 2).\n\nClients should use wl_surface.preferred_buffer_transform instead of the\ntransform advertised by this event to find the preferred buffer\ntransform to use for a surface.\n\nNote: wl_output only advertises partial information about the output\nposition and identification. Some compositors, for instance those not\nimplementing a desktop-style output layout or those exposing virtual\noutputs, might fake this information. Instead of using x and y, clients\nshould use xdg_output.logical_position. Instead of using make and model,\nclients should use name and description.",
            "summary": "properties of the output"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position within the global compositor space"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position within the global compositor space"
            },
            {
              "type": "arg",
              "name": "physical_width",
              "argType": "int",
              "summary": "width in millimeters of the output"
            },
            {
              "type": "arg",
              "name": "physical_height",
              "argType": "int",
              "summary": "height in millimeters of the output"
            },
            {
              "type": "arg",
              "name": "subpixel",
              "argType": "int",
              "summary": "subpixel orientation of the output",
              "enum": "subpixel"
            },
            {
              "type": "arg",
              "name": "make",
              "argType": "string",
              "summary": "textual description of the manufacturer"
            },
            {
              "type": "arg",
              "name": "model",
              "argType": "string",
              "summary": "textual description of the model"
            },
            {
              "type": "arg",
              "name": "transform",
              "argType": "int",
              "summary": "additional transformation applied to buffer contents during presentation",
              "enum": "transform"
            }
          ]
        },
        {
          "type": "event",
          "name": "mode",
          "description": {
            "type": "description",
            "text": "The mode event describes an available mode for the output.\n\nThe event is sent when binding to the output object and there\nwill always be one mode, the current mode.  The event is sent\nagain if an output changes mode, for the mode that is now\ncurrent.  In other words, the current mode is always the last\nmode that was received with the current flag set.\n\nNon-current modes are deprecated. A compositor can decide to only\nadvertise the current mode and never send other modes. Clients\nshould not rely on non-current modes.\n\nThe size of a mode is given in physical hardware units of\nthe output device. This is not necessarily the same as\nthe output size in the global compositor space. For instance,\nthe output may be scaled, as described in wl_output.scale,\nor transformed, as described in wl_output.transform. Clients\nwilling to retrieve the output size in the global compositor\nspace should use xdg_output.logical_size instead.\n\nThe vertical refresh rate can be set to zero if it doesn't make\nsense for this output (e.g. for virtual outputs).\n\nThe mode event will be followed by a done event (starting from\nversion 2).\n\nClients should not use the refresh rate to schedule frames. Instead,\nthey should use the wl_surface.frame event or the presentation-time\nprotocol.\n\nNote: this information is not always meaningful for all outputs. Some\ncompositors, such as those exposing virtual outputs, might fake the\nrefresh rate or the size.",
            "summary": "advertise available modes for the output"
          },
          "args": [
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "bitfield of mode flags",
              "enum": "mode"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "width of the mode in hardware units"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "height of the mode in hardware units"
            },
            {
              "type": "arg",
              "name": "refresh",
              "argType": "int",
              "summary": "vertical refresh rate in mHz"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This event is sent after all other properties have been\nsent after binding to the output object and after any\nother property changes done after that. This allows\nchanges to the output properties to be seen as\natomic, even if they happen via multiple events.",
            "summary": "sent all information about output"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "scale",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This event contains scaling geometry information\nthat is not in the geometry event. It may be sent after\nbinding the output object or if the output scale changes\nlater. The compositor will emit a non-zero, positive\nvalue for scale. If it is not sent, the client should\nassume a scale of 1.\n\nA scale larger than 1 means that the compositor will\nautomatically scale surface buffers by this amount\nwhen rendering. This is used for very high resolution\ndisplays where applications rendering at the native\nresolution would be too small to be legible.\n\nClients should use wl_surface.preferred_buffer_scale\ninstead of this event to find the preferred buffer\nscale to use for a surface.\n\nThe scale event will be followed by a done event.",
            "summary": "output scaling properties"
          },
          "args": [
            {
              "type": "arg",
              "name": "factor",
              "argType": "int",
              "summary": "scaling factor of output"
            }
          ]
        },
        {
          "type": "event",
          "name": "name",
          "since": "4",
          "description": {
            "type": "description",
            "text": "Many compositors will assign user-friendly names to their outputs, show\nthem to the user, allow the user to refer to an output, etc. The client\nmay wish to know this name as well to offer the user similar behaviors.\n\nThe name is a UTF-8 string with no convention defined for its contents.\nEach name is unique among all wl_output globals. The name is only\nguaranteed to be unique for the compositor instance.\n\nThe same output name is used for all clients for a given wl_output\nglobal. Thus, the name can be shared across processes to refer to a\nspecific wl_output global.\n\nThe name is not guaranteed to be persistent across sessions, thus cannot\nbe used to reliably identify an output in e.g. configuration files.\n\nExamples of names include 'HDMI-A-1', 'WL-1', 'X11-1', etc. However, do\nnot assume that the name is a reflection of an underlying DRM connector,\nX11 connection, etc.\n\nThe name event is sent after binding the output object. This event is\nonly sent once per output object, and the name does not change over the\nlifetime of the wl_output global.\n\nCompositors may re-use the same output name if the wl_output global is\ndestroyed and re-created later. Compositors should avoid re-using the\nsame name if possible.\n\nThe name event will be followed by a done event.",
            "summary": "name of this output"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string",
              "summary": "output name"
            }
          ]
        },
        {
          "type": "event",
          "name": "description",
          "since": "4",
          "description": {
            "type": "description",
            "text": "Many compositors can produce human-readable descriptions of their\noutputs. The client may wish to know this description as well, e.g. for\noutput selection purposes.\n\nThe description is a UTF-8 string with no convention defined for its\ncontents. The description is not guaranteed to be unique among all\nwl_output globals. Examples might include 'Foocorp 11\" Display' or\n'Virtual X11 output via :1'.\n\nThe description event is sent after binding the output object and\nwhenever the description changes. The description is optional, and may\nnot be sent at all.\n\nThe description event will be followed by a done event.",
            "summary": "human-readable description of this output"
          },
          "args": [
            {
              "type": "arg",
              "name": "description",
              "argType": "string",
              "summary": "output description"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "subpixel",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This enumeration describes how the physical\npixels on an output are laid out.",
            "summary": "subpixel geometry information"
          },
          "entries": [
            {
              "type": "entry",
              "name": "unknown",
              "value": "0",
              "summary": "unknown geometry"
            },
            {
              "type": "entry",
              "name": "none",
              "value": "1",
              "summary": "no geometry"
            },
            {
              "type": "entry",
              "name": "horizontal_rgb",
              "value": "2",
              "summary": "horizontal RGB"
            },
            {
              "type": "entry",
              "name": "horizontal_bgr",
              "value": "3",
              "summary": "horizontal BGR"
            },
            {
              "type": "entry",
              "name": "vertical_rgb",
              "value": "4",
              "summary": "vertical RGB"
            },
            {
              "type": "entry",
              "name": "vertical_bgr",
              "value": "5",
              "summary": "vertical BGR"
            }
          ]
        },
        {
          "type": "enum",
          "name": "transform",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This describes transformations that clients and compositors apply to\nbuffer contents.\n\nThe flipped values correspond to an initial flip around a\nvertical axis followed by rotation.\n\nThe purpose is mainly to allow clients to render accordingly and\ntell the compositor, so that for fullscreen surfaces, the\ncompositor will still be able to scan out directly from client\nsurfaces.",
            "summary": "transformation applied to buffer contents"
          },
          "entries": [
            {
              "type": "entry",
              "name": "normal",
              "value": "0",
              "summary": "no transform"
            },
            {
              "type": "entry",
              "name": "90",
              "value": "1",
              "summary": "90 degrees counter-clockwise"
            },
            {
              "type": "entry",
              "name": "180",
              "value": "2",
              "summary": "180 degrees counter-clockwise"
            },
            {
              "type": "entry",
              "name": "270",
              "value": "3",
              "summary": "270 degrees counter-clockwise"
            },
            {
              "type": "entry",
              "name": "flipped",
              "value": "4",
              "summary": "180 degree flip around a vertical axis"
            },
            {
              "type": "entry",
              "name": "flipped_90",
              "value": "5",
              "summary": "flip and rotate 90 degrees counter-clockwise"
            },
            {
              "type": "entry",
              "name": "flipped_180",
              "value": "6",
              "summary": "flip and rotate 180 degrees counter-clockwise"
            },
            {
              "type": "entry",
              "name": "flipped_270",
              "value": "7",
              "summary": "flip and rotate 270 degrees counter-clockwise"
            }
          ]
        },
        {
          "type": "enum",
          "name": "mode",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "These flags describe properties of an output mode.\nThey are used in the flags bitfield of the mode event.",
            "summary": "mode information"
          },
          "entries": [
            {
              "type": "entry",
              "name": "current",
              "value": "0x1",
              "summary": "indicates this is the current mode"
            },
            {
              "type": "entry",
              "name": "preferred",
              "value": "0x2",
              "summary": "indicates this is the preferred mode"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_region",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A region object describes an area.\n\nRegion objects are used to describe the opaque and input\nregions of a surface.",
        "summary": "region interface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the region.  This will invalidate the object ID.",
            "summary": "destroy region"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "add",
          "description": {
            "type": "description",
            "text": "Add the specified rectangle to the region.",
            "summary": "add rectangle to region"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "region-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "region-local y coordinate"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "rectangle width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "rectangle height"
            }
          ]
        },
        {
          "type": "request",
          "name": "subtract",
          "description": {
            "type": "description",
            "text": "Subtract the specified rectangle from the region.",
            "summary": "subtract rectangle from region"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "region-local x coordinate"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "region-local y coordinate"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "rectangle width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "rectangle height"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wl_subcompositor",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The global interface exposing sub-surface compositing capabilities.\nA wl_surface, that has sub-surfaces associated, is called the\nparent surface. Sub-surfaces can be arbitrarily nested and create\na tree of sub-surfaces.\n\nThe root surface in a tree of sub-surfaces is the main\nsurface. The main surface cannot be a sub-surface, because\nsub-surfaces must always have a parent.\n\nA main surface with its sub-surfaces forms a (compound) window.\nFor window management purposes, this set of wl_surface objects is\nto be considered as a single window, and it should also behave as\nsuch.\n\nThe aim of sub-surfaces is to offload some of the compositing work\nwithin a window from clients to the compositor. A prime example is\na video player with decorations and video in separate wl_surface\nobjects. This should allow the compositor to pass YUV video buffer\nprocessing to dedicated overlay hardware when possible.",
        "summary": "sub-surface compositing"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Informs the server that the client will not be using this\nprotocol object anymore. This does not affect any other\nobjects, wl_subsurface objects included.",
            "summary": "unbind from the subcompositor interface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_subsurface",
          "description": {
            "type": "description",
            "text": "Create a sub-surface interface for the given surface, and\nassociate it with the given parent surface. This turns a\nplain wl_surface into a sub-surface.\n\nThe to-be sub-surface must not already have another role, and it\nmust not have an existing wl_subsurface object. Otherwise the\nbad_surface protocol error is raised.\n\nAdding sub-surfaces to a parent is a double-buffered operation on the\nparent (see wl_surface.commit). The effect of adding a sub-surface\nbecomes visible on the next time the state of the parent surface is\napplied.\n\nThe parent surface must not be one of the child surface's descendants,\nand the parent must be different from the child surface, otherwise the\nbad_parent protocol error is raised.\n\nThis request modifies the behaviour of wl_surface.commit request on\nthe sub-surface, see the documentation on wl_subsurface interface.",
            "summary": "give a surface the role sub-surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new sub-surface object ID",
              "interface": "wl_subsurface"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface to be turned into a sub-surface",
              "interface": "wl_surface"
            },
            {
              "type": "arg",
              "name": "parent",
              "argType": "object",
              "summary": "the parent surface",
              "interface": "wl_surface"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "bad_surface",
              "value": "0",
              "summary": "the to-be sub-surface is invalid"
            },
            {
              "type": "entry",
              "name": "bad_parent",
              "value": "1",
              "summary": "the to-be sub-surface parent is invalid"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wl_subsurface",
      "version": "1",
      "description": {
        "type": "description",
        "text": "An additional interface to a wl_surface object, which has been\nmade a sub-surface. A sub-surface has one parent surface. A\nsub-surface's size and position are not limited to that of the parent.\nParticularly, a sub-surface is not automatically clipped to its\nparent's area.\n\nA sub-surface becomes mapped, when a non-NULL wl_buffer is applied\nand the parent surface is mapped. The order of which one happens\nfirst is irrelevant. A sub-surface is hidden if the parent becomes\nhidden, or if a NULL wl_buffer is applied. These rules apply\nrecursively through the tree of surfaces.\n\nThe behaviour of a wl_surface.commit request on a sub-surface\ndepends on the sub-surface's mode. The possible modes are\nsynchronized and desynchronized, see methods\nwl_subsurface.set_sync and wl_subsurface.set_desync. Synchronized\nmode caches the wl_surface state to be applied when the parent's\nstate gets applied, and desynchronized mode applies the pending\nwl_surface state directly. A sub-surface is initially in the\nsynchronized mode.\n\nSub-surfaces also have another kind of state, which is managed by\nwl_subsurface requests, as opposed to wl_surface requests. This\nstate includes the sub-surface position relative to the parent\nsurface (wl_subsurface.set_position), and the stacking order of\nthe parent and its sub-surfaces (wl_subsurface.place_above and\n.place_below). This state is applied when the parent surface's\nwl_surface state is applied, regardless of the sub-surface's mode.\nAs the exception, set_sync and set_desync are effective immediately.\n\nThe main surface can be thought to be always in desynchronized mode,\nsince it does not have a parent in the sub-surfaces sense.\n\nEven if a sub-surface is in desynchronized mode, it will behave as\nin synchronized mode, if its parent surface behaves as in\nsynchronized mode. This rule is applied recursively throughout the\ntree of surfaces. This means, that one can set a sub-surface into\nsynchronized mode, and then assume that all its child and grand-child\nsub-surfaces are synchronized, too, without explicitly setting them.\n\nDestroying a sub-surface takes effect immediately. If you need to\nsynchronize the removal of a sub-surface to the parent surface update,\nunmap the sub-surface first by attaching a NULL wl_buffer, update parent,\nand then destroy the sub-surface.\n\nIf the parent wl_surface object is destroyed, the sub-surface is\nunmapped.\n\nA sub-surface never has the keyboard focus of any seat.\n\nThe wl_surface.offset request is ignored: clients must use set_position\ninstead to move the sub-surface.",
        "summary": "sub-surface interface to a wl_surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "The sub-surface interface is removed from the wl_surface object\nthat was turned into a sub-surface with a\nwl_subcompositor.get_subsurface request. The wl_surface's association\nto the parent is deleted. The wl_surface is unmapped immediately.",
            "summary": "remove sub-surface interface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_position",
          "description": {
            "type": "description",
            "text": "This schedules a sub-surface position change.\nThe sub-surface will be moved so that its origin (top left\ncorner pixel) will be at the location x, y of the parent surface\ncoordinate system. The coordinates are not restricted to the parent\nsurface area. Negative values are allowed.\n\nThe scheduled coordinates will take effect whenever the state of the\nparent surface is applied.\n\nIf more than one set_position request is invoked by the client before\nthe commit of the parent surface, the position of a new request always\nreplaces the scheduled position from any previous request.\n\nThe initial position is 0, 0.",
            "summary": "reposition the sub-surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x coordinate in the parent surface"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y coordinate in the parent surface"
            }
          ]
        },
        {
          "type": "request",
          "name": "place_above",
          "description": {
            "type": "description",
            "text": "This sub-surface is taken from the stack, and put back just\nabove the reference surface, changing the z-order of the sub-surfaces.\nThe reference surface must be one of the sibling surfaces, or the\nparent surface. Using any other surface, including this sub-surface,\nwill cause a protocol error.\n\nThe z-order is double-buffered. Requests are handled in order and\napplied immediately to a pending state. The final pending state is\ncopied to the active state the next time the state of the parent\nsurface is applied.\n\nA new sub-surface is initially added as the top-most in the stack\nof its siblings and parent.",
            "summary": "restack the sub-surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "sibling",
              "argType": "object",
              "summary": "the reference surface",
              "interface": "wl_surface"
            }
          ]
        },
        {
          "type": "request",
          "name": "place_below",
          "description": {
            "type": "description",
            "text": "The sub-surface is placed just below the reference surface.\nSee wl_subsurface.place_above.",
            "summary": "restack the sub-surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "sibling",
              "argType": "object",
              "summary": "the reference surface",
              "interface": "wl_surface"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_sync",
          "description": {
            "type": "description",
            "text": "Change the commit behaviour of the sub-surface to synchronized\nmode, also described as the parent dependent mode.\n\nIn synchronized mode, wl_surface.commit on a sub-surface will\naccumulate the committed state in a cache, but the state will\nnot be applied and hence will not change the compositor output.\nThe cached state is applied to the sub-surface immediately after\nthe parent surface's state is applied. This ensures atomic\nupdates of the parent and all its synchronized sub-surfaces.\nApplying the cached state will invalidate the cache, so further\nparent surface commits do not (re-)apply old state.\n\nSee wl_subsurface for the recursive effect of this mode.",
            "summary": "set sub-surface to synchronized mode"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_desync",
          "description": {
            "type": "description",
            "text": "Change the commit behaviour of the sub-surface to desynchronized\nmode, also described as independent or freely running mode.\n\nIn desynchronized mode, wl_surface.commit on a sub-surface will\napply the pending state directly, without caching, as happens\nnormally with a wl_surface. Calling wl_surface.commit on the\nparent surface has no effect on the sub-surface's wl_surface\nstate. This mode allows a sub-surface to be updated on its own.\n\nIf cached state exists when wl_surface.commit is called in\ndesynchronized mode, the pending state is added to the cached\nstate, and applied as a whole. This invalidates the cache.\n\nNote: even if a sub-surface is set to desynchronized, a parent\nsub-surface may override it to behave as synchronized. For details,\nsee wl_subsurface.\n\nIf a surface's parent surface behaves as desynchronized, then\nthe cached state is applied on set_desync.",
            "summary": "set sub-surface to desynchronized mode"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "bad_surface",
              "value": "0",
              "summary": "wl_surface is not a sibling or the parent"
            }
          ]
        }
      ]
    }
  ]
}
