{
  "type": "protocol",
  "name": "tizen_extension",
  "interfaces": [
    {
      "type": "interface",
      "name": "tizen_surface",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The tizen_surface provides tizen-specific functionalities for the given\nsurface.",
        "summary": "tizen-specific surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_tizen_resource",
          "description": {
            "type": "description",
            "text": "Create a tizen_resource interface for the given surface.",
            "summary": "get a tizen_resource object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new tizen_resource object",
              "interface": "tizen_resource"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy this tizen_surface object.",
            "summary": "destroy tizen_surface"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_resource",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This tizen_resource provides a global resource id. It is a unique id\nwhich is provided by the display server.",
        "summary": "global resource id"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy this tizen_resource object.",
            "summary": "destroy tizen_resource"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "resource_id",
          "description": {
            "type": "description",
            "text": "The resource_id event is sent immediately upon the tizen_resource object\ncreation by the display server. The id is a unique id which is generated\nby the display server.",
            "summary": "a global resource id"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "uint",
              "summary": "the global resource id"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_policy",
      "version": "13",
      "description": {
        "type": "description",
        "text": "The tizen_policy provides tizen-specific requests and events for window\nmanagement at Tizen Platform.\n\n[TODO] Explain the window layer at the display server. Need to explain the\nwindow layer to understand the requests and the events at tizen_policy\ninterface.",
        "summary": "tizen-specific policy for window management"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_visibility",
          "description": {
            "type": "description",
            "text": "Create a visibility interface for the given surface.",
            "summary": "get a visibility object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new visibility object",
              "interface": "tizen_visibility"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_position",
          "description": {
            "type": "description",
            "text": "Create a position interface for the given surface.\n[TODO]: need to explain the relationship with zxdg_positioner_v6",
            "summary": "get a position object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new position object",
              "interface": "tizen_position"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "activate",
          "description": {
            "type": "description",
            "text": "Activate the given surface. A client requests this when a client wants\nto raise at the top of the windows stack in the window's layer at the\ndisplay server and also wants to get a keyboard focus from the display\nserver. However the display server does not always set the focus on the\nreqested surface. It depends on the focus policy of the display server.\nA client just demands a keyboard focus via this request.",
            "summary": "activate the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "activate_below_by_res_id",
          "description": {
            "type": "description",
            "text": "Activate the surface associated with the given res_id and position it\nbelow the surface associated with the below_res_id. A client uses this\nreuquest when it want to change the order of the window stack with the\ngloal resource ids which are the surfaces belonging to different\nprocesses. However, this requestit does not work when the surface\nassociated with the below_res_id is a parent of the surface assicated\nwith the res_id.",
            "summary": "activate the res_id and position below res_id"
          },
          "args": [
            {
              "type": "arg",
              "name": "res_id",
              "argType": "uint",
              "summary": "the global resource id"
            },
            {
              "type": "arg",
              "name": "below_res_id",
              "argType": "uint",
              "summary": "the global resource id"
            }
          ]
        },
        {
          "type": "request",
          "name": "raise",
          "description": {
            "type": "description",
            "text": "This request raises the given surface to the top of the window stack\nin a window layer. A client can decide the window layer with the\nwindow_type for the given surface through the set_type request of\ntizen_policy interface. The surface positions at the top in the window\nlayer.",
            "summary": "raise the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "lower",
          "description": {
            "type": "description",
            "text": "This request lowers the given surface to the bottom of the window stack\nin a window layer. The surface positions at the bottom in the window\nlayer.",
            "summary": "lower the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "lower_by_res_id",
          "description": {
            "type": "description",
            "text": "This request lowers the surface associated with the given res_id to the\nbottom of the window stack in a window layer. The surface positions at\nthe bottom in the window layer.",
            "summary": "lower the res_id"
          },
          "args": [
            {
              "type": "arg",
              "name": "res_id",
              "argType": "uint",
              "summary": "the global resource id"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_focus_skip",
          "description": {
            "type": "description",
            "text": "This request makes the given surface unable to be the focused surface.\nThe display server must not give the focus to the surface.",
            "summary": "be unable to be the focused surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_focus_skip",
          "description": {
            "type": "description",
            "text": "This request makes the given surface enable to be the focused surface.",
            "summary": "enable to be the focused surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_role",
          "description": {
            "type": "description",
            "text": "Give the role to the given surface. A client set the tizen-specific role\nof the surface except for the role of xdg_surface interface,\nxdg_top_level, xdg_popup and so on.",
            "summary": "set the role of the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "role",
              "argType": "string",
              "summary": "the name of the role"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_type",
          "description": {
            "type": "description",
            "text": "Set the type of the given surface. The display server use the window\ntype for the policy of the window management which are focus management,\nvisibility management, stack management and so on.",
            "summary": "set the type of the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "win_type",
              "argType": "uint",
              "summary": "the window type"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_conformant",
          "description": {
            "type": "description",
            "text": "Set the conformant surface. The conformant surface can get the event\nthrough which the display server notifies the area covered by the\ncompormant_part that is the surface in another client.",
            "summary": "set the conformant(adaptational) surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_conformant",
          "description": {
            "type": "description",
            "text": "Unset the conformant surface.",
            "summary": "unset the conformant(adaptational) surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_conformant",
          "description": {
            "type": "description",
            "text": "Ask if the given surface is the conformant surface or not. The display\nserver sents the result via the confirmant event.",
            "summary": "check the conformant surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_notification_level",
          "description": {
            "type": "description",
            "text": "This request sets the level in the notification layer. The display\nserver decides the z-order with the given level in the notification\nlayer.",
            "summary": "set the level in the notification"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "level",
              "argType": "int",
              "summary": "the z-order value"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_transient_for",
          "description": {
            "type": "description",
            "text": "This request sets the transient parent for the surface associated with\nthe parent_id. The surface associated with the given child_id becomes\na transient children for the surface associated with the parent_id.",
            "summary": "set the transient parent for parent_id"
          },
          "args": [
            {
              "type": "arg",
              "name": "child_id",
              "argType": "uint",
              "summary": "the global resource id for the child surface"
            },
            {
              "type": "arg",
              "name": "parent_id",
              "argType": "uint",
              "summary": "the globacl resource is for the parent surface"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_transient_for",
          "description": {
            "type": "description",
            "text": "This reuqest unsets the transient parent on the surface associated with\nthe child_id.",
            "summary": "unset the transient parent/child relationship"
          },
          "args": [
            {
              "type": "arg",
              "name": "child_id",
              "argType": "uint",
              "summary": "the global resource id for the child surface"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_window_screen_mode",
          "description": {
            "type": "description",
            "text": "A client sets the screen mode which it wants the screen to be as long as\nthe given surface is shown on the screen.",
            "summary": "set the screen mode to the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "summary": "the screen mode"
            }
          ]
        },
        {
          "type": "request",
          "name": "place_subsurface_below_parent",
          "description": {
            "type": "description",
            "text": "This request places the surface of the subsurface below its' parent\nsurface.",
            "summary": "place the subsurace below the parent surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "subsurface",
              "argType": "object",
              "summary": "the subsurface object",
              "interface": "wl_subsurface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_subsurface_stand_alone",
          "description": {
            "type": "description",
            "text": "This request makes the surface associated with the given subsurface not\nfollow the policy of the window managment triggered by the parent\nsurface. The window policy of the surface associated with the given\nsubsurface is not affected by its parent surface.",
            "summary": "make the subsurface be a stand_alone mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "subsurface",
              "argType": "object",
              "summary": "the subsurface object",
              "interface": "wl_subsurface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_subsurface",
          "description": {
            "type": "description",
            "text": "Get the subsurface of the given surface with the global resource parent_id.",
            "summary": "get the subsurface of the surface with the parent_id"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "the new subsurface object",
              "interface": "wl_subsurface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "parent_id",
              "argType": "uint",
              "summary": "the global reosurce id"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_opaque_state",
          "description": {
            "type": "description",
            "text": "Set the opaque state to the given surface. The display server makes this\nsurface be opaque even if the color depth of the buffer attached to the\nsurface is 32 depth.",
            "summary": "set the opaque state to the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "iconify",
          "description": {
            "type": "description",
            "text": "Set the iconified state to the given surface. The iconfied state is the\nwindow state in which the surface is not showing on the screen.",
            "summary": "set the iconified state to the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "uniconify",
          "description": {
            "type": "description",
            "text": "Set the uniconified state to the given surface. The uniconfied state is\nthe window state in which the iconified surface is showing on the screen.",
            "summary": "set the uniconified state to the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "add_aux_hint",
          "description": {
            "type": "description",
            "text": "Add the information of the auxiliary hint to the given surface. The name\nand the value are changed when the display server already has the same\nid with which the client sends this request.",
            "summary": "add the information of the auxiliary hint to the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the id of the auxiliary hint"
            },
            {
              "type": "arg",
              "name": "name",
              "argType": "string",
              "summary": "the name of the auxiliary hint"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "string",
              "summary": "the vaule of the auxiliary hint"
            }
          ]
        },
        {
          "type": "request",
          "name": "change_aux_hint",
          "description": {
            "type": "description",
            "text": "Change the value of the auxiliary hint id which the surface has.",
            "summary": "change the value of the auxiliary hint to the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the id of the auxiliary hint"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "string",
              "summary": "the vaule of the auxiliary hint"
            }
          ]
        },
        {
          "type": "request",
          "name": "del_aux_hint",
          "description": {
            "type": "description",
            "text": "Delete the information of the auxiliary hint associated the hint id\nwhich the given surface has.",
            "summary": "delete the information of the auxiliry hint"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the id of the auxiliary hint"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_supported_aux_hints",
          "description": {
            "type": "description",
            "text": "Get the ids of the aux hints which the given surface supports. The\ndisplay server send the supported_aux_hints events as the reply of this\nrequrest.",
            "summary": "get the aux hints"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_background_state",
          "description": {
            "type": "description",
            "text": "Set the all surfaces associated with the given pid to be the background\nstate. The surfaces set to be the hide state and cannot show on a screen\neven if the client send the show request and the activate request.",
            "summary": "set the background state"
          },
          "args": [
            {
              "type": "arg",
              "name": "pid",
              "argType": "uint",
              "summary": "the process id"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_background_state",
          "description": {
            "type": "description",
            "text": "Set the all surfaces associated with the given pid not to be the\nbackground state. The sufaces can allow to be showed and to be activated\nby the client's request.",
            "summary": "unset the background state"
          },
          "args": [
            {
              "type": "arg",
              "name": "pid",
              "argType": "uint",
              "summary": "the process id"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_floating_mode",
          "description": {
            "type": "description",
            "text": "Set the floating mode to the given surface. The surface which sets to be\nfloating mode can be a partial window and can position over other\ntop-level windows.",
            "summary": "set the floating mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_floating_mode",
          "description": {
            "type": "description",
            "text": "Unset the floating mode to the given surface. The geometry of the\nsurface does not change and the z-order of it can be the same as the\ntop-level windows.",
            "summary": "unset the floating mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_stack_mode",
          "description": {
            "type": "description",
            "text": "Set the stack mode to the given surface. The surface can changes the\nz-order in the same layer by the stack mode.",
            "summary": "set the stack mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "summary": "the stack mode"
            }
          ]
        },
        {
          "type": "request",
          "name": "activate_above_by_res_id",
          "description": {
            "type": "description",
            "text": "Activate the surface associated with the given res_id which is the\nglobal resource id and set to position over the surface assoicated with\nthe above_res_id.",
            "summary": "activate and position over the above resource id"
          },
          "args": [
            {
              "type": "arg",
              "name": "res_id",
              "argType": "uint",
              "summary": "the global resource id"
            },
            {
              "type": "arg",
              "name": "above_res_id",
              "argType": "uint",
              "summary": "the globacl resource id"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_subsurface_watcher",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Get the subsurface watcher associated with the given surface. A client\ncan get the information about the subsurface associated with the surface.",
            "summary": "get the subsurface watcher"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "new tizen_subsurface_watcher object",
              "interface": "tizen_subsurface_watcher"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_parent",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Set the parent/client relationship. The child surface position over the\nparent surface.",
            "summary": "set the parent"
          },
          "args": [
            {
              "type": "arg",
              "name": "child",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "parent",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "ack_conformant_region",
          "since": "4",
          "description": {
            "type": "description",
            "text": "A client can refresh its surface for applying new conformant region\nwhich is from tizen_policy@conformant_region event. The client has to\nack after complete of its updates by this request.",
            "summary": "ack for tizen_policy@conformant_region"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serial number"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "since": "6",
          "description": {
            "type": "description",
            "text": "Destroy this tizen_policy object.",
            "summary": "destroy the tizen_policy"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "has_video",
          "since": "7",
          "description": {
            "type": "description",
            "text": "A cleint sends the information that it has the tizen_video_object to the\ndisplay server.",
            "summary": "check the tizen_video_object"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "has",
              "argType": "uint",
              "summary": "1 is the tizen_video_object, or 0"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_appid",
          "since": "7",
          "description": {
            "type": "description",
            "text": "Set the application id associated with the given pid.",
            "summary": "set the application id"
          },
          "args": [
            {
              "type": "arg",
              "name": "pid",
              "argType": "int",
              "summary": "process id"
            },
            {
              "type": "arg",
              "name": "appid",
              "argType": "string",
              "summary": "application id"
            }
          ]
        },
        {
          "type": "request",
          "name": "show",
          "since": "8",
          "description": {
            "type": "description",
            "text": "Notify showing the given surface. This request means that a client is\ngoing to attach the buffer to the given surface. There is nothing to do\nat the display server when a client sends this request.",
            "summary": "notify showing the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "hide",
          "since": "8",
          "description": {
            "type": "description",
            "text": "Notify hiding the given surface. This request means that a client is\ngoing to attach the null buffer to the given surface. There is nothing\nto do at the display server when a client sends this request.",
            "summary": "notify hiding the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_transient_for_below",
          "since": "9",
          "description": {
            "type": "description",
            "text": "This makes a relationship between parent and child. A child is always\nplaced under a parent.",
            "summary": "set transient_for and place under the transient_for parent"
          },
          "args": [
            {
              "type": "arg",
              "name": "child_id",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "parent_id",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_parent_with_below",
          "since": "9",
          "description": {
            "type": "description",
            "text": "This makes a relationship between parent and child. A child is always\nplaced under a parent. Setting a null parent for a child window removes\nany parent-child relationship for the child.",
            "summary": "set parent and place under the parent"
          },
          "args": [
            {
              "type": "arg",
              "name": "child",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "parent",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_maximize_direction",
          "since": "12",
          "description": {
            "type": "description",
            "text": "Set the maximize direction of the surface.",
            "summary": "set maximize direction"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "direction",
              "argType": "uint",
              "summary": "maximize direction",
              "enum": "maximize_direction"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_pin_mode",
          "since": "12",
          "description": {
            "type": "description",
            "text": "Set the pin mode of the surface.",
            "summary": "set pin mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_pin_mode",
          "since": "12",
          "description": {
            "type": "description",
            "text": "Unset the pin mode of the surface.",
            "summary": "unset pin mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_layout",
          "since": "12",
          "description": {
            "type": "description",
            "text": "Set the layout of the surface with the coordinates passed.",
            "summary": "set layout of the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "num_cols",
              "argType": "uint",
              "summary": "the total number of columns"
            },
            {
              "type": "arg",
              "name": "num_rows",
              "argType": "uint",
              "summary": "the total number of rows"
            },
            {
              "type": "arg",
              "name": "column",
              "argType": "uint",
              "summary": "the column number to be positioned"
            },
            {
              "type": "arg",
              "name": "row",
              "argType": "uint",
              "summary": "the row number to be positioned"
            },
            {
              "type": "arg",
              "name": "cols_span",
              "argType": "uint",
              "summary": "the columns span"
            },
            {
              "type": "arg",
              "name": "rows_span",
              "argType": "uint",
              "summary": "the rows span"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_modal",
          "since": "13",
          "description": {
            "type": "description",
            "text": "Set the modal state of the surface.",
            "summary": "set modal state"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_modal",
          "since": "13",
          "description": {
            "type": "description",
            "text": "Unset the modal state of the surface.",
            "summary": "unset modal state"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "conformant",
          "description": {
            "type": "description",
            "text": "Notify the client when a client sends the get_conformant request.",
            "summary": "conformant event"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "is_conformant",
              "argType": "uint",
              "summary": "if the surface is conformant or not, 0 or 1"
            }
          ]
        },
        {
          "type": "event",
          "name": "conformant_area",
          "description": {
            "type": "description",
            "text": "Notify a client when the conformant area is caclulated by the another\nsurface as the conformnat_part. This event does NOT guarantee the\nperfect composition of the conformant surface and the surface of the\nconformant part.",
            "summary": "conformant area event"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "conformant_part",
              "argType": "uint",
              "summary": "the name of the conformant part"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "visible(1) or not(0)"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position of the hiding area by conformant part"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position of the hiding area by conformant part"
            },
            {
              "type": "arg",
              "name": "w",
              "argType": "int",
              "summary": "width of the hiding area by conformant part"
            },
            {
              "type": "arg",
              "name": "h",
              "argType": "int",
              "summary": "height of the hiding area by conformant part"
            }
          ]
        },
        {
          "type": "event",
          "name": "notification_done",
          "description": {
            "type": "description",
            "text": "Notify a client when the surface is located in the z-order which has\nbeen reuqested via the set_notification_level request.",
            "summary": "done event of set_notification request"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "level",
              "argType": "int",
              "summary": "the z-order value"
            },
            {
              "type": "arg",
              "name": "error_state",
              "argType": "uint",
              "summary": "the error type"
            }
          ]
        },
        {
          "type": "event",
          "name": "transient_for_done",
          "description": {
            "type": "description",
            "text": "Notify a client when the surface associated with the child_id is to set\nthe transient parent or when it is to unset the transient parent.",
            "summary": "done event of set/unset transient_for"
          },
          "args": [
            {
              "type": "arg",
              "name": "child_id",
              "argType": "uint",
              "summary": "the global resource id for the child surface"
            }
          ]
        },
        {
          "type": "event",
          "name": "window_screen_mode_done",
          "description": {
            "type": "description",
            "text": "Notify a client when the screen_mode from the client's request activates\nin the display server.",
            "summary": "done event for set_window_screen_mode request"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "summary": "the screen mode"
            },
            {
              "type": "arg",
              "name": "error_state",
              "argType": "uint",
              "summary": "the error type"
            }
          ]
        },
        {
          "type": "event",
          "name": "iconify_state_changed",
          "description": {
            "type": "description",
            "text": "Notify a client when the iconfied state of the surface is changed. The\niconfied state is not only changed when the client requets the iconify\nand uniconify but also changed when the iconfied state is decided by\nthe display server.",
            "summary": "change event of the iconfied state"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "iconified",
              "argType": "uint",
              "summary": "the iconfied or uniconified state, 1 or 0"
            },
            {
              "type": "arg",
              "name": "force",
              "argType": "uint",
              "summary": "the iconfied is forced or not, 1 or 0"
            }
          ]
        },
        {
          "type": "event",
          "name": "supported_aux_hints",
          "description": {
            "type": "description",
            "text": "Notify a client when the display server get the get_supported_aux_hints\nrequest. The display server send the id array of the suxiliary hints\nwhich the surface supports.",
            "summary": "reply event for the get_supported_aux_hints request"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "hints",
              "argType": "array",
              "summary": "the id array of the auxiliary hints"
            },
            {
              "type": "arg",
              "name": "num_hints",
              "argType": "uint",
              "summary": "the number of hints"
            }
          ]
        },
        {
          "type": "event",
          "name": "allowed_aux_hint",
          "description": {
            "type": "description",
            "text": "Notify a client when the auxiliary hint which the given surface has is\nadded and changed.",
            "summary": "event of the allowed auxiliary hint"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "id",
              "argType": "int",
              "summary": "the id of the auxiliary hint"
            }
          ]
        },
        {
          "type": "event",
          "name": "aux_message",
          "description": {
            "type": "description",
            "text": "Notify a client when the display server sends the auxiliary message.\nThe display server can use this event when it notifies an additional\ninformation to the client.",
            "summary": "the auxiliary message event"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "string",
              "summary": "the key string"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "string",
              "summary": "the vaule of the key"
            },
            {
              "type": "arg",
              "name": "options",
              "argType": "array",
              "summary": "the array of option information"
            }
          ]
        },
        {
          "type": "event",
          "name": "conformant_region",
          "since": "4",
          "description": {
            "type": "description",
            "text": "The server can notify of conformant region(area) using this event.\nIf client is received this event, client should ack for it using\ntizen_policy@ack_conformant_region request.",
            "summary": "notify of geometry values of conformant region(area)"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "conformant_part",
              "argType": "uint",
              "summary": "the name of the conformant part"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "visible(1) or not(0)"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position of the hiding area by conformant part"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position of the hiding area by conformant part"
            },
            {
              "type": "arg",
              "name": "w",
              "argType": "int",
              "summary": "width of the hiding area by conformant part"
            },
            {
              "type": "arg",
              "name": "h",
              "argType": "int",
              "summary": "height of the hiding area by conformant part"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "serail number"
            }
          ]
        },
        {
          "type": "event",
          "name": "interactive_move_done",
          "since": "10",
          "description": {
            "type": "description",
            "text": "This event is sent when the display server finishes interactive moving\nthe window. The changed geometry of the window is sent together.",
            "summary": "interactive move is done"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x-position after move"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y-position after move"
            },
            {
              "type": "arg",
              "name": "w",
              "argType": "uint",
              "summary": "width after move"
            },
            {
              "type": "arg",
              "name": "h",
              "argType": "uint",
              "summary": "height after move"
            },
            {
              "type": "arg",
              "name": "angle",
              "argType": "int",
              "summary": "current angle of surface"
            }
          ]
        },
        {
          "type": "event",
          "name": "interactive_resize_done",
          "since": "10",
          "description": {
            "type": "description",
            "text": "This event is sent when the display server finishes interactive\nresizing the window. The changed geometry of the window is sent\ntogether.",
            "summary": "interactive resize is done"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x-position after resize"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y-position after resize"
            },
            {
              "type": "arg",
              "name": "w",
              "argType": "uint",
              "summary": "width after resize"
            },
            {
              "type": "arg",
              "name": "h",
              "argType": "uint",
              "summary": "height after resize"
            },
            {
              "type": "arg",
              "name": "angle",
              "argType": "int",
              "summary": "current angle of surface"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "win_type",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "A client can set the window type through the set_type request with\nwin_type values. The value gives the surface the window_state, the\nz-order at the window stack in the window layer and other types in the\ndisplay server.\n\nThe following values are window types with z-order values in descending\norder. Those are notification, dnd, dock, splash, fullscreen,\ntoplevel or maximized and desktop.\nThe menu, dnd, notification, utility, dialog, dock, splash and desktop\nare the window type which is defined in netwm spefification.\nhttps://specifications.freedesktop.org/wm-spec/wm-spec-1.4.html#idm46148902270160",
            "summary": "window type of the surface"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none"
            },
            {
              "type": "entry",
              "name": "toplevel",
              "value": "1",
              "summary": "the toplevel"
            },
            {
              "type": "entry",
              "name": "fullscreen",
              "value": "2",
              "summary": "the fullscreen state"
            },
            {
              "type": "entry",
              "name": "maximized",
              "value": "3",
              "summary": "the maximize state"
            },
            {
              "type": "entry",
              "name": "transient",
              "value": "4",
              "summary": "the transient relation state"
            },
            {
              "type": "entry",
              "name": "menu",
              "value": "5",
              "summary": "the menu"
            },
            {
              "type": "entry",
              "name": "dnd",
              "value": "6",
              "summary": "the dnd"
            },
            {
              "type": "entry",
              "name": "custom",
              "value": "7",
              "summary": "the custom"
            },
            {
              "type": "entry",
              "name": "notification",
              "value": "8",
              "summary": "the notification"
            },
            {
              "type": "entry",
              "name": "utility",
              "value": "9",
              "summary": "the utility"
            },
            {
              "type": "entry",
              "name": "dialog",
              "value": "10",
              "summary": "the dialog"
            },
            {
              "type": "entry",
              "name": "dock",
              "value": "11",
              "summary": "the dock"
            },
            {
              "type": "entry",
              "name": "splash",
              "value": "12",
              "summary": "the splash"
            },
            {
              "type": "entry",
              "name": "desktop",
              "value": "13",
              "summary": "the desktop",
              "since": "11"
            }
          ]
        },
        {
          "type": "enum",
          "name": "conformant_part",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This value indicates the surface name at Tizen Platform.",
            "summary": "the name of conformant part"
          },
          "entries": [
            {
              "type": "entry",
              "name": "indicator",
              "value": "0",
              "summary": "the indicator surface"
            },
            {
              "type": "entry",
              "name": "keyboard",
              "value": "1",
              "summary": "the keyboard surface"
            },
            {
              "type": "entry",
              "name": "clipboard",
              "value": "2",
              "summary": "the clipboard surface"
            }
          ]
        },
        {
          "type": "enum",
          "name": "error_state",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This describes the state of error.",
            "summary": "error state"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "success"
            },
            {
              "type": "entry",
              "name": "permission_denied",
              "value": "1",
              "summary": "the permission denied"
            }
          ]
        },
        {
          "type": "enum",
          "name": "level",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This is the level of the notification type. This level stands for the\nz-order in the notification layer at the display server. The none, 1, 2,\n3, default, medium, high and top is z-order in ascending order. The\nlower number value means the lower z-order.",
            "summary": "notification level"
          },
          "entries": [
            {
              "type": "entry",
              "name": "1",
              "value": "0",
              "summary": "the bottom default z-order"
            },
            {
              "type": "entry",
              "name": "2",
              "value": "1",
              "summary": "the bottom midium z-order"
            },
            {
              "type": "entry",
              "name": "3",
              "value": "2",
              "summary": "the bottom high z-order"
            },
            {
              "type": "entry",
              "name": "none",
              "value": "-1",
              "summary": "the bottom lowest z-order"
            },
            {
              "type": "entry",
              "name": "default",
              "value": "10",
              "summary": "the default z-order"
            },
            {
              "type": "entry",
              "name": "medium",
              "value": "20",
              "summary": "the medium z-order"
            },
            {
              "type": "entry",
              "name": "high",
              "value": "30",
              "summary": "the high z-order"
            },
            {
              "type": "entry",
              "name": "top",
              "value": "40",
              "summary": "the top z-order"
            }
          ]
        },
        {
          "type": "enum",
          "name": "mode",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This value means how the screen is to operate.",
            "summary": "screen mode"
          },
          "entries": [
            {
              "type": "entry",
              "name": "default",
              "value": "0",
              "summary": "the default screen mode"
            },
            {
              "type": "entry",
              "name": "always_on",
              "value": "1",
              "summary": "keep the screen turn on"
            }
          ]
        },
        {
          "type": "enum",
          "name": "stack_mode",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "The set_stack_mode request uses this mode values.",
            "summary": "mode for the relative stack order"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "above",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "below",
              "value": "2"
            }
          ]
        },
        {
          "type": "enum",
          "name": "maximize_direction",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These values are used by the set_maximize_direction as the paremater.",
            "summary": "direction values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none. same to unmaximize"
            },
            {
              "type": "entry",
              "name": "all",
              "value": "1",
              "summary": "the full size of the screen"
            },
            {
              "type": "entry",
              "name": "left",
              "value": "2",
              "summary": "the left side of the screen"
            },
            {
              "type": "entry",
              "name": "right",
              "value": "3",
              "summary": "the right side of the screen"
            },
            {
              "type": "entry",
              "name": "top",
              "value": "4",
              "summary": "the top of the screen"
            },
            {
              "type": "entry",
              "name": "bottom",
              "value": "5",
              "summary": "the bottom of the screen"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_visibility",
      "version": "5",
      "description": {
        "type": "description",
        "text": "A client wants to know the visiblity information of the surface.",
        "summary": "tizen-specific visibility"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy this tizen_visiblity object.",
            "summary": "destroy the tizen_visibility"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "notify",
          "description": {
            "type": "description",
            "text": "Notify a client when the visibility of the surface is changed.",
            "summary": "notify the visiblity state"
          },
          "args": [
            {
              "type": "arg",
              "name": "visibility",
              "argType": "uint",
              "summary": "visiblity type"
            }
          ]
        },
        {
          "type": "event",
          "name": "changed",
          "since": "5",
          "description": {
            "type": "description",
            "text": "Notify a client when the visibility of the surface is changed with the\nextra vaule.",
            "summary": "notify the changed visiblity type"
          },
          "args": [
            {
              "type": "arg",
              "name": "type",
              "argType": "uint",
              "summary": "changed visibility type",
              "enum": "visibility"
            },
            {
              "type": "arg",
              "name": "option",
              "argType": "uint",
              "summary": "extra value"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "visibility",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These are the visibilty types which tells how the surface assoicated\nwith the tizen_visibility resource is showing on a screen or not.",
            "summary": "visibility type"
          },
          "entries": [
            {
              "type": "entry",
              "name": "unobscured",
              "value": "0",
              "summary": "fully showing on a screen"
            },
            {
              "type": "entry",
              "name": "partially_obscured",
              "value": "1",
              "summary": "partially showing on a screen"
            },
            {
              "type": "entry",
              "name": "fully_obscured",
              "value": "2",
              "summary": "not showing on a screen"
            },
            {
              "type": "entry",
              "name": "pre_unobscured",
              "value": "3",
              "summary": "ready to be unobscured",
              "since": "5"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_position",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A client can set the position information of the surface.",
        "summary": "tizen-specific position"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy this tizen_position object.",
            "summary": "destroy the tizen_position"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set",
          "description": {
            "type": "description",
            "text": "Set the position.",
            "summary": "set the position"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "changed",
          "description": {
            "type": "description",
            "text": "Notify a client when the posion is changed.",
            "summary": "event of position changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_move_resize",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "set_geometry",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "w",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "h",
              "argType": "int"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "geometry_done",
          "description": {
            "type": "description",
            "summary": "Notify of set_geometry request result"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "w",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "h",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "error_state",
              "argType": "uint",
              "enum": "error_state"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error_state",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "invalid_buffer",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "not_supported",
              "value": "2"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_gesture",
      "version": "2",
      "requests": [
        {
          "type": "request",
          "name": "grab_edge_swipe",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            },
            {
              "type": "arg",
              "name": "edge_size",
              "argType": "uint",
              "enum": "edge_size"
            },
            {
              "type": "arg",
              "name": "start_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "end_point",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "ungrab_edge_swipe",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            },
            {
              "type": "arg",
              "name": "edge_size",
              "argType": "uint",
              "enum": "edge_size"
            },
            {
              "type": "arg",
              "name": "start_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "end_point",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "grab_edge_drag",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            },
            {
              "type": "arg",
              "name": "edge_size",
              "argType": "uint",
              "enum": "edge_size"
            },
            {
              "type": "arg",
              "name": "start_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "end_point",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "ungrab_edge_drag",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            },
            {
              "type": "arg",
              "name": "edge_size",
              "argType": "uint",
              "enum": "edge_size"
            },
            {
              "type": "arg",
              "name": "start_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "end_point",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "grab_tap",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "repeats",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "ungrab_tap",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "repeats",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "grab_palm_cover",
          "since": "2",
          "args": []
        },
        {
          "type": "request",
          "name": "ungrab_palm_cover",
          "since": "2",
          "args": []
        },
        {
          "type": "request",
          "name": "select_palm_cover",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "deselect_palm_cover",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "activate_set",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "type",
              "argType": "uint",
              "enum": "type"
            },
            {
              "type": "arg",
              "name": "active",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_gesture.",
            "summary": "destroy the tizen_gesture"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "grab_edge_swipe_notify",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            },
            {
              "type": "arg",
              "name": "edge_size",
              "argType": "uint",
              "enum": "edge_size"
            },
            {
              "type": "arg",
              "name": "start_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "end_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "error",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "edge_swipe",
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "enum": "mode"
            },
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "sx",
              "argType": "int",
              "summary": "x coordinate of touch down point"
            },
            {
              "type": "arg",
              "name": "sy",
              "argType": "int",
              "summary": "y coordinate of touch down point"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            }
          ]
        },
        {
          "type": "event",
          "name": "edge_drag_notify",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            },
            {
              "type": "arg",
              "name": "edge_size",
              "argType": "uint",
              "enum": "edge_size"
            },
            {
              "type": "arg",
              "name": "start_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "end_point",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "error",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "edge_drag",
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "enum": "mode"
            },
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "cx",
              "argType": "int",
              "summary": "x coordinate of center touch point"
            },
            {
              "type": "arg",
              "name": "cy",
              "argType": "int",
              "summary": "y coordinate of center touch point"
            },
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "edge"
            }
          ]
        },
        {
          "type": "event",
          "name": "tap_notify",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "repeats",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "error",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "tap",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "enum": "mode"
            },
            {
              "type": "arg",
              "name": "fingers",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "repeats",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "palm_cover_notify",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "error",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "palm_cover",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "enum": "mode"
            },
            {
              "type": "arg",
              "name": "duration",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "cx",
              "argType": "int",
              "summary": "x coordinate of center touch point"
            },
            {
              "type": "arg",
              "name": "cy",
              "argType": "int",
              "summary": "y coordinate of center touch point"
            },
            {
              "type": "arg",
              "name": "size",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "pressure",
              "argType": "fixed"
            }
          ]
        },
        {
          "type": "event",
          "name": "activate_notify",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "type",
              "argType": "uint",
              "enum": "type"
            },
            {
              "type": "arg",
              "name": "active",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "error",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "invalid_data",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "no_permission",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "no_system_resources",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "grabbed_already",
              "value": "4"
            },
            {
              "type": "entry",
              "name": "not_supported",
              "value": "5"
            }
          ]
        },
        {
          "type": "enum",
          "name": "type",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "edge_swipe",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "edge_drag",
              "value": "2",
              "since": "2"
            },
            {
              "type": "entry",
              "name": "tap",
              "value": "4",
              "since": "2"
            },
            {
              "type": "entry",
              "name": "palm_cover",
              "value": "8",
              "since": "2"
            },
            {
              "type": "entry",
              "name": "pan",
              "value": "16",
              "since": "2"
            },
            {
              "type": "entry",
              "name": "pinch",
              "value": "32",
              "since": "2"
            },
            {
              "type": "entry",
              "name": "palm_swipe",
              "value": "64",
              "since": "2"
            }
          ]
        },
        {
          "type": "enum",
          "name": "mode",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "begin",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "update",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "end",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "done",
              "value": "4"
            }
          ]
        },
        {
          "type": "enum",
          "name": "edge",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "top",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "right",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "bottom",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "left",
              "value": "4"
            }
          ]
        },
        {
          "type": "enum",
          "name": "edge_size",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "full",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "partial",
              "value": "2"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_keyrouter",
      "version": "2",
      "description": {
        "type": "description",
        "text": "In tradition, all the keys in a keyboard and a device on which\nsome keys are attached will be sent to focus surface by default.\nCurrently it's possible to set up each focus for each key in a keyboard and a device.\nTherefore, by setting a key grab for a surface, the owner of the\nsurface will get the key event when it has the key grab for the key.",
        "summary": "an interface to set each focus for each key"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_keygrab",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_keygrab",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_keygrab_status",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_keygrab_list",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "grab_list",
              "argType": "array",
              "summary": "array of two integer variables pairs each pairs consist of keycode and keygrab mode"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_keygrab_list",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "ungrab_list",
              "argType": "array",
              "summary": "array of integer variables meaning keycode wanted to ungrab"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_keygrab_list",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_register_none_key",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "data",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_keyregister_status",
          "args": [
            {
              "type": "arg",
              "name": "data",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_input_config",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "config_mode",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_keyrouter.",
            "summary": "destroy the tizen_keyrouter"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "keygrab_notify",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "error",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "keygrab_notify_list",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "grab_result",
              "argType": "array",
              "summary": "array of three integer variables pairs each pairs consist of keycode, keygrab mode and keygrab result"
            }
          ]
        },
        {
          "type": "event",
          "name": "getgrab_notify_list",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "grab_result",
              "argType": "array",
              "summary": "array of two integer variables pairs each pairs consist of keycode, keygrab mode"
            }
          ]
        },
        {
          "type": "event",
          "name": "set_register_none_key_notify",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "keyregister_notify",
          "args": [
            {
              "type": "arg",
              "name": "status",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "set_input_config_notify",
          "args": [
            {
              "type": "arg",
              "name": "status",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "key_cancel",
          "args": [
            {
              "type": "arg",
              "name": "key",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "event_surface",
          "since": "2",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "key",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "no error"
            },
            {
              "type": "entry",
              "name": "invalid_surface",
              "value": "1",
              "summary": "Given surface is invalid."
            },
            {
              "type": "entry",
              "name": "invalid_key",
              "value": "2",
              "summary": "Given key is invalid."
            },
            {
              "type": "entry",
              "name": "invalid_mode",
              "value": "3",
              "summary": "Given mode is invalid."
            },
            {
              "type": "entry",
              "name": "grabbed_already",
              "value": "4",
              "summary": "The key has been grabbed already."
            },
            {
              "type": "entry",
              "name": "no_permission",
              "value": "5",
              "summary": "The wl client has no permission to grab the key."
            },
            {
              "type": "entry",
              "name": "no_system_resources",
              "value": "6",
              "summary": "System resources are insufficient."
            },
            {
              "type": "entry",
              "name": "invalid_array",
              "value": "7",
              "summary": "Given array has invalid pairs or data type."
            }
          ]
        },
        {
          "type": "enum",
          "name": "mode",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This value is used to set a mode for a key grab. With this mode and\nthe order of the surface between surfaces' stack, the compositor will determine the destination client\nsurface.",
            "summary": "mode for a key grab"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none"
            },
            {
              "type": "entry",
              "name": "shared",
              "value": "1",
              "summary": "mode to get a key grab with the other client surfaces when the focused client surface gets the key"
            },
            {
              "type": "entry",
              "name": "topmost",
              "value": "2",
              "summary": "mode to get a key grab when the client surface is the top most surface"
            },
            {
              "type": "entry",
              "name": "overridable_exclusive",
              "value": "3",
              "summary": "mode to get a key grab exclusively, overridably regardless of the order in the surface stack"
            },
            {
              "type": "entry",
              "name": "exclusive",
              "value": "4",
              "summary": "mode to get a key grab exclusively regardless of the order in surface stack"
            },
            {
              "type": "entry",
              "name": "registered",
              "value": "5",
              "summary": "mode to get a key grab only when a requesting surface is on top among the registering surfaces for the key"
            }
          ]
        },
        {
          "type": "enum",
          "name": "config_mode",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This value is used to set a mode for a window. With this mode and\nthe order of the surface between surfaces' stack, the compositor will determine the destination client\nsurface.",
            "summary": "mode for setting specific property for Key delivery"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none"
            },
            {
              "type": "entry",
              "name": "invisible_set",
              "value": "1",
              "summary": "mode to set window to enable send event to invisible window below in stack"
            },
            {
              "type": "entry",
              "name": "invisible_get",
              "value": "2",
              "summary": "mode to set window to get event to invisible state if any top window has set register_set"
            },
            {
              "type": "entry",
              "name": "num_key_focus",
              "value": "3",
              "summary": "mode to register for num keys for focus window"
            },
            {
              "type": "entry",
              "name": "picture_off",
              "value": "4",
              "summary": "mode to set picture off for particular key"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_screenshooter",
      "version": "3",
      "description": {
        "type": "description",
        "text": "Clients can get a screenmirror object from this interface.",
        "summary": "interface for tizen-screenshooter"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_screenmirror",
          "description": {
            "type": "description",
            "text": "Before using screenmirror, a client should get a screenmirror object from display\nserver.",
            "summary": "create a screenmirror object"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "new screenmirror object",
              "interface": "tizen_screenmirror"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "summary": "output object for screenmirror",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_oneshot_auto_rotation",
          "description": {
            "type": "description",
            "text": "Client can set auto rotation value for one shot.",
            "summary": "set screen shot auto rotation value"
          },
          "args": [
            {
              "type": "arg",
              "name": "set",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_screenshooter.",
            "summary": "destroy the tizen_screenshooter"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "shoot",
          "since": "3",
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "format",
          "description": {
            "type": "description",
            "text": "The tbm format codes match the #defines in tbm_surface.h. The formats actually\nsupported by the compositor will be reported by the format event.",
            "summary": "supported format for screenshooter"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "screenshooter_notify",
          "description": {
            "type": "description",
            "text": "Clients can get notification of screenshooter.",
            "summary": "send notification of screenshooter"
          },
          "args": [
            {
              "type": "arg",
              "name": "noti",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "since": "3",
          "args": []
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_screenmirror",
      "version": "3",
      "description": {
        "type": "description",
        "text": "A client can use this interface to get stream images of screen. Before starting,\nqueue all buffers. Then, start a screenmirror. After starting, a dequeued event\nwill occur when drawing a captured image on a buffer is finished. You might\nneed to queue the dequeued buffer again to get a new image from display server.",
        "summary": "interface for screenmirror"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "set_stretch",
          "args": [
            {
              "type": "arg",
              "name": "stretch",
              "argType": "uint",
              "summary": "stretch type for screenmirror"
            }
          ]
        },
        {
          "type": "request",
          "name": "queue",
          "description": {
            "type": "description",
            "summary": "queue a buffer"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "summary": "buffer object for screenmirror",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "dequeue",
          "description": {
            "type": "description",
            "text": "A user can dequeue a buffer from display server when he wants to take back it from server.",
            "summary": "dequeue a buffer"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "summary": "buffer object for screenmirror",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "start",
          "args": []
        },
        {
          "type": "request",
          "name": "stop",
          "args": []
        },
        {
          "type": "request",
          "name": "set_auto_rotation",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Client can set auto rotation value for screenmirror.",
            "summary": "set screenmirror auto rotation value"
          },
          "args": [
            {
              "type": "arg",
              "name": "set",
              "argType": "uint"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "dequeued",
          "description": {
            "type": "description",
            "text": "occurs when drawing a captured image on a buffer is finished",
            "summary": "dequeued event"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "summary": "dequeued buffer which contains a captured image",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "content",
          "description": {
            "type": "description",
            "text": "occurs when the content of a captured image is changed. (normal or video)",
            "summary": "content changed event"
          },
          "args": [
            {
              "type": "arg",
              "name": "content",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "stop",
          "description": {
            "type": "description",
            "text": "occurs when the screenmirror is stopped eventually",
            "summary": "stop event"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "content",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "normal",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "video",
              "value": "1"
            }
          ]
        },
        {
          "type": "enum",
          "name": "stretch",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "keep_ratio",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "fully",
              "value": "1"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_video",
      "version": "1",
      "description": {
        "type": "description",
        "text": "Clients can get the video information that the compositor can handle from this interface.",
        "summary": "interface for tizen-video"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_object",
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "tizen_video_object"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_viewport",
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "tizen_viewport"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_video.",
            "summary": "destroy the tizen_video"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "format",
          "description": {
            "type": "description",
            "text": "The tbm format codes match the #defines in tbm_surface.h. The formats actually\nsupported by the compositor will be reported by the format event.",
            "summary": "supported format for video"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "object_exists",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "viewport_exists",
              "value": "2"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_video_object",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "set_attribute",
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "follow_topmost_visibility",
          "description": {
            "type": "description",
            "text": "If tizen_video_object.follow_topmost_visibility is applied to a video_object,\nIt will be video mute control based on topmost visibility.",
            "summary": "follow mute control change of a topmost surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "unfollow_topmost_visibility",
          "description": {
            "type": "description",
            "text": "If tizen_video_object.unfollow_topmost_visibility is applied to a video_object,\nIt will not be video mute control based on topmost visibility.",
            "summary": "unfollow mute control change of a topmost surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "allowed_attribute",
          "description": {
            "type": "description",
            "text": "If tizen_video_object.allowed_attribute is applied to a video_object,\nset_attribute request will be deliever to tdm backend directly.",
            "summary": "allowed_attribute"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "disallowed_attribute",
          "description": {
            "type": "description",
            "text": "If tizen_video_object.disallowed_attribute is applied to a video_object,\nIt would be tdm_attribute call when topmost showing.",
            "summary": "disallowed_attribute"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "attribute",
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "size",
          "args": [
            {
              "type": "arg",
              "name": "min_w",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "min_h",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "max_w",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "max_h",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "prefer_align",
              "argType": "int"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_subsurface_watcher",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_subsurface_watcher.",
            "summary": "destroy the tizen_subsurface_watcher"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "message",
          "args": [
            {
              "type": "arg",
              "name": "value",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "msg",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "success",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "parent_id_invalid",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "parent_id_destroyed",
              "value": "2"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_viewport",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This is the alternative and convenient solution of wl_viewport to present\na surface on screen.\n\nThe below five functions can be replaced with this interface. The below\nfunctions will be ignored after applying this interface to a surface.\n- wl_surface.set_buffer_transform\n- wl_surface.set_buffer_scale\n- wl_subsurface.set_position\n- wl_viewport.set_source\n- wl_viewport.set_destination\n\nwl_viewport.set_source is very complicated especially when the buffer of\nwl_surface is transformed by wl_surface.set_buffer_transform. And when the\nparent is resized, if we want to change the geometry of a subsurface also,\nwl_subsurface.set_position and wl_viewport.set_destination should be called\neverytime the parent is resized in client side. This makes difficult to\nsynchronize a parent surface and a subsurface on screen.\n\ntizen_viewport allows clients to set the relative geometry to a subsurface\nin a parent surface. Whenever a parent surface is resized, the geometry of\na subsurface will be calculated, moved and resized automatically by a\ncompositor. The tizen_viewport is specified in the coordinates of a\nsubsurface's parent.\n\nIf tizen_viewport is applied to a shell surface(toplevel), the all value related\nwith x, y pos of tizen_viewport and tizen_destination_mode interface will be ignored.\n\nThe below 3 functions don't consider the transform of a parent's surface.\n- tizen_viewport.set_source\n- tizen_viewport.set_destination\n- tizen_viewport.set_destination_ratio\n\nFurthermore, tizen_destination_mode.follow_parent_transform is called,\ntizen_viewport will consider the transform of a parent surface when applying\nthe destination mode to a subsurface. If tizen_destination_mode.follow_parent_transform\nis applied to a shell surface, it will be ignored.\n\nThe destination will be cropped by a parent surface.\n\nThe change will be applied when wl_surface.commit is called.",
        "summary": "the viewport for a surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "set_transform",
          "description": {
            "type": "description",
            "text": "The accepted values for the transform parameter are the values for wl_output.transform\naccording to the output transform.\n\nThe tizen_viewport.set_transform is applied only to itself. Basically it\ndoesn't effect the transform of its subsurfaces. That is, if 90 transform is\nsetted and its subsurface still has 0 transform, its subsurface won't be\nrotated.\n\nIf needed to rotate the subsurface depended on a parent surface,\ntizen_destination_mode.follow_parent_transform will make it possible.",
            "summary": "set the transform of a surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "transform",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_source",
          "description": {
            "type": "description",
            "text": "The source rectangle won't be changed when a parent is resized. If it needs\nto be changed, tizen_viewport.set_source should be called with new values.",
            "summary": "set the source rectalge of a wl_buffer"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_destination",
          "description": {
            "type": "description",
            "text": "The destination geometry won't be changed when a parent is resized. If it\nneeds to be changed, tizen_viewport.set_destination should be called with\nnew values.\n\nIf tizen_viewport is applied to a shell surface(toplevel), the x, y value of\ntizen_viewport.set_destination will be ignored.",
            "summary": "set the destination geometry of a surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_destination_ratio",
          "description": {
            "type": "description",
            "text": "The destination rectangle of a subsurface will be automatically changed\nwhen a parent is resized. This allows the real number between 0.0 and 1.0.\nSee wl_fixed_from_double and wl_fixed_to_double.\n\nIf tizen_viewport is applied to a shell surface(toplevel), the x, y value of\ntizen_viewport.set_destination_ratio will be ignored.",
            "summary": "set the ratio destination rectalge in a parent surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "fixed"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_destination_mode",
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "tizen_destination_mode"
            }
          ]
        },
        {
          "type": "request",
          "name": "query_parent_size",
          "since": "1",
          "description": {
            "type": "description",
            "text": "A client can asks the display server to send the size of tizen_viewport object's\nparent surface. Once a client requests it, the \"parent_size\" event will be sent\nwhenever the parent surface's size is changed.",
            "summary": "set the ratio destination rectalge in a parent surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "follow_parent_transform",
          "description": {
            "type": "description",
            "text": "The real transform of a subsurface is (parent's transform + subsurface's transform).\nThe subsurface will be rotated automatically when the parent is rotated.\n\nIf tizen_viewport.follow_parent_transform is applied to a shell surface(toplevel),\nit will be ignored.",
            "summary": "follow the transform change of a parent surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "unfollow_parent_transform",
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "destination_changed",
          "args": [
            {
              "type": "arg",
              "name": "transform",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "parent_size",
          "args": [
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_destination_mode",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The destination rectangle will be automatically changed when a parent is\nresized. When tizen_destination_mode.set is called, the value of\ntizen_viewport.set_destination and tizen_viewport.set_destination_ratio\nwill be ignored.\n\nThe destination of a surface is decided by the mode, ratio, scale, offset\nand align values. The ratio, scale, offset and align will be applied\nsequentially.\n\nThe change will be applied when wl_surface.commit is called.",
        "summary": "the destination mode for a surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "follow_parent_transform",
          "description": {
            "type": "description",
            "text": "The real transform of a subsurface is (parent's transform + subsurface's transform).\nThat is, the subsurface will be rotated automatically when the parent is rotated.\n\nIf tizen_destination_mode.follow_parent_transform is applied to a shell surface(toplevel),\nit will be ignored.",
            "summary": "follow the transform change of a parent surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "unfollow_parent_transform",
          "args": []
        },
        {
          "type": "request",
          "name": "set",
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "enum": "type"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_ratio",
          "description": {
            "type": "description",
            "text": "This allows the real number. See wl_fixed_from_double and wl_fixed_to_double.",
            "summary": "set the ratio of the destination rectangle of a subsurface"
          },
          "args": [
            {
              "type": "arg",
              "name": "horizontal",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "vertical",
              "argType": "fixed"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_scale",
          "description": {
            "type": "description",
            "text": "This allows the real number. See wl_fixed_from_double and wl_fixed_to_double.",
            "summary": "set the scale of the destination rectangle of a subsurface"
          },
          "args": [
            {
              "type": "arg",
              "name": "horizontal",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "vertical",
              "argType": "fixed"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_align",
          "description": {
            "type": "description",
            "text": "This allows the real number between 0.0 and 1.0. See wl_fixed_from_double and\nwl_fixed_to_double.",
            "summary": "set the align of the destination rectangle of a subsurface"
          },
          "args": [
            {
              "type": "arg",
              "name": "horizontal",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "vertical",
              "argType": "fixed"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_offset",
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "w",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "h",
              "argType": "int"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_type",
              "value": "0"
            }
          ]
        },
        {
          "type": "enum",
          "name": "type",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "letter_box",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "origin",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "full",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "cropped_full",
              "value": "4"
            },
            {
              "type": "entry",
              "name": "origin_or_letter",
              "value": "5"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_embedded_compositor",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The global obejct. Wayland has 3 type of compositor, embedded compositor is one of them.\nBut tizen application is sendboxing by smack, then a application not allow commutication to other application by socket.\nSo system or session compositor create socket and send to embedded compostior.",
        "summary": "global embedded compositor object"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_socket",
          "description": {
            "type": "description",
            "text": "The get_socket request ask the server to create socket and emit socket event.",
            "summary": "create new socket"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "socket",
          "description": {
            "type": "description",
            "text": "Sent immediately after get_socket request",
            "summary": "socket fd"
          },
          "args": [
            {
              "type": "arg",
              "name": "sock_fd",
              "argType": "fd"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_input_device_manager",
      "version": "7",
      "description": {
        "type": "description",
        "text": "Tizen input device manager is a global interface. This object has device add/remove events\nto provide tizen input device object to a client. This allows for a client to get the con\n\nBe sure to bind this interface after binding wl_seat interface.\nTizen input device manager interface will only provide device add/remove event for devices\nwhich belongs to the wl_seat object(s) bound by the client. Therefore, the compositor needs to\ncreate/send the device add/remove event only for the current client's seat(s).",
        "summary": "global input device manager object"
      },
      "requests": [
        {
          "type": "request",
          "name": "block_events",
          "description": {
            "type": "description",
            "text": "This request allows a client to request to block one or more events for its purpose.\nBy specifying class as an argument in the request, the events belongs to the class will be blocked\nduring the given duration. Note that an error event will be sent if there is any error.",
            "summary": "request to block sending event(s)"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": ""
            },
            {
              "type": "arg",
              "name": "clas",
              "argType": "uint",
              "enum": "clas"
            },
            {
              "type": "arg",
              "name": "duration",
              "argType": "uint",
              "summary": "time duration with millisecond granularity"
            }
          ]
        },
        {
          "type": "request",
          "name": "unblock_events",
          "description": {
            "type": "description",
            "text": "This request allows a client to request to release the existing block for the client.\nNote that no error event will be sent if there is no existing block for the client.",
            "summary": "request to unblock sending event(s)"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": ""
            }
          ]
        },
        {
          "type": "request",
          "name": "init_generator",
          "description": {
            "type": "description",
            "summary": "initialize input generator system"
          },
          "args": [
            {
              "type": "arg",
              "name": "clas",
              "argType": "uint",
              "enum": "clas"
            }
          ]
        },
        {
          "type": "request",
          "name": "deinit_generator",
          "description": {
            "type": "description",
            "summary": "deinitialize input generator system"
          },
          "args": [
            {
              "type": "arg",
              "name": "clas",
              "argType": "uint",
              "enum": "clas"
            }
          ]
        },
        {
          "type": "request",
          "name": "generate_key",
          "description": {
            "type": "description",
            "summary": "generate a key event using specific or default device"
          },
          "args": [
            {
              "type": "arg",
              "name": "keyname",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "pressed",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "generate_pointer",
          "description": {
            "type": "description",
            "summary": "generate a pointer event using specific or default device"
          },
          "args": [
            {
              "type": "arg",
              "name": "type",
              "argType": "uint",
              "enum": "pointer_event_type"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "button",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "generate_touch",
          "description": {
            "type": "description",
            "summary": "generate a touch event using specific or default device"
          },
          "args": [
            {
              "type": "arg",
              "name": "type",
              "argType": "uint",
              "enum": "pointer_event_type"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "finger",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "pointer_warp",
          "description": {
            "type": "description",
            "summary": "warp pointer to the relative position to the given surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "fixed"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "fixed"
            }
          ]
        },
        {
          "type": "request",
          "name": "init_generator_with_name",
          "since": "2",
          "description": {
            "type": "description",
            "summary": "initialize input generator system with name"
          },
          "args": [
            {
              "type": "arg",
              "name": "clas",
              "argType": "uint",
              "enum": "clas"
            },
            {
              "type": "arg",
              "name": "name",
              "argType": "string"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_input_device_manager.",
            "summary": "destroy the tizen_input_device_manager"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "generate_axis",
          "since": "3",
          "description": {
            "type": "description",
            "text": "When the server got this request, the server choices generate a event directly or just save values.\nPointer axes (such as wheel/hwheel) are delivered to clients independantly about pointer events,\nbut touch axes are delivered to normal touch events(begin/update/end).\nSo the server just save touch axes before generate touch request is came and send a touch event\ninclude saved touch axes value.",
            "summary": "generate a pointer/touch axes event using specific or default device"
          },
          "args": [
            {
              "type": "arg",
              "name": "type",
              "argType": "uint",
              "enum": "axis_type"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "fixed",
              "summary": "axis value"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_touch_count",
          "since": "4",
          "description": {
            "type": "description",
            "text": "This request only changes system's touch count.\nSo this request doesn't change already connected touch devices's max count.\nThis will influence to user created device using input generator.\nInput generator creates touch device only supports default touch count.\nBut if user set touch count before create a Input generator device,\nuser can create touch device has touch count user wanted.\nBut some systems has their own maximum touch count.\nIn that case this request returns error not_allowed.",
            "summary": "set a max slot of touch"
          },
          "args": [
            {
              "type": "arg",
              "name": "max_count",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "init_generator_with_sync",
          "since": "5",
          "description": {
            "type": "description",
            "summary": "initialize input generator system with name synchronously"
          },
          "args": [
            {
              "type": "arg",
              "name": "clas",
              "argType": "uint",
              "enum": "clas"
            },
            {
              "type": "arg",
              "name": "name",
              "argType": "string"
            }
          ]
        },
        {
          "type": "request",
          "name": "keyboard_grab",
          "since": "6",
          "description": {
            "type": "description",
            "summary": "grab keyboard events if device is a certial subclass"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "subclas",
              "argType": "uint",
              "enum": "subclas"
            }
          ]
        },
        {
          "type": "request",
          "name": "keyboard_ungrab",
          "since": "6",
          "description": {
            "type": "description",
            "summary": "grab keyboard events"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "grab_relative_motion",
          "since": "7",
          "description": {
            "type": "description",
            "summary": "grab relative motion"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "boundary",
              "argType": "uint",
              "enum": "boundary"
            }
          ]
        },
        {
          "type": "request",
          "name": "ungrab_relative_motion",
          "since": "7",
          "description": {
            "type": "description",
            "summary": "ungrab relative motion"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "device_add",
          "description": {
            "type": "description",
            "text": "The device add/remove notification is going to be sent when a physical/logical device is\nadded/removed to/from the given seat. Note that a tizen input device object can be assigned to\na wl_seat and can also be assigned to the other wl_seat at any time. Whenever a relationship between\na tizen input device object changes, device remove event from the current wl_seat object will be made\nand device add event to the other wl_seat object will also be mode.",
            "summary": "device addition event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "identifier",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "device",
              "argType": "new_id",
              "interface": "tizen_input_device"
            },
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "interface": "wl_seat",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "device_remove",
          "description": {
            "type": "description",
            "text": "The device add/remove notification is going to be sent when a physical/logical device is\nadded/removed to/from the given seat. Note that a tizen input device object can be assigned to\na wl_seat and can also be assigned to the other wl_seat at any time. Whenever a relationship between\na tizen input device object changes, device remove event from the current wl_seat object will be made\nand device add event to the other wl_seat object will also be mode.",
            "summary": "device removal event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "identifier",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "device",
              "argType": "object",
              "interface": "tizen_input_device"
            },
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "interface": "wl_seat",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "error",
          "description": {
            "type": "description",
            "summary": "error event"
          },
          "args": [
            {
              "type": "arg",
              "name": "errorcode",
              "argType": "uint",
              "enum": "error"
            }
          ]
        },
        {
          "type": "event",
          "name": "block_expired",
          "description": {
            "type": "description",
            "text": "This event will be sent if the duration of existing block is expired.\nNote that no block expired event will be sent if there is no block for the client.",
            "summary": "block expiration event"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "max_touch_count",
          "since": "4",
          "description": {
            "type": "description",
            "text": "Each touch devices has their own touch counts can be supported.\nSo a server controls maximum touches in this system to maintain resources efficiently.\nSometimes a server controls maximum touches using a predefined configuration option.\nSometimes a server ensures maximum touches to be supported by touch device.\nIf a server do not use configuration option, maximum touches can be updated when new touch devices are connected.\nSo this events can be sent to client, when a first touch device is added or maximum touches is changed.",
            "summary": "notify max slot of touch device is updated"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "max_count",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "interface": "wl_seat",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "event_boundary",
          "since": "7",
          "description": {
            "type": "description",
            "summary": "event indicates which boundary is associated with a relative_motion event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "boundary",
              "argType": "uint",
              "enum": "boundary"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "clas",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "device class"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none of class"
            },
            {
              "type": "entry",
              "name": "mouse",
              "value": "1",
              "summary": "mouse class"
            },
            {
              "type": "entry",
              "name": "keyboard",
              "value": "2",
              "summary": "keyboard class"
            },
            {
              "type": "entry",
              "name": "touchscreen",
              "value": "4",
              "summary": "touchscreen class"
            }
          ]
        },
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "no error"
            },
            {
              "type": "entry",
              "name": "no_permission",
              "value": "1",
              "summary": "no permission"
            },
            {
              "type": "entry",
              "name": "invalid_class",
              "value": "2",
              "summary": "invalid class"
            },
            {
              "type": "entry",
              "name": "blocked_already",
              "value": "3",
              "summary": "blocked already by the other client"
            },
            {
              "type": "entry",
              "name": "no_system_resources",
              "value": "4",
              "summary": "no system resources such as memory lack"
            },
            {
              "type": "entry",
              "name": "invalid_parameter",
              "value": "5",
              "summary": "argument is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_surface",
              "value": "6",
              "summary": "the given surface is not visible or pointer is not on the given surface"
            },
            {
              "type": "entry",
              "name": "no_pointer_available",
              "value": "7",
              "summary": "there is no pointer available to warp"
            },
            {
              "type": "entry",
              "name": "not_allowed",
              "value": "8",
              "summary": "this request is not allowed in this system"
            }
          ]
        },
        {
          "type": "enum",
          "name": "pointer_event_type",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "begin",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "update",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "end",
              "value": "2"
            }
          ]
        },
        {
          "type": "enum",
          "name": "axis_type",
          "since": "3",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "no axis type"
            },
            {
              "type": "entry",
              "name": "wheel",
              "value": "1",
              "summary": "pointer vertical wheel axis"
            },
            {
              "type": "entry",
              "name": "hwheel",
              "value": "2",
              "summary": "pointer horizental wheel axis"
            },
            {
              "type": "entry",
              "name": "radius_x",
              "value": "3",
              "summary": "touch radius of x axis of an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "radius_y",
              "value": "4",
              "summary": "touch radius of y axis of an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "pressure",
              "value": "5",
              "summary": "touch pressure in an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "angle",
              "value": "6",
              "summary": "touch angle in an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "palm",
              "value": "7",
              "summary": "touch palm in an event area e.g. touching area with a finger or a pen"
            }
          ]
        },
        {
          "type": "enum",
          "name": "subclas",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "device subclass"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "1",
              "summary": "none of subclass"
            },
            {
              "type": "entry",
              "name": "remocon",
              "value": "2",
              "summary": "remocon subclass"
            },
            {
              "type": "entry",
              "name": "virtual_keyboard",
              "value": "4",
              "summary": "virtual_keyboard subclass"
            }
          ]
        },
        {
          "type": "enum",
          "name": "boundary",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "top",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "right",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "bottom",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "left",
              "value": "4"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_input_device",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The tizen_input_device interface represents one or more input devices associated with a physical/logical\ninput device. This interface provides device specific information/events to allows for client to identify\nthe source device of an event or to get the additional axes/attributes of a device.\nNote that a tizen_input_device object can be used for a physical input device and can also be used for a\ngroup of input devices. e.g. a group of mouse devices",
        "summary": "tizen input device object"
      },
      "requests": [
        {
          "type": "request",
          "name": "select_axes",
          "description": {
            "type": "description",
            "summary": "request for selecting some of axes among the axes supported by a tizen_input_device object"
          },
          "args": [
            {
              "type": "arg",
              "name": "axes",
              "argType": "array",
              "summary": "array of axis num"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "summary": "release the tizen_input_device object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "device_info",
          "description": {
            "type": "description",
            "summary": "event contains device information"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "clas",
              "argType": "uint",
              "enum": "clas"
            },
            {
              "type": "arg",
              "name": "subclas",
              "argType": "uint",
              "enum": "subclas"
            },
            {
              "type": "arg",
              "name": "axes",
              "argType": "array",
              "summary": "array of axis enum"
            }
          ]
        },
        {
          "type": "event",
          "name": "event_device",
          "description": {
            "type": "description",
            "summary": "event indicates the source device associated with a wl_pointer/keyboard/touch event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "name",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "time",
              "argType": "uint",
              "summary": "timestamp with millisecond granularity"
            }
          ]
        },
        {
          "type": "event",
          "name": "axis",
          "description": {
            "type": "description",
            "summary": "axis change event"
          },
          "args": [
            {
              "type": "arg",
              "name": "axis_type",
              "argType": "uint",
              "enum": "axis_type"
            },
            {
              "type": "arg",
              "name": "value",
              "argType": "fixed",
              "summary": "axis value"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "clas",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "device class"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none of class"
            },
            {
              "type": "entry",
              "name": "keyboard",
              "value": "2",
              "summary": "keyboard class"
            },
            {
              "type": "entry",
              "name": "mouse",
              "value": "3",
              "summary": "mouse class"
            },
            {
              "type": "entry",
              "name": "touchscreen",
              "value": "4",
              "summary": "touchscreen class"
            }
          ]
        },
        {
          "type": "enum",
          "name": "subclas",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "device subclass"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none of subclass"
            }
          ]
        },
        {
          "type": "enum",
          "name": "axis_type",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "axis type enums which can be supported by a device"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "radius of x axis of an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "radius_x",
              "value": "1",
              "summary": "radius of x axis of an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "radius_y",
              "value": "2",
              "summary": "radius of y axis of an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "pressure",
              "value": "3",
              "summary": "pressure in an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "angle",
              "value": "4",
              "summary": "angle in an event area e.g. touching area with a finger or a pen"
            },
            {
              "type": "entry",
              "name": "detent",
              "value": "5",
              "summary": "detent value e.g. moved distance with a rotary device"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_launchscreen",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "create_img",
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "new tizen_launch_image object",
              "interface": "tizen_launch_image"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_launchscreen.",
            "summary": "destroy the tizen_launchscreen"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_launch_image",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "launch",
          "args": [
            {
              "type": "arg",
              "name": "file",
              "argType": "string"
            },
            {
              "type": "arg",
              "name": "file_type",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "color_depth",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "rotation",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "indicator",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "options",
              "argType": "array"
            }
          ]
        },
        {
          "type": "request",
          "name": "owner",
          "args": [
            {
              "type": "arg",
              "name": "pid",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "show",
          "args": []
        },
        {
          "type": "request",
          "name": "hide",
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "file_type",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "img",
              "value": "0",
              "summary": "splash image file path"
            },
            {
              "type": "entry",
              "name": "edj",
              "value": "1",
              "summary": "splash edj file path"
            }
          ]
        },
        {
          "type": "enum",
          "name": "indicator",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "off",
              "value": "0",
              "summary": "splash hide indicator"
            },
            {
              "type": "entry",
              "name": "on",
              "value": "1",
              "summary": "splash show indicator"
            }
          ]
        },
        {
          "type": "enum",
          "name": "rotation",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "0",
              "value": "0",
              "summary": "rotation angle 0 degree"
            },
            {
              "type": "entry",
              "name": "90",
              "value": "90",
              "summary": "rotation angle 90 degree"
            },
            {
              "type": "entry",
              "name": "180",
              "value": "180",
              "summary": "rotation angle 180 degree"
            },
            {
              "type": "entry",
              "name": "270",
              "value": "270",
              "summary": "rotation angle 270 degree"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_effect",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "start",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "type",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "end",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "type",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "type",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "summary": "none"
            },
            {
              "type": "entry",
              "name": "show",
              "value": "1",
              "summary": "show effect of window"
            },
            {
              "type": "entry",
              "name": "hide",
              "value": "2",
              "summary": "hide effect of window"
            },
            {
              "type": "entry",
              "name": "restack",
              "value": "3",
              "summary": "restack effect of window"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_display_policy",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "set_window_brightness",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "brightness",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_display_policy.",
            "summary": "destroy the tizen_display_policy"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "window_brightness_done",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "brightness",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "error_state",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error_state",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "permission_denied",
              "value": "1"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_indicator",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "set_state",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "state",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_opacity_mode",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "mode",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_visible_type",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "type",
              "argType": "int"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "flick",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "occur the flick event",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "type",
              "argType": "int"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "state",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "unknown",
              "value": "0",
              "summary": "unknown"
            },
            {
              "type": "entry",
              "name": "off",
              "value": "1",
              "summary": "can not show indicator"
            },
            {
              "type": "entry",
              "name": "on",
              "value": "2",
              "summary": "can show indicator"
            }
          ]
        },
        {
          "type": "enum",
          "name": "opacity_mode",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "unknown",
              "value": "0",
              "summary": "unknown"
            },
            {
              "type": "entry",
              "name": "opaque",
              "value": "1",
              "summary": "opaque mode"
            },
            {
              "type": "entry",
              "name": "translucent",
              "value": "2",
              "summary": "translucent mode"
            },
            {
              "type": "entry",
              "name": "transparent",
              "value": "3",
              "summary": "transparent all mode"
            },
            {
              "type": "entry",
              "name": "bg_transparent",
              "value": "4",
              "summary": "transparent only background mode"
            }
          ]
        },
        {
          "type": "enum",
          "name": "visible_type",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "hidden",
              "value": "0",
              "summary": "hidden type indicator"
            },
            {
              "type": "entry",
              "name": "shown",
              "value": "1",
              "summary": "shown type indicator"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "tizen_clipboard",
      "version": "2",
      "description": {
        "type": "description",
        "text": "This interface provides some requests and events about clipboard for other clients.",
        "summary": "an interface for requests and event about clipboard"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "args": []
        },
        {
          "type": "request",
          "name": "show",
          "description": {
            "type": "description",
            "summary": "request for show clipboard"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "hide",
          "description": {
            "type": "description",
            "summary": "request for hide clipboard"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_data_only",
          "since": "2",
          "description": {
            "type": "description",
            "text": "A wayland client can notify of that the client is data only mode.\nThe data only mode means that this wayland client doesn't have any\nwl_surfaces at all but it wants to use wl_data_device for some data\noperations.",
            "summary": "request for setting data only mode for this wl_client"
          },
          "args": [
            {
              "type": "arg",
              "name": "set",
              "argType": "uint"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "data_selected",
          "description": {
            "type": "description",
            "summary": "announce data are selected by clipboard"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "allowed_data_only",
          "since": "2",
          "description": {
            "type": "description",
            "summary": "event to notify if data only set is allowed or not"
          },
          "args": [
            {
              "type": "arg",
              "name": "allowed",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_screen_rotation",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "get_ignore_output_transform",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_screen_rotation.",
            "summary": "destroy the tizen_screen_rotation"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "ignore_output_transform",
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "ignore",
              "argType": "uint"
            }
          ]
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_renderer",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "get_renderer_surface",
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "tizen_renderer_surface"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "the surface object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_renderer",
            "summary": "destroy the tizen_renderer"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "tizen_renderer_surface",
      "version": "1",
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the tizen_renderer_surface",
            "summary": "destroy the tizen_renderer_surface"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "redraw_request",
          "args": []
        }
      ],
      "enums": []
    }
  ]
}
