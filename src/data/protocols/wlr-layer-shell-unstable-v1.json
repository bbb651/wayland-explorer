{
  "type": "protocol",
  "name": "wlr_layer_shell_unstable_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2017 Drew DeVault\n\nPermission to use, copy, modify, distribute, and sell this\nsoftware and its documentation for any purpose is hereby granted\nwithout fee, provided that the above copyright notice appear in\nall copies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nthe copyright holders not be used in advertising or publicity\npertaining to distribution of the software without specific,\nwritten prior permission.  The copyright holders make no\nrepresentations about the suitability of this software for any\npurpose.  It is provided \"as is\" without express or implied\nwarranty.\n\nTHE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY\nSPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\nAN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zwlr_layer_shell_v1",
      "version": "5",
      "description": {
        "type": "description",
        "text": "Clients can use this interface to assign the surface_layer role to\nwl_surfaces. Such surfaces are assigned to a \"layer\" of the output and\nrendered with a defined z-depth respective to each other. They may also be\nanchored to the edges and corners of a screen and specify input handling\nsemantics. This interface should be suitable for the implementation of\nmany desktop shell components, and a broad number of other applications\nthat interact with the desktop.",
        "summary": "create surfaces that are layers of the desktop"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_layer_surface",
          "description": {
            "type": "description",
            "text": "Create a layer surface for an existing surface. This assigns the role of\nlayer_surface, or raises a protocol error if another role is already\nassigned.\n\nCreating a layer surface from a wl_surface which has a buffer attached\nor committed is a client error, and any attempts by a client to attach\nor manipulate a buffer prior to the first layer_surface.configure call\nmust also be treated as errors.\n\nAfter creating a layer_surface object and setting it up, the client\nmust perform an initial commit without any buffer attached.\nThe compositor will reply with a layer_surface.configure event.\nThe client must acknowledge it and is then allowed to attach a buffer\nto map the surface.\n\nYou may pass NULL for output to allow the compositor to decide which\noutput to use. Generally this will be the one that the user most\nrecently interacted with.\n\nClients can specify a namespace that defines the purpose of the layer\nsurface.",
            "summary": "create a layer_surface from a surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "zwlr_layer_surface_v1"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "allowNull": "true",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "layer",
              "argType": "uint",
              "summary": "layer to add this surface to",
              "enum": "layer"
            },
            {
              "type": "arg",
              "name": "namespace",
              "argType": "string",
              "summary": "namespace for the layer surface"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This request indicates that the client will not use the layer_shell\nobject any more. Objects that have been created through this instance\nare not affected.",
            "summary": "destroy the layer_shell object"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "role",
              "value": "0",
              "summary": "wl_surface has another role"
            },
            {
              "type": "entry",
              "name": "invalid_layer",
              "value": "1",
              "summary": "layer value is invalid"
            },
            {
              "type": "entry",
              "name": "already_constructed",
              "value": "2",
              "summary": "wl_surface has a buffer attached or committed"
            }
          ]
        },
        {
          "type": "enum",
          "name": "layer",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These values indicate which layers a surface can be rendered in. They\nare ordered by z depth, bottom-most first. Traditional shell surfaces\nwill typically be rendered between the bottom and top layers.\nFullscreen shell surfaces are typically rendered at the top layer.\nMultiple surfaces can share a single layer, and ordering within a\nsingle layer is undefined.",
            "summary": "available layers for surfaces"
          },
          "entries": [
            {
              "type": "entry",
              "name": "background",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "bottom",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "top",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "overlay",
              "value": "3"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zwlr_layer_surface_v1",
      "version": "5",
      "description": {
        "type": "description",
        "text": "An interface that may be implemented by a wl_surface, for surfaces that\nare designed to be rendered as a layer of a stacked desktop-like\nenvironment.\n\nLayer surface state (layer, size, anchor, exclusive zone,\nmargin, interactivity) is double-buffered, and will be applied at the\ntime wl_surface.commit of the corresponding wl_surface is called.\n\nAttaching a null buffer to a layer surface unmaps it.\n\nUnmapping a layer_surface means that the surface cannot be shown by the\ncompositor until it is explicitly mapped again. The layer_surface\nreturns to the state it had right after layer_shell.get_layer_surface.\nThe client can re-map the surface by performing a commit without any\nbuffer attached, waiting for a configure event and handling it as usual.",
        "summary": "layer metadata interface"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_size",
          "description": {
            "type": "description",
            "text": "Sets the size of the surface in surface-local coordinates. The\ncompositor will display the surface centered with respect to its\nanchors.\n\nIf you pass 0 for either value, the compositor will assign it and\ninform you of the assignment in the configure event. You must set your\nanchor to opposite edges in the dimensions you omit; not doing so is a\nprotocol error. Both values are 0 by default.\n\nSize is double-buffered, see wl_surface.commit.",
            "summary": "sets the size of the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_anchor",
          "description": {
            "type": "description",
            "text": "Requests that the compositor anchor the surface to the specified edges\nand corners. If two orthogonal edges are specified (e.g. 'top' and\n'left'), then the anchor point will be the intersection of the edges\n(e.g. the top left corner of the output); otherwise the anchor point\nwill be centered on that edge, or in the center if none is specified.\n\nAnchor is double-buffered, see wl_surface.commit.",
            "summary": "configures the anchor point of the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "anchor",
              "argType": "uint",
              "enum": "anchor"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_exclusive_zone",
          "description": {
            "type": "description",
            "text": "Requests that the compositor avoids occluding an area with other\nsurfaces. The compositor's use of this information is\nimplementation-dependent - do not assume that this region will not\nactually be occluded.\n\nA positive value is only meaningful if the surface is anchored to one\nedge or an edge and both perpendicular edges. If the surface is not\nanchored, anchored to only two perpendicular edges (a corner), anchored\nto only two parallel edges or anchored to all edges, a positive value\nwill be treated the same as zero.\n\nA positive zone is the distance from the edge in surface-local\ncoordinates to consider exclusive.\n\nSurfaces that do not wish to have an exclusive zone may instead specify\nhow they should interact with surfaces that do. If set to zero, the\nsurface indicates that it would like to be moved to avoid occluding\nsurfaces with a positive exclusive zone. If set to -1, the surface\nindicates that it would not like to be moved to accommodate for other\nsurfaces, and the compositor should extend it all the way to the edges\nit is anchored to.\n\nFor example, a panel might set its exclusive zone to 10, so that\nmaximized shell surfaces are not shown on top of it. A notification\nmight set its exclusive zone to 0, so that it is moved to avoid\noccluding the panel, but shell surfaces are shown underneath it. A\nwallpaper or lock screen might set their exclusive zone to -1, so that\nthey stretch below or over the panel.\n\nThe default value is 0.\n\nExclusive zone is double-buffered, see wl_surface.commit.",
            "summary": "configures the exclusive geometry of this surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "zone",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_margin",
          "description": {
            "type": "description",
            "text": "Requests that the surface be placed some distance away from the anchor\npoint on the output, in surface-local coordinates. Setting this value\nfor edges you are not anchored to has no effect.\n\nThe exclusive zone includes the margin.\n\nMargin is double-buffered, see wl_surface.commit.",
            "summary": "sets a margin from the anchor point"
          },
          "args": [
            {
              "type": "arg",
              "name": "top",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "right",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "bottom",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "left",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_keyboard_interactivity",
          "description": {
            "type": "description",
            "text": "Set how keyboard events are delivered to this surface. By default,\nlayer shell surfaces do not receive keyboard events; this request can\nbe used to change this.\n\nThis setting is inherited by child surfaces set by the get_popup\nrequest.\n\nLayer surfaces receive pointer, touch, and tablet events normally. If\nyou do not want to receive them, set the input region on your surface\nto an empty region.\n\nKeyboard interactivity is double-buffered, see wl_surface.commit.",
            "summary": "requests keyboard events"
          },
          "args": [
            {
              "type": "arg",
              "name": "keyboard_interactivity",
              "argType": "uint",
              "enum": "keyboard_interactivity"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_popup",
          "description": {
            "type": "description",
            "text": "This assigns an xdg_popup's parent to this layer_surface.  This popup\nshould have been created via xdg_surface::get_popup with the parent set\nto NULL, and this request must be invoked before committing the popup's\ninitial state.\n\nSee the documentation of xdg_popup for more details about what an\nxdg_popup is and how it is used.",
            "summary": "assign this layer_surface as an xdg_popup parent"
          },
          "args": [
            {
              "type": "arg",
              "name": "popup",
              "argType": "object",
              "interface": "xdg_popup",
              "protocol": "xdg-shell"
            }
          ]
        },
        {
          "type": "request",
          "name": "ack_configure",
          "description": {
            "type": "description",
            "text": "When a configure event is received, if a client commits the\nsurface in response to the configure event, then the client\nmust make an ack_configure request sometime before the commit\nrequest, passing along the serial of the configure event.\n\nIf the client receives multiple configure events before it\ncan respond to one, it only has to ack the last configure event.\n\nA client is not required to commit immediately after sending\nan ack_configure request - it may even ack_configure several times\nbefore its next surface commit.\n\nA client may send multiple ack_configure requests before committing, but\nonly the last request sent before a commit indicates which configure\nevent the client really is responding to.",
            "summary": "ack a configure event"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint",
              "summary": "the serial from the configure event"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "This request destroys the layer surface.",
            "summary": "destroy the layer_surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_layer",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Change the layer that the surface is rendered on.\n\nLayer is double-buffered, see wl_surface.commit.",
            "summary": "change the layer of the surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "layer",
              "argType": "uint",
              "summary": "layer to move this surface to",
              "enum": "zwlr_layer_shell_v1.layer"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_exclusive_edge",
          "since": "5",
          "description": {
            "type": "description",
            "text": "Requests an edge for the exclusive zone to apply. The exclusive\nedge will be automatically deduced from anchor points when possible,\nbut when the surface is anchored to a corner, it will be necessary\nto set it explicitly to disambiguate, as it is not possible to deduce\nwhich one of the two corner edges should be used.\n\nThe edge must be one the surface is anchored to, otherwise the\ninvalid_exclusive_edge protocol error will be raised.",
            "summary": "set the edge the exclusive zone will be applied to"
          },
          "args": [
            {
              "type": "arg",
              "name": "edge",
              "argType": "uint",
              "enum": "anchor"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "configure",
          "description": {
            "type": "description",
            "text": "The configure event asks the client to resize its surface.\n\nClients should arrange their surface for the new states, and then send\nan ack_configure request with the serial sent in this configure event at\nsome point before committing the new surface.\n\nThe client is free to dismiss all but the last configure event it\nreceived.\n\nThe width and height arguments specify the size of the window in\nsurface-local coordinates.\n\nThe size is a hint, in the sense that the client is free to ignore it if\nit doesn't resize, pick a smaller size (to satisfy aspect ratio or\nresize in steps of NxM pixels). If the client picks a smaller size and\nis anchored to two opposite anchors (e.g. 'top' and 'bottom'), the\nsurface will be centered on this axis.\n\nIf the width or height arguments are zero, it means the client should\ndecide its own window dimension.",
            "summary": "suggest a surface change"
          },
          "args": [
            {
              "type": "arg",
              "name": "serial",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "closed",
          "description": {
            "type": "description",
            "text": "The closed event is sent by the compositor when the surface will no\nlonger be shown. The output may have been destroyed or the user may\nhave asked for it to be removed. Further changes to the surface will be\nignored. The client should destroy the resource after receiving this\nevent, and create a new surface if they so choose.",
            "summary": "surface should be closed"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "keyboard_interactivity",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Types of keyboard interaction possible for layer shell surfaces. The\nrationale for this is twofold: (1) some applications are not interested\nin keyboard events and not allowing them to be focused can improve the\ndesktop experience; (2) some applications will want to take exclusive\nkeyboard focus.",
            "summary": "types of keyboard interaction possible for a layer shell surface"
          },
          "entries": [
            {
              "type": "entry",
              "name": "none",
              "value": "0",
              "description": {
                "type": "description",
                "text": "This value indicates that this surface is not interested in keyboard\nevents and the compositor should never assign it the keyboard focus.\n\nThis is the default value, set for newly created layer shell surfaces.\n\nThis is useful for e.g. desktop widgets that display information or\nonly have interaction with non-keyboard input devices.",
                "summary": "no keyboard focus is possible"
              }
            },
            {
              "type": "entry",
              "name": "exclusive",
              "value": "1",
              "description": {
                "type": "description",
                "text": "Request exclusive keyboard focus if this surface is above the shell surface layer.\n\nFor the top and overlay layers, the seat will always give\nexclusive keyboard focus to the top-most layer which has keyboard\ninteractivity set to exclusive. If this layer contains multiple\nsurfaces with keyboard interactivity set to exclusive, the compositor\ndetermines the one receiving keyboard events in an implementation-\ndefined manner. In this case, no guarantee is made when this surface\nwill receive keyboard focus (if ever).\n\nFor the bottom and background layers, the compositor is allowed to use\nnormal focus semantics.\n\nThis setting is mainly intended for applications that need to ensure\nthey receive all keyboard events, such as a lock screen or a password\nprompt.",
                "summary": "request exclusive keyboard focus"
              }
            },
            {
              "type": "entry",
              "name": "on_demand",
              "value": "2",
              "since": "4",
              "description": {
                "type": "description",
                "text": "This requests the compositor to allow this surface to be focused and\nunfocused by the user in an implementation-defined manner. The user\nshould be able to unfocus this surface even regardless of the layer\nit is on.\n\nTypically, the compositor will want to use its normal mechanism to\nmanage keyboard focus between layer shell surfaces with this setting\nand regular toplevels on the desktop layer (e.g. click to focus).\nNevertheless, it is possible for a compositor to require a special\ninteraction to focus or unfocus layer shell surfaces (e.g. requiring\na click even if focus follows the mouse normally, or providing a\nkeybinding to switch focus between layers).\n\nThis setting is mainly intended for desktop shell components (e.g.\npanels) that allow keyboard interaction. Using this option can allow\nimplementing a desktop shell that can be fully usable without the\nmouse.",
                "summary": "request regular keyboard focus semantics"
              }
            }
          ]
        },
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_surface_state",
              "value": "0",
              "summary": "provided surface state is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_size",
              "value": "1",
              "summary": "size is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_anchor",
              "value": "2",
              "summary": "anchor bitfield is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_keyboard_interactivity",
              "value": "3",
              "summary": "keyboard interactivity is invalid"
            },
            {
              "type": "entry",
              "name": "invalid_exclusive_edge",
              "value": "4",
              "summary": "exclusive edge is invalid given the surface anchors"
            }
          ]
        },
        {
          "type": "enum",
          "name": "anchor",
          "bitfield": true,
          "entries": [
            {
              "type": "entry",
              "name": "top",
              "value": "1",
              "summary": "the top edge of the anchor rectangle"
            },
            {
              "type": "entry",
              "name": "bottom",
              "value": "2",
              "summary": "the bottom edge of the anchor rectangle"
            },
            {
              "type": "entry",
              "name": "left",
              "value": "4",
              "summary": "the left edge of the anchor rectangle"
            },
            {
              "type": "entry",
              "name": "right",
              "value": "8",
              "summary": "the right edge of the anchor rectangle"
            }
          ]
        }
      ]
    }
  ]
}
