{
  "type": "protocol",
  "name": "security_context_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2021 Simon Ser\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wp_security_context_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This interface allows a client to register a new Wayland connection to\nthe compositor and attach a security context to it.\n\nThis is intended to be used by sandboxes. Sandbox engines attach a\nsecurity context to all connections coming from inside the sandbox. The\ncompositor can then restrict the features that the sandboxed connections\ncan use.\n\nCompositors should forbid nesting multiple security contexts by not\nexposing wp_security_context_manager_v1 global to clients with a security\ncontext attached, or by sending the nested protocol error. Nested\nsecurity contexts are dangerous because they can potentially allow\nprivilege escalation of a sandboxed client.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.",
        "summary": "client security context manager"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the manager. This doesn't destroy objects created with the\nmanager.",
            "summary": "destroy the manager object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "create_listener",
          "description": {
            "type": "description",
            "text": "Creates a new security context with a socket listening FD.\n\nThe compositor will accept new client connections on listen_fd.\nlisten_fd must be ready to accept new connections when this request is\nsent by the client. In other words, the client must call bind(2) and\nlisten(2) before sending the FD.\n\nclose_fd is a FD closed by the client when the compositor should stop\naccepting new connections on listen_fd.\n\nThe compositor must continue to accept connections on listen_fd when\nthe Wayland client which created the security context disconnects.\n\nAfter sending this request, closing listen_fd and close_fd remains the\nonly valid operation on them.",
            "summary": "create a new security context"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "wp_security_context_v1"
            },
            {
              "type": "arg",
              "name": "listen_fd",
              "argType": "fd",
              "summary": "listening socket FD"
            },
            {
              "type": "arg",
              "name": "close_fd",
              "argType": "fd",
              "summary": "FD closed when done"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_listen_fd",
              "value": "1",
              "summary": "listening socket FD is invalid"
            },
            {
              "type": "entry",
              "name": "nested",
              "value": "2",
              "summary": "nested security contexts are forbidden"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_security_context_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The security context allows a client to register a new client and attach\nsecurity context metadata to the connections.\n\nWhen both are set, the combination of the application ID and the sandbox\nengine must uniquely identify an application. The same application ID\nwill be used across instances (e.g. if the application is restarted, or\nif the application is started multiple times).\n\nWhen both are set, the combination of the instance ID and the sandbox\nengine must uniquely identify a running instance of an application.",
        "summary": "client security context"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the security context object.",
            "summary": "destroy the security context object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_sandbox_engine",
          "description": {
            "type": "description",
            "text": "Attach a unique sandbox engine name to the security context. The name\nshould follow the reverse-DNS style (e.g. \"org.flatpak\").\n\nA list of well-known engines is maintained at:\nhttps://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md\n\nIt is a protocol error to call this request twice. The already_set\nerror is sent in this case.",
            "summary": "set the sandbox engine"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string",
              "summary": "the sandbox engine name"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_app_id",
          "description": {
            "type": "description",
            "text": "Attach an application ID to the security context.\n\nThe application ID is an opaque, sandbox-specific identifier for an\napplication. See the well-known engines document for more details:\nhttps://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md\n\nThe compositor may use the application ID to group clients belonging to\nthe same security context application.\n\nWhether this request is optional or not depends on the sandbox engine used.\n\nIt is a protocol error to call this request twice. The already_set\nerror is sent in this case.",
            "summary": "set the application ID"
          },
          "args": [
            {
              "type": "arg",
              "name": "app_id",
              "argType": "string",
              "summary": "the application ID"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_instance_id",
          "description": {
            "type": "description",
            "text": "Attach an instance ID to the security context.\n\nThe instance ID is an opaque, sandbox-specific identifier for a running\ninstance of an application. See the well-known engines document for\nmore details:\nhttps://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md\n\nWhether this request is optional or not depends on the sandbox engine used.\n\nIt is a protocol error to call this request twice. The already_set\nerror is sent in this case.",
            "summary": "set the instance ID"
          },
          "args": [
            {
              "type": "arg",
              "name": "instance_id",
              "argType": "string",
              "summary": "the instance ID"
            }
          ]
        },
        {
          "type": "request",
          "name": "commit",
          "description": {
            "type": "description",
            "text": "Atomically register the new client and attach the security context\nmetadata.\n\nIf the provided metadata is inconsistent or does not match with out of\nband metadata (see\nhttps://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md),\nthe invalid_metadata error may be sent eventually.\n\nIt's a protocol error to send any request other than \"destroy\" after\nthis request. In this case, the already_used error is sent.",
            "summary": "register the security context"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "already_used",
              "value": "1",
              "summary": "security context has already been committed"
            },
            {
              "type": "entry",
              "name": "already_set",
              "value": "2",
              "summary": "metadata has already been set"
            },
            {
              "type": "entry",
              "name": "invalid_metadata",
              "value": "3",
              "summary": "metadata is invalid"
            }
          ]
        }
      ]
    }
  ]
}
