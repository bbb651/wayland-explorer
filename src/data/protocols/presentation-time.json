{
  "type": "protocol",
  "name": "presentation_time",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2013-2014 Collabora, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wp_presentation",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The main feature of this interface is accurate presentation\ntiming feedback to ensure smooth video playback while maintaining\naudio/video synchronization. Some features use the concept of a\npresentation clock, which is defined in the\npresentation.clock_id event.\n\nA content update for a wl_surface is submitted by a\nwl_surface.commit request. Request 'feedback' associates with\nthe wl_surface.commit and provides feedback on the content\nupdate, particularly the final realized presentation time.\n\n\n\nWhen the final realized presentation time is available, e.g.\nafter a framebuffer flip completes, the requested\npresentation_feedback.presented events are sent. The final\npresentation time can differ from the compositor's predicted\ndisplay update time and the update's target time, especially\nwhen the compositor misses its target vertical blanking period.",
        "summary": "timed presentation related wl_surface requests"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Informs the server that the client will no longer be using\nthis protocol object. Existing objects created by this object\nare not affected.",
            "summary": "unbind from the presentation interface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "feedback",
          "description": {
            "type": "description",
            "text": "Request presentation feedback for the current content submission\non the given surface. This creates a new presentation_feedback\nobject, which will deliver the feedback information once. If\nmultiple presentation_feedback objects are created for the same\nsubmission, they will all deliver the same information.\n\nFor details on what information is returned, see the\npresentation_feedback interface.",
            "summary": "request presentation feedback information"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "summary": "target surface",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "callback",
              "argType": "new_id",
              "summary": "new feedback object",
              "interface": "wp_presentation_feedback"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "clock_id",
          "description": {
            "type": "description",
            "text": "This event tells the client in which clock domain the\ncompositor interprets the timestamps used by the presentation\nextension. This clock is called the presentation clock.\n\nThe compositor sends this event when the client binds to the\npresentation interface. The presentation clock does not change\nduring the lifetime of the client connection.\n\nThe clock identifier is platform dependent. On POSIX platforms, the\nidentifier value is one of the clockid_t values accepted by\nclock_gettime(). clock_gettime() is defined by POSIX.1-2001.\n\nTimestamps in this clock domain are expressed as tv_sec_hi,\ntv_sec_lo, tv_nsec triples, each component being an unsigned\n32-bit value. Whole seconds are in tv_sec which is a 64-bit\nvalue combined from tv_sec_hi and tv_sec_lo, and the\nadditional fractional part in tv_nsec as nanoseconds. Hence,\nfor valid timestamps tv_nsec must be in [0, 999999999].\n\nNote that clock_id applies only to the presentation clock,\nand implies nothing about e.g. the timestamps used in the\nWayland core protocol input events.\n\nCompositors should prefer a clock which does not jump and is\nnot slewed e.g. by NTP. The absolute value of the clock is\nirrelevant. Precision of one millisecond or better is\nrecommended. Clients must be able to query the current clock\nvalue directly, not by asking the compositor.",
            "summary": "clock ID for timestamps"
          },
          "args": [
            {
              "type": "arg",
              "name": "clk_id",
              "argType": "uint",
              "summary": "platform clock identifier"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These fatal protocol errors may be emitted in response to\nillegal presentation requests.",
            "summary": "fatal presentation errors"
          },
          "entries": [
            {
              "type": "entry",
              "name": "invalid_timestamp",
              "value": "0",
              "summary": "invalid value in tv_nsec"
            },
            {
              "type": "entry",
              "name": "invalid_flag",
              "value": "1",
              "summary": "invalid flag"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_presentation_feedback",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A presentation_feedback object returns an indication that a\nwl_surface content update has become visible to the user.\nOne object corresponds to one content update submission\n(wl_surface.commit). There are two possible outcomes: the\ncontent update is presented to the user, and a presentation\ntimestamp delivered; or, the user did not see the content\nupdate because it was superseded or its surface destroyed,\nand the content update is discarded.\n\nOnce a presentation_feedback object has delivered a 'presented'\nor 'discarded' event it is automatically destroyed.",
        "summary": "presentation time feedback event"
      },
      "requests": [],
      "events": [
        {
          "type": "event",
          "name": "sync_output",
          "description": {
            "type": "description",
            "text": "As presentation can be synchronized to only one output at a\ntime, this event tells which output it was. This event is only\nsent prior to the presented event.\n\nAs clients may bind to the same global wl_output multiple\ntimes, this event is sent for each bound instance that matches\nthe synchronized output. If a client has not bound to the\nright wl_output global at all, this event is not sent.",
            "summary": "presentation synchronized to this output"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "summary": "presentation output",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "presented",
          "eventType": "destructor",
          "description": {
            "type": "description",
            "text": "The associated content update was displayed to the user at the\nindicated time (tv_sec_hi/lo, tv_nsec). For the interpretation of\nthe timestamp, see presentation.clock_id event.\n\nThe timestamp corresponds to the time when the content update\nturned into light the first time on the surface's main output.\nCompositors may approximate this from the framebuffer flip\ncompletion events from the system, and the latency of the\nphysical display path if known.\n\nThis event is preceded by all related sync_output events\ntelling which output's refresh cycle the feedback corresponds\nto, i.e. the main output for the surface. Compositors are\nrecommended to choose the output containing the largest part\nof the wl_surface, or keeping the output they previously\nchose. Having a stable presentation output association helps\nclients predict future output refreshes (vblank).\n\nThe 'refresh' argument gives the compositor's prediction of how\nmany nanoseconds after tv_sec, tv_nsec the very next output\nrefresh may occur. This is to further aid clients in\npredicting future refreshes, i.e., estimating the timestamps\ntargeting the next few vblanks. If such prediction cannot\nusefully be done, the argument is zero.\n\nIf the output does not have a constant refresh rate, explicit\nvideo mode switches excluded, then the refresh argument must\nbe zero.\n\nThe 64-bit value combined from seq_hi and seq_lo is the value\nof the output's vertical retrace counter when the content\nupdate was first scanned out to the display. This value must\nbe compatible with the definition of MSC in\nGLX_OML_sync_control specification. Note, that if the display\npath has a non-zero latency, the time instant specified by\nthis counter may differ from the timestamp's.\n\nIf the output does not have a concept of vertical retrace or a\nrefresh cycle, or the output device is self-refreshing without\na way to query the refresh count, then the arguments seq_hi\nand seq_lo must be zero.",
            "summary": "the content update was displayed"
          },
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint",
              "summary": "high 32 bits of the seconds part of the presentation timestamp"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint",
              "summary": "low 32 bits of the seconds part of the presentation timestamp"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint",
              "summary": "nanoseconds part of the presentation timestamp"
            },
            {
              "type": "arg",
              "name": "refresh",
              "argType": "uint",
              "summary": "nanoseconds till next refresh"
            },
            {
              "type": "arg",
              "name": "seq_hi",
              "argType": "uint",
              "summary": "high 32 bits of refresh counter"
            },
            {
              "type": "arg",
              "name": "seq_lo",
              "argType": "uint",
              "summary": "low 32 bits of refresh counter"
            },
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "combination of 'kind' values",
              "enum": "kind"
            }
          ]
        },
        {
          "type": "event",
          "name": "discarded",
          "eventType": "destructor",
          "description": {
            "type": "description",
            "text": "The content update was never displayed to the user.",
            "summary": "the content update was not displayed"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "kind",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "These flags provide information about how the presentation of\nthe related content update was done. The intent is to help\nclients assess the reliability of the feedback and the visual\nquality with respect to possible tearing and timings.",
            "summary": "bitmask of flags in presented event"
          },
          "entries": [
            {
              "type": "entry",
              "name": "vsync",
              "value": "0x1",
              "description": {
                "type": "description",
                "text": "The presentation was synchronized to the \"vertical retrace\" by\nthe display hardware such that tearing does not happen.\nRelying on software scheduling is not acceptable for this\nflag. If presentation is done by a copy to the active\nfrontbuffer, then it must guarantee that tearing cannot\nhappen.",
                "summary": "presentation was vsync'd"
              }
            },
            {
              "type": "entry",
              "name": "hw_clock",
              "value": "0x2",
              "description": {
                "type": "description",
                "text": "The display hardware provided measurements that the hardware\ndriver converted into a presentation timestamp. Sampling a\nclock in software is not acceptable for this flag.",
                "summary": "hardware provided the presentation timestamp"
              }
            },
            {
              "type": "entry",
              "name": "hw_completion",
              "value": "0x4",
              "description": {
                "type": "description",
                "text": "The display hardware signalled that it started using the new\nimage content. The opposite of this is e.g. a timer being used\nto guess when the display hardware has switched to the new\nimage content.",
                "summary": "hardware signalled the start of the presentation"
              }
            },
            {
              "type": "entry",
              "name": "zero_copy",
              "value": "0x8",
              "description": {
                "type": "description",
                "text": "The presentation of this update was done zero-copy. This means\nthe buffer from the client was given to display hardware as\nis, without copying it. Compositing with OpenGL counts as\ncopying, even if textured directly from the client buffer.\nPossible zero-copy cases include direct scanout of a\nfullscreen surface and a surface on a hardware overlay.",
                "summary": "presentation was done zero-copy"
              }
            }
          ]
        }
      ]
    }
  ]
}
