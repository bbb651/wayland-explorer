{
  "type": "protocol",
  "name": "dpms",
  "copyright": {
    "type": "copyright",
    "text": "\nSPDX-FileCopyrightText: 2015 Martin Gräßlin\n\nSPDX-License-Identifier: LGPL-2.1-or-later\n"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "org_kde_kwin_dpms_manager",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The Dpms manager allows to get a org_kde_kwin_dpms for a given wl_output.\nThe org_kde_kwin_dpms provides the currently used VESA Display Power Management\nSignaling state (see https://en.wikipedia.org/wiki/VESA_Display_Power_Management_Signaling ).\nIn addition it allows to request a state change. A compositor is not obliged to honor it\nand will normally automatically switch back to on state.\n\nWarning! The protocol described in this file is a desktop environment\nimplementation detail. Regular clients must not use this protocol.\nBackward incompatible changes may be added without bumping the major\nversion of the extension.",
        "summary": "Output dpms manager"
      },
      "requests": [
        {
          "type": "request",
          "name": "get",
          "description": {
            "type": "description",
            "text": "Factory request to get the org_kde_kwin_dpms for a given wl_output.",
            "summary": "Get org_kde_kwin_dpms for wl_output"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "org_kde_kwin_dpms"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "org_kde_kwin_dpms",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This interface provides information about the VESA DPMS state for a wl_output.\nIt gets created through the request get on the org_kde_kwin_dpms_manager interface.\n\nOn creating the resource the server will push whether DPSM is supported for the output,\nthe currently used DPMS state and notifies the client through the done event once all\nstates are pushed. Whenever a state changes the set of changes is committed with the\ndone event.",
        "summary": "Dpms for a wl_output"
      },
      "requests": [
        {
          "type": "request",
          "name": "set",
          "description": {
            "type": "description",
            "text": "Requests that the compositor puts the wl_output into the passed mode. The compositor\nis not obliged to change the state. In addition the compositor might leave the mode\nwhenever it seems suitable. E.g. the compositor might return to On state on user input.\n\nThe client should not assume that the mode changed after requesting a new mode.\nInstead the client should listen for the mode event.",
            "summary": "Request DPMS state change for the wl_output"
          },
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "summary": "Requested mode"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "summary": "release the dpms object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "supported",
          "description": {
            "type": "description",
            "text": "This event gets pushed on binding the resource and indicates whether the wl_output\nsupports DPMS. There are operation modes of a Wayland server where DPMS might not\nmake sense (e.g. nested compositors).",
            "summary": "Event indicating whether DPMS is supported on the wl_output"
          },
          "args": [
            {
              "type": "arg",
              "name": "supported",
              "argType": "uint",
              "summary": "Boolean value whether DPMS is supported (1) for the wl_output or not (0)"
            }
          ]
        },
        {
          "type": "event",
          "name": "mode",
          "description": {
            "type": "description",
            "text": "This mode gets pushed on binding the resource and provides the currently used\nDPMS mode. It also gets pushed if DPMS is not supported for the wl_output, in that\ncase the value will be On.\n\nThe event is also pushed whenever the state changes.",
            "summary": "Event indicating used DPMS mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "uint",
              "summary": "The new currently used mode"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "This event gets pushed on binding the resource once all other states are pushed.\n\nIn addition it gets pushed whenever a state changes to tell the client that all\nstate changes have been pushed.",
            "summary": "All changes are pushed"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "mode",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "On",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "Standby",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "Suspend",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "Off",
              "value": "3"
            }
          ]
        }
      ]
    }
  ]
}
