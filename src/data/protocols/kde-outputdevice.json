{
  "type": "protocol",
  "name": "org_kde_kwin_outputdevice",
  "copyright": {
    "type": "copyright",
    "text": "\nSPDX-FileCopyrightText: 2008-2011 Kristian Høgsberg\nSPDX-FileCopyrightText: 2010-2011 Intel Corporation\nSPDX-FileCopyrightText: 2012-2013 Collabora, Ltd.\nSPDX-FileCopyrightText: 2015 Sebastian Kügler <sebas@kde.org>\n\nSPDX-License-Identifier: MIT-CMU\n"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "org_kde_kwin_outputdevice",
      "version": "4",
      "description": {
        "type": "description",
        "text": "An outputdevice describes a display device available to the compositor.\noutputdevice is similar to wl_output, but focuses on output\nconfiguration management.\n\nA client can query all global outputdevice objects to enlist all\navailable display devices, even those that may currently not be\nrepresented by the compositor as a wl_output.\n\nThe client sends configuration changes to the server through the\noutputconfiguration interface, and the server applies the configuration\nchanges to the hardware and signals changes to the outputdevices\naccordingly.\n\nThis object is published as global during start up for every available\ndisplay devices, or when one later becomes available, for example by\nbeing hotplugged via a physical connector.",
        "summary": "output configuration representation"
      },
      "requests": [],
      "events": [
        {
          "type": "event",
          "name": "geometry",
          "description": {
            "type": "description",
            "text": "The geometry event describes geometric properties of the output.\nThe event is sent when binding to the output object and whenever\nany of the properties change.",
            "summary": "geometric properties of the output"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position within the global compositor space"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position within the global compositor space"
            },
            {
              "type": "arg",
              "name": "physical_width",
              "argType": "int",
              "summary": "width in millimeters of the output"
            },
            {
              "type": "arg",
              "name": "physical_height",
              "argType": "int",
              "summary": "height in millimeters of the output"
            },
            {
              "type": "arg",
              "name": "subpixel",
              "argType": "int",
              "summary": "subpixel orientation of the output"
            },
            {
              "type": "arg",
              "name": "make",
              "argType": "string",
              "summary": "textual description of the manufacturer"
            },
            {
              "type": "arg",
              "name": "model",
              "argType": "string",
              "summary": "textual description of the model"
            },
            {
              "type": "arg",
              "name": "transform",
              "argType": "int",
              "summary": "transform that maps framebuffer to output"
            }
          ]
        },
        {
          "type": "event",
          "name": "mode",
          "description": {
            "type": "description",
            "text": "The mode event describes an available mode for the output.\n\nWhen the client binds to the outputdevice object, the server sends this\nevent once for every available mode the outputdevice can be operated by.\n\nThere will always be at least one event sent out on initial binding,\nwhich represents the current mode.\n\nLater on if an output changes its mode the event is sent again, whereby\nthis event represents the mode that has now become current. In other\nwords, the current mode is always represented by the latest event sent\nwith the current flag set.\n\nThe size of a mode is given in physical hardware units of the output device.\nThis is not necessarily the same as the output size in the global compositor\nspace. For instance, the output may be scaled, as described in\norg_kde_kwin_outputdevice.scale, or transformed, as described in\norg_kde_kwin_outputdevice.transform.\n\nThe id can be used to refer to a mode when calling set_mode on an\norg_kde_kwin_outputconfiguration object.",
            "summary": "advertise available output modes and current one"
          },
          "args": [
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "bitfield of mode flags"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "width of the mode in hardware units"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "height of the mode in hardware units"
            },
            {
              "type": "arg",
              "name": "refresh",
              "argType": "int",
              "summary": "vertical refresh rate in mHz"
            },
            {
              "type": "arg",
              "name": "mode_id",
              "argType": "int",
              "summary": "Per outputdevice unique id to identify a mode"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "This event is sent after all other properties have been\nsent on binding to the output object as well as after any\nother output property change have been applied later on.\nThis allows to see changes to the output properties as atomic,\neven if multiple events successively announce them.",
            "summary": "sent all information about output"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "scale",
          "description": {
            "type": "description",
            "text": "This event contains scaling geometry information\nthat is not in the geometry event. It may be sent after\nbinding the output object or if the output scale changes\nlater. If it is not sent, the client should assume a\nscale of 1.\n\nA scale larger than 1 means that the compositor will\nautomatically scale surface buffers by this amount\nwhen rendering. This is used for high resolution\ndisplays where applications rendering at the native\nresolution would be too small to be legible.\n\nIt is intended that scaling aware clients track the\ncurrent output of a surface, and if it is on a scaled\noutput it should use wl_surface.set_buffer_scale with\nthe scale of the output. That way the compositor can\navoid scaling the surface, and the client can supply\na higher detail image.",
            "summary": "output scaling properties"
          },
          "args": [
            {
              "type": "arg",
              "name": "factor",
              "argType": "int",
              "summary": "scaling factor of output"
            }
          ]
        },
        {
          "type": "event",
          "name": "edid",
          "description": {
            "type": "description",
            "text": "The edid event encapsulates the EDID data for the outputdevice.\n\nThe event is sent when binding to the output object. The EDID\ndata may be empty, in which case this event is sent anyway.\nIf the EDID information is empty, you can fall back to the name\net al. properties of the outputdevice.",
            "summary": "advertise EDID data for the output"
          },
          "args": [
            {
              "type": "arg",
              "name": "raw",
              "argType": "string",
              "summary": "base64-encoded EDID string"
            }
          ]
        },
        {
          "type": "event",
          "name": "enabled",
          "description": {
            "type": "description",
            "text": "The enabled event notifies whether this output is currently\nenabled and used for displaying content by the server.\nThe event is sent when binding to the output object and\nwhenever later on an output changes its state by becoming\nenabled or disabled.",
            "summary": "output is enabled or disabled"
          },
          "args": [
            {
              "type": "arg",
              "name": "enabled",
              "argType": "int",
              "summary": "output enabled state"
            }
          ]
        },
        {
          "type": "event",
          "name": "uuid",
          "description": {
            "type": "description",
            "text": "The uuid can be used to identify the output. It's controlled by\nthe server entirely. The server should make sure the uuid is\npersistent across restarts. An empty uuid is considered invalid.",
            "summary": "A unique id for this outputdevice"
          },
          "args": [
            {
              "type": "arg",
              "name": "uuid",
              "argType": "string",
              "summary": "output devices ID"
            }
          ]
        },
        {
          "type": "event",
          "name": "scalef",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This event contains scaling geometry information\nthat is not in the geometry event. It may be sent after\nbinding the output object or if the output scale changes\nlater. If it is not sent, the client should assume a\nscale of 1.\n\nA scale larger than 1 means that the compositor will\nautomatically scale surface buffers by this amount\nwhen rendering. This is used for high resolution\ndisplays where applications rendering at the native\nresolution would be too small to be legible.\n\nIt is intended that scaling aware clients track the\ncurrent output of a surface, and if it is on a scaled\noutput it should use wl_surface.set_buffer_scale with\nthe scale of the output. That way the compositor can\navoid scaling the surface, and the client can supply\na higher detail image.\n\nwl_output will keep the output scale as an integer. In every situation except\nconfiguring the window manager you want to use that.",
            "summary": "output scaling properties"
          },
          "args": [
            {
              "type": "arg",
              "name": "factor",
              "argType": "fixed",
              "summary": "scaling factor of output"
            }
          ]
        },
        {
          "type": "event",
          "name": "colorcurves",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Describes the color intensity profile of the output.\nCommonly used for gamma/color correction.\n\nThe array contains all color ramp values of the output.\nFor example on 8bit screens there are 256 of them.\n\nThe array elements are unsigned 16bit integers.",
            "summary": "output color curves"
          },
          "args": [
            {
              "type": "arg",
              "name": "red",
              "argType": "array",
              "summary": "red color ramp"
            },
            {
              "type": "arg",
              "name": "green",
              "argType": "array",
              "summary": "green color ramp"
            },
            {
              "type": "arg",
              "name": "blue",
              "argType": "array",
              "summary": "blue color ramp"
            }
          ]
        },
        {
          "type": "event",
          "name": "serial_number",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Serial ID of the monitor, sent on startup before the first done event.",
            "summary": "Serial Number"
          },
          "args": [
            {
              "type": "arg",
              "name": "serialNumber",
              "argType": "string",
              "summary": "textual representation of serial number"
            }
          ]
        },
        {
          "type": "event",
          "name": "eisa_id",
          "since": "2",
          "description": {
            "type": "description",
            "text": "EISA ID of the monitor, sent on startup before the first done event.",
            "summary": "EISA ID"
          },
          "args": [
            {
              "type": "arg",
              "name": "eisaId",
              "argType": "string",
              "summary": "textual representation of EISA identifier"
            }
          ]
        },
        {
          "type": "event",
          "name": "capabilities",
          "since": "3",
          "description": {
            "type": "description",
            "text": "What capabilities this device has, sent on startup before the first\ndone event.",
            "summary": "capability flags"
          },
          "args": [
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "enum": "capability"
            }
          ]
        },
        {
          "type": "event",
          "name": "overscan",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Overscan value of the monitor in percent, sent on startup before the\nfirst done event.",
            "summary": "overscan"
          },
          "args": [
            {
              "type": "arg",
              "name": "overscan",
              "argType": "uint",
              "summary": "amount of overscan of the monitor"
            }
          ]
        },
        {
          "type": "event",
          "name": "vrr_policy",
          "since": "4",
          "description": {
            "type": "description",
            "text": "What policy the compositor will employ regarding its use of variable\nrefresh rate.",
            "summary": "Variable Refresh Rate Policy"
          },
          "args": [
            {
              "type": "arg",
              "name": "vrr_policy",
              "argType": "uint",
              "enum": "vrr_policy"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "subpixel",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This enumeration describes how the physical pixels on an output are\nlaid out.",
            "summary": "subpixel geometry information"
          },
          "entries": [
            {
              "type": "entry",
              "name": "unknown",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "none",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "horizontal_rgb",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "horizontal_bgr",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "vertical_rgb",
              "value": "4"
            },
            {
              "type": "entry",
              "name": "vertical_bgr",
              "value": "5"
            }
          ]
        },
        {
          "type": "enum",
          "name": "transform",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This describes the transform, that a compositor will apply to a\nsurface to compensate for the rotation or mirroring of an\noutput device.\n\nThe flipped values correspond to an initial flip around a\nvertical axis followed by rotation.\n\nThe purpose is mainly to allow clients to render accordingly and\ntell the compositor, so that for fullscreen surfaces, the\ncompositor is still able to scan out directly client surfaces.",
            "summary": "transform from framebuffer to output"
          },
          "entries": [
            {
              "type": "entry",
              "name": "normal",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "90",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "180",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "270",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "flipped",
              "value": "4"
            },
            {
              "type": "entry",
              "name": "flipped_90",
              "value": "5"
            },
            {
              "type": "entry",
              "name": "flipped_180",
              "value": "6"
            },
            {
              "type": "entry",
              "name": "flipped_270",
              "value": "7"
            }
          ]
        },
        {
          "type": "enum",
          "name": "mode",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These flags describe properties of an output mode. They are\nused in the flags bitfield of the mode event.",
            "summary": "mode information"
          },
          "entries": [
            {
              "type": "entry",
              "name": "current",
              "value": "0x1",
              "summary": "indicates this is the current mode"
            },
            {
              "type": "entry",
              "name": "preferred",
              "value": "0x2",
              "summary": "indicates this is the preferred mode"
            }
          ]
        },
        {
          "type": "enum",
          "name": "enablement",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Describes whether a device is enabled, i.e. device is used to\ndisplay content by the compositor. This wraps a boolean around\nan int to avoid a boolean trap.",
            "summary": "describes enabled state"
          },
          "entries": [
            {
              "type": "entry",
              "name": "disabled",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "enabled",
              "value": "1"
            }
          ]
        },
        {
          "type": "enum",
          "name": "capability",
          "since": "3",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "Describes what capabilities this device has.",
            "summary": "describes capabilities of the outputdevice"
          },
          "entries": [
            {
              "type": "entry",
              "name": "overscan",
              "value": "1",
              "summary": "if this outputdevice can use overscan"
            },
            {
              "type": "entry",
              "name": "vrr",
              "value": "2",
              "summary": "if this outputdevice supports variable refresh rate",
              "since": "4"
            }
          ]
        },
        {
          "type": "enum",
          "name": "vrr_policy",
          "since": "4",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Describes when the compositor may employ variable refresh rate",
            "summary": "describes vrr policy"
          },
          "entries": [
            {
              "type": "entry",
              "name": "never",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "always",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "automatic",
              "value": "2"
            }
          ]
        }
      ]
    }
  ]
}
