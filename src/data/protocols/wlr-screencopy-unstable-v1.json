{
  "type": "protocol",
  "name": "wlr_screencopy_unstable_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright © 2018 Simon Ser\nCopyright © 2019 Andri Yngvason\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol allows clients to ask the compositor to copy part of the\nscreen content to a client buffer.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.",
    "summary": "screen content capturing on client buffers"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zwlr_screencopy_manager_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "This object is a manager which offers requests to start capturing from a\nsource.",
        "summary": "manager to inform clients and begin capturing"
      },
      "requests": [
        {
          "type": "request",
          "name": "capture_output",
          "description": {
            "type": "description",
            "text": "Capture the next frame of an entire output.",
            "summary": "capture an output"
          },
          "args": [
            {
              "type": "arg",
              "name": "frame",
              "argType": "new_id",
              "interface": "zwlr_screencopy_frame_v1"
            },
            {
              "type": "arg",
              "name": "overlay_cursor",
              "argType": "int",
              "summary": "composite cursor onto the frame"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "capture_output_region",
          "description": {
            "type": "description",
            "text": "Capture the next frame of an output's region.\n\nThe region is given in output logical coordinates, see\nxdg_output.logical_size. The region will be clipped to the output's\nextents.",
            "summary": "capture an output's region"
          },
          "args": [
            {
              "type": "arg",
              "name": "frame",
              "argType": "new_id",
              "interface": "zwlr_screencopy_frame_v1"
            },
            {
              "type": "arg",
              "name": "overlay_cursor",
              "argType": "int",
              "summary": "composite cursor onto the frame"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "All objects created by the manager will still remain valid, until their\nappropriate destroy request has been called.",
            "summary": "destroy the manager"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": []
    },
    {
      "type": "interface",
      "name": "zwlr_screencopy_frame_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "This object represents a single frame.\n\nWhen created, a series of buffer events will be sent, each representing a\nsupported buffer type. The \"buffer_done\" event is sent afterwards to\nindicate that all supported buffer types have been enumerated. The client\nwill then be able to send a \"copy\" request. If the capture is successful,\nthe compositor will send a \"flags\" followed by a \"ready\" event.\n\nFor objects version 2 or lower, wl_shm buffers are always supported, ie.\nthe \"buffer\" event is guaranteed to be sent.\n\nIf the capture failed, the \"failed\" event is sent. This can happen anytime\nbefore the \"ready\" event.\n\nOnce either a \"ready\" or a \"failed\" event is received, the client should\ndestroy the frame.",
        "summary": "a frame ready for copy"
      },
      "requests": [
        {
          "type": "request",
          "name": "copy",
          "description": {
            "type": "description",
            "text": "Copy the frame to the supplied buffer. The buffer must have a the\ncorrect size, see zwlr_screencopy_frame_v1.buffer and\nzwlr_screencopy_frame_v1.linux_dmabuf. The buffer needs to have a\nsupported format.\n\nIf the frame is successfully copied, a \"flags\" and a \"ready\" events are\nsent. Otherwise, a \"failed\" event is sent.",
            "summary": "copy the frame"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroys the frame. This request can be sent at any time by the client.",
            "summary": "delete this object, used or not"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "copy_with_damage",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Same as copy, except it waits until there is damage to copy.",
            "summary": "copy the frame when it's damaged"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "buffer",
          "description": {
            "type": "description",
            "text": "Provides information about wl_shm buffer parameters that need to be\nused for this frame. This event is sent once after the frame is created\nif wl_shm buffers are supported.",
            "summary": "wl_shm buffer information"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "buffer format",
              "enum": "wl_shm.format",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint",
              "summary": "buffer width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint",
              "summary": "buffer height"
            },
            {
              "type": "arg",
              "name": "stride",
              "argType": "uint",
              "summary": "buffer stride"
            }
          ]
        },
        {
          "type": "event",
          "name": "flags",
          "description": {
            "type": "description",
            "text": "Provides flags about the frame. This event is sent once before the\n\"ready\" event.",
            "summary": "frame flags"
          },
          "args": [
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "summary": "frame flags",
              "enum": "flags"
            }
          ]
        },
        {
          "type": "event",
          "name": "ready",
          "description": {
            "type": "description",
            "text": "Called as soon as the frame is copied, indicating it is available\nfor reading. This event includes the time at which presentation happened\nat.\n\nThe timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,\neach component being an unsigned 32-bit value. Whole seconds are in\ntv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,\nand the additional fractional part in tv_nsec as nanoseconds. Hence,\nfor valid timestamps tv_nsec must be in [0, 999999999]. The seconds part\nmay have an arbitrary offset at start.\n\nAfter receiving this event, the client should destroy the object.",
            "summary": "indicates frame is available for reading"
          },
          "args": [
            {
              "type": "arg",
              "name": "tv_sec_hi",
              "argType": "uint",
              "summary": "high 32 bits of the seconds part of the timestamp"
            },
            {
              "type": "arg",
              "name": "tv_sec_lo",
              "argType": "uint",
              "summary": "low 32 bits of the seconds part of the timestamp"
            },
            {
              "type": "arg",
              "name": "tv_nsec",
              "argType": "uint",
              "summary": "nanoseconds part of the timestamp"
            }
          ]
        },
        {
          "type": "event",
          "name": "failed",
          "description": {
            "type": "description",
            "text": "This event indicates that the attempted frame copy has failed.\n\nAfter receiving this event, the client should destroy the object.",
            "summary": "frame copy failed"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "damage",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This event is sent right before the ready event when copy_with_damage is\nrequested. It may be generated multiple times for each copy_with_damage\nrequest.\n\nThe arguments describe a box around an area that has changed since the\nlast copy request that was derived from the current screencopy manager\ninstance.\n\nThe union of all regions received between the call to copy_with_damage\nand a ready event is the total damage since the prior ready event.",
            "summary": "carries the coordinates of the damaged region"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "uint",
              "summary": "damaged x coordinates"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "uint",
              "summary": "damaged y coordinates"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint",
              "summary": "current width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint",
              "summary": "current height"
            }
          ]
        },
        {
          "type": "event",
          "name": "linux_dmabuf",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Provides information about linux-dmabuf buffer parameters that need to\nbe used for this frame. This event is sent once after the frame is\ncreated if linux-dmabuf buffers are supported.",
            "summary": "linux-dmabuf buffer information"
          },
          "args": [
            {
              "type": "arg",
              "name": "format",
              "argType": "uint",
              "summary": "fourcc pixel format"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "uint",
              "summary": "buffer width"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "uint",
              "summary": "buffer height"
            }
          ]
        },
        {
          "type": "event",
          "name": "buffer_done",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This event is sent once after all buffer events have been sent.\n\nThe client should proceed to create a buffer of one of the supported\ntypes, and send a \"copy\" request.",
            "summary": "all buffer types reported"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "already_used",
              "value": "0",
              "summary": "the object has already been used to copy a wl_buffer"
            },
            {
              "type": "entry",
              "name": "invalid_buffer",
              "value": "1",
              "summary": "buffer attributes are invalid"
            }
          ]
        },
        {
          "type": "enum",
          "name": "flags",
          "bitfield": true,
          "entries": [
            {
              "type": "entry",
              "name": "y_invert",
              "value": "1",
              "summary": "contents are y-inverted"
            }
          ]
        }
      ]
    }
  ]
}
