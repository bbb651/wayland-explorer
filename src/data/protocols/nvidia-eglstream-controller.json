{
  "type": "protocol",
  "name": "wl_eglstream_controller",
  "copyright": {
    "type": "copyright",
    "text": "Copyright (c) 2017-2018, NVIDIA CORPORATION. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wl_eglstream_controller",
      "version": "2",
      "requests": [
        {
          "type": "request",
          "name": "attach_eglstream_consumer",
          "since": "1",
          "description": {
            "type": "description",
            "text": "Creates the corresponding server side EGLStream from the given wl_buffer\nand attaches a consumer to it.",
            "summary": "Create server stream and attach consumer"
          },
          "args": [
            {
              "type": "arg",
              "name": "wl_surface",
              "argType": "object",
              "summary": "wl_surface corresponds to the client surface associated with\n        newly created eglstream",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "wl_resource",
              "argType": "object",
              "summary": "wl_resource corresponding to an EGLStream",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "attach_eglstream_consumer_attribs",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Creates the corresponding server side EGLStream from the given wl_buffer\nand attaches a consumer to it using the given attributes.",
            "summary": "Create server stream and attach consumer using attributes"
          },
          "args": [
            {
              "type": "arg",
              "name": "wl_surface",
              "argType": "object",
              "summary": "wl_surface corresponds to the client surface associated with\n        newly created eglstream",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "wl_resource",
              "argType": "object",
              "summary": "wl_resource corresponding to an EGLStream",
              "interface": "wl_buffer",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "attribs",
              "argType": "array",
              "summary": "Stream consumer attachment attribs",
              "description": {
                "type": "description",
                "text": "It contains key-value pairs compatible with intptr_t type. A key must\nbe one of wl_eglstream_controller_attrib enumeration values. What a value\nrepresents is attribute-specific.",
                "summary": "List of attributes with consumer attachment data"
              }
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "present_mode",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "- dont_care: Using this enum will tell the server to make its own\ndecisions regarding present mode.\n\n- fifo:      Tells the server to use a fifo present mode. The decision to\nuse fifo synchronous is left up to the server.\n\n- mailbox:   Tells the server to use a mailbox present mode.",
            "summary": "Stream present mode"
          },
          "entries": [
            {
              "type": "entry",
              "name": "dont_care",
              "value": "0",
              "summary": "Let the Server decide present mode"
            },
            {
              "type": "entry",
              "name": "fifo",
              "value": "1",
              "summary": "Use a fifo present mode"
            },
            {
              "type": "entry",
              "name": "mailbox",
              "value": "2",
              "summary": "Use a mailbox mode"
            }
          ]
        },
        {
          "type": "enum",
          "name": "attrib",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "- present_mode: Must be one of wl_eglstream_controller_present_mode. Tells the\nserver the desired present mode that should be used.\n\n- fifo_length:  Only valid when the present_mode attrib is provided and its\nvalue is specified as fifo. Tells the server the desired fifo\nlength to be used when the desired present_mode is fifo.",
            "summary": "Stream consumer attachment attributes"
          },
          "entries": [
            {
              "type": "entry",
              "name": "present_mode",
              "value": "0",
              "summary": "Tells the server the desired present mode"
            },
            {
              "type": "entry",
              "name": "fifo_length",
              "value": "1",
              "summary": "Tells the server the desired fifo length when the desired presenation_mode is fifo."
            }
          ]
        }
      ]
    }
  ]
}
