{
  "type": "protocol",
  "name": "tearing_control_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2021 Xaver Hugl\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wp_tearing_control_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "For some use cases like games or drawing tablets it can make sense to\nreduce latency by accepting tearing with the use of asynchronous page\nflips. This global is a factory interface, allowing clients to inform\nwhich type of presentation the content of their surfaces is suitable for.\n\nGraphics APIs like EGL or Vulkan, that manage the buffer queue and commits\nof a wl_surface themselves, are likely to be using this extension\ninternally. If a client is using such an API for a wl_surface, it should\nnot directly use this extension on that surface, to avoid raising a\ntearing_control_exists protocol error.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.",
        "summary": "protocol for tearing control"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy this tearing control factory object. Other objects, including\nwp_tearing_control_v1 objects created by this factory, are not affected\nby this request.",
            "summary": "destroy tearing control factory object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_tearing_control",
          "description": {
            "type": "description",
            "text": "Instantiate an interface extension for the given wl_surface to request\nasynchronous page flips for presentation.\n\nIf the given wl_surface already has a wp_tearing_control_v1 object\nassociated, the tearing_control_exists protocol error is raised.",
            "summary": "extend surface interface for tearing control"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "wp_tearing_control_v1"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "tearing_control_exists",
              "value": "0",
              "summary": "the surface already has a tearing object associated"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_tearing_control_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "An additional interface to a wl_surface object, which allows the client\nto hint to the compositor if the content on the surface is suitable for\npresentation with tearing.\nThe default presentation hint is vsync. See presentation_hint for more\ndetails.\n\nIf the associated wl_surface is destroyed, this object becomes inert and\nshould be destroyed.",
        "summary": "per-surface tearing control interface"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_presentation_hint",
          "description": {
            "type": "description",
            "text": "Set the presentation hint for the associated wl_surface. This state is\ndouble-buffered, see wl_surface.commit.\n\nThe compositor is free to dynamically respect or ignore this hint based\non various conditions like hardware capabilities, surface state and\nuser preferences.",
            "summary": "set presentation hint"
          },
          "args": [
            {
              "type": "arg",
              "name": "hint",
              "argType": "uint",
              "enum": "presentation_hint"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy this surface tearing object and revert the presentation hint to\nvsync. The change will be applied on the next wl_surface.commit.",
            "summary": "destroy tearing control object"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "presentation_hint",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This enum provides information for if submitted frames from the client\nmay be presented with tearing.",
            "summary": "presentation hint values"
          },
          "entries": [
            {
              "type": "entry",
              "name": "vsync",
              "value": "0",
              "description": {
                "type": "description",
                "text": "The content of this surface is meant to be synchronized to the\nvertical blanking period. This should not result in visible tearing\nand may result in a delay before a surface commit is presented.",
                "summary": "tearing-free presentation"
              }
            },
            {
              "type": "entry",
              "name": "async",
              "value": "1",
              "description": {
                "type": "description",
                "text": "The content of this surface is meant to be presented with minimal\nlatency and tearing is acceptable.",
                "summary": "asynchronous presentation"
              }
            }
          ]
        }
      ]
    }
  ]
}
