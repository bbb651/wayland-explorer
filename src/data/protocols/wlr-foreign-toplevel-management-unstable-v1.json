{
  "type": "protocol",
  "name": "wlr_foreign_toplevel_management_unstable_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2018 Ilia Bozhinov\n\nPermission to use, copy, modify, distribute, and sell this\nsoftware and its documentation for any purpose is hereby granted\nwithout fee, provided that the above copyright notice appear in\nall copies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nthe copyright holders not be used in advertising or publicity\npertaining to distribution of the software without specific,\nwritten prior permission.  The copyright holders make no\nrepresentations about the suitability of this software for any\npurpose.  It is provided \"as is\" without express or implied\nwarranty.\n\nTHE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY\nSPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\nAN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zwlr_foreign_toplevel_manager_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "The purpose of this protocol is to enable the creation of taskbars\nand docks by providing them with a list of opened applications and\nletting them request certain actions on them, like maximizing, etc.\n\nAfter a client binds the zwlr_foreign_toplevel_manager_v1, each opened\ntoplevel window will be sent via the toplevel event",
        "summary": "list and control opened apps"
      },
      "requests": [
        {
          "type": "request",
          "name": "stop",
          "description": {
            "type": "description",
            "text": "Indicates the client no longer wishes to receive events for new toplevels.\nHowever the compositor may emit further toplevel_created events, until\nthe finished event is emitted.\n\nThe client must not send any more requests after this one.",
            "summary": "stop sending events"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "toplevel",
          "description": {
            "type": "description",
            "text": "This event is emitted whenever a new toplevel window is created. It\nis emitted for all toplevels, regardless of the app that has created\nthem.\n\nAll initial details of the toplevel(title, app_id, states, etc.) will\nbe sent immediately after this event via the corresponding events in\nzwlr_foreign_toplevel_handle_v1.",
            "summary": "a toplevel has been created"
          },
          "args": [
            {
              "type": "arg",
              "name": "toplevel",
              "argType": "new_id",
              "interface": "zwlr_foreign_toplevel_handle_v1"
            }
          ]
        },
        {
          "type": "event",
          "name": "finished",
          "eventType": "destructor",
          "description": {
            "type": "description",
            "text": "This event indicates that the compositor is done sending events to the\nzwlr_foreign_toplevel_manager_v1. The server will destroy the object\nimmediately after sending this request, so it will become invalid and\nthe client should free any resources associated with it.",
            "summary": "the compositor has finished with the toplevel manager"
          },
          "args": []
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "zwlr_foreign_toplevel_handle_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "A zwlr_foreign_toplevel_handle_v1 object represents an opened toplevel\nwindow. Each app may have multiple opened toplevels.\n\nEach toplevel has a list of outputs it is visible on, conveyed to the\nclient with the output_enter and output_leave events.",
        "summary": "an opened toplevel"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_maximized",
          "description": {
            "type": "description",
            "text": "Requests that the toplevel be maximized. If the maximized state actually\nchanges, this will be indicated by the state event.",
            "summary": "requests that the toplevel be maximized"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "unset_maximized",
          "description": {
            "type": "description",
            "text": "Requests that the toplevel be unmaximized. If the maximized state actually\nchanges, this will be indicated by the state event.",
            "summary": "requests that the toplevel be unmaximized"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_minimized",
          "description": {
            "type": "description",
            "text": "Requests that the toplevel be minimized. If the minimized state actually\nchanges, this will be indicated by the state event.",
            "summary": "requests that the toplevel be minimized"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "unset_minimized",
          "description": {
            "type": "description",
            "text": "Requests that the toplevel be unminimized. If the minimized state actually\nchanges, this will be indicated by the state event.",
            "summary": "requests that the toplevel be unminimized"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "activate",
          "description": {
            "type": "description",
            "text": "Request that this toplevel be activated on the given seat.\nThere is no guarantee the toplevel will be actually activated.",
            "summary": "activate the toplevel"
          },
          "args": [
            {
              "type": "arg",
              "name": "seat",
              "argType": "object",
              "interface": "wl_seat",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "close",
          "description": {
            "type": "description",
            "text": "Send a request to the toplevel to close itself. The compositor would\ntypically use a shell-specific method to carry out this request, for\nexample by sending the xdg_toplevel.close event. However, this gives\nno guarantees the toplevel will actually be destroyed. If and when\nthis happens, the zwlr_foreign_toplevel_handle_v1.closed event will\nbe emitted.",
            "summary": "request that the toplevel be closed"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_rectangle",
          "description": {
            "type": "description",
            "text": "The rectangle of the surface specified in this request corresponds to\nthe place where the app using this protocol represents the given toplevel.\nIt can be used by the compositor as a hint for some operations, e.g\nminimizing. The client is however not required to set this, in which\ncase the compositor is free to decide some default value.\n\nIf the client specifies more than one rectangle, only the last one is\nconsidered.\n\nThe dimensions are given in surface-local coordinates.\nSetting width=height=0 removes the already-set rectangle.",
            "summary": "the rectangle which represents the toplevel"
          },
          "args": [
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "x",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "width",
              "argType": "int"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroys the zwlr_foreign_toplevel_handle_v1 object.\n\nThis request should be called either when the client does not want to\nuse the toplevel anymore or after the closed event to finalize the\ndestruction of the object.",
            "summary": "destroy the zwlr_foreign_toplevel_handle_v1 object"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_fullscreen",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Requests that the toplevel be fullscreened on the given output. If the\nfullscreen state and/or the outputs the toplevel is visible on actually\nchange, this will be indicated by the state and output_enter/leave\nevents.\n\nThe output parameter is only a hint to the compositor. Also, if output\nis NULL, the compositor should decide which output the toplevel will be\nfullscreened on, if at all.",
            "summary": "request that the toplevel be fullscreened"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "allowNull": "true",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_fullscreen",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Requests that the toplevel be unfullscreened. If the fullscreen state\nactually changes, this will be indicated by the state event.",
            "summary": "request that the toplevel be unfullscreened"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "title",
          "description": {
            "type": "description",
            "text": "This event is emitted whenever the title of the toplevel changes.",
            "summary": "title change"
          },
          "args": [
            {
              "type": "arg",
              "name": "title",
              "argType": "string"
            }
          ]
        },
        {
          "type": "event",
          "name": "app_id",
          "description": {
            "type": "description",
            "text": "This event is emitted whenever the app-id of the toplevel changes.",
            "summary": "app-id change"
          },
          "args": [
            {
              "type": "arg",
              "name": "app_id",
              "argType": "string"
            }
          ]
        },
        {
          "type": "event",
          "name": "output_enter",
          "description": {
            "type": "description",
            "text": "This event is emitted whenever the toplevel becomes visible on\nthe given output. A toplevel may be visible on multiple outputs.",
            "summary": "toplevel entered an output"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "output_leave",
          "description": {
            "type": "description",
            "text": "This event is emitted whenever the toplevel stops being visible on\nthe given output. It is guaranteed that an entered-output event\nwith the same output has been emitted before this event.",
            "summary": "toplevel left an output"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "event",
          "name": "state",
          "description": {
            "type": "description",
            "text": "This event is emitted immediately after the zlw_foreign_toplevel_handle_v1\nis created and each time the toplevel state changes, either because of a\ncompositor action or because of a request in this protocol.",
            "summary": "the toplevel state changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "state",
              "argType": "array"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "This event is sent after all changes in the toplevel state have been\nsent.\n\nThis allows changes to the zwlr_foreign_toplevel_handle_v1 properties\nto be seen as atomic, even if they happen via multiple events.",
            "summary": "all information about the toplevel has been sent"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "closed",
          "description": {
            "type": "description",
            "text": "This event means the toplevel has been destroyed. It is guaranteed there\nwon't be any more events for this zwlr_foreign_toplevel_handle_v1. The\ntoplevel itself becomes inert so any requests will be ignored except the\ndestroy request.",
            "summary": "this toplevel has been destroyed"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "parent",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This event is emitted whenever the parent of the toplevel changes.\n\nNo event is emitted when the parent handle is destroyed by the client.",
            "summary": "parent change"
          },
          "args": [
            {
              "type": "arg",
              "name": "parent",
              "argType": "object",
              "interface": "zwlr_foreign_toplevel_handle_v1",
              "allowNull": "true"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "state",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "The different states that a toplevel can have. These have the same meaning\nas the states with the same names defined in xdg-toplevel",
            "summary": "types of states on the toplevel"
          },
          "entries": [
            {
              "type": "entry",
              "name": "maximized",
              "value": "0",
              "summary": "the toplevel is maximized"
            },
            {
              "type": "entry",
              "name": "minimized",
              "value": "1",
              "summary": "the toplevel is minimized"
            },
            {
              "type": "entry",
              "name": "activated",
              "value": "2",
              "summary": "the toplevel is active"
            },
            {
              "type": "entry",
              "name": "fullscreen",
              "value": "3",
              "summary": "the toplevel is fullscreen",
              "since": "2"
            }
          ]
        },
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_rectangle",
              "value": "0",
              "summary": "the provided rectangle is invalid"
            }
          ]
        }
      ]
    }
  ]
}
