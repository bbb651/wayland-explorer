{
  "type": "protocol",
  "name": "agl_screenshooter",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2020 Collabora. Ltd,\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "agl_screenshooter",
      "version": "1",
      "description": {
        "type": "description",
        "text": "agl compositor extension that performs a screenshot of the output, which\nis represented by a 'wl_output' object.\n\nA client would call 'take_shot' request and wait until the compositor\nfinishes to write the data to a wayland buffer, moment in which signals\nback the client with the help of the 'done' event. Clients should wait\nuntil the 'done' event is received, if they want to take another\nscreenshot, or take another screnshot of a different output.\n\nThe client must provide a wl_shm-based wl_buffer of the correct size when\ntaking a shot. The compositor will write the shot into the wl_buffer and then\nsend the 'done' event that signals completion of writing the data.\n\nOnce the compositor has finished to transfer the data back into the supplied\nwayland buffer, the client should be able to transfer it to a popular\nfile format on the disk.",
        "summary": "agl screenshooter"
      },
      "requests": [
        {
          "type": "request",
          "name": "take_shot",
          "description": {
            "type": "description",
            "text": "Takes a screenshot of the wayland output represented by a 'wl_output'\nobject. Clients should first retrieve it using global registry, as well\nas the 'wl_shm' object in order to create a wayland buffer type of\nobject ('wl_buffer').\n\nClients can derive the stride and size from the 'wl_output' object, and\nlater on use those when creating shm-based 'wl_buffer', as well as supplying\nthe pixel format.",
            "summary": "performs a screenshot"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroys the 'weston_screenshooter' interface.",
            "summary": "destroy main object"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "Even sent back to notify client 'take_shot' request has completed.",
            "summary": "sent when 'take_shot' finished"
          },
          "args": [
            {
              "type": "arg",
              "name": "status",
              "argType": "uint",
              "enum": "done_status"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "done_status",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "success",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "no_memory",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "bad_buffer",
              "value": "2"
            }
          ]
        }
      ]
    }
  ]
}
