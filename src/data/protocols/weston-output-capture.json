{
  "type": "protocol",
  "name": "weston_output_capture",
  "copyright": {
    "type": "copyright",
    "text": "Copyright 2020, 2022 Collabora, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "weston_capture_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The global interface exposing Weston screenshooting functionality\nintended for single shots.\n\nThis is a privileged inteface.",
        "summary": "image capture factory"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Affects no other protocol objects in any way.",
            "summary": "unbind image capture factory"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "create",
          "description": {
            "type": "description",
            "text": "This creates a weston_capture_source_v1 object corresponding to the\ngiven wl_output. The object delivers information for allocating\nsuitable buffers, and exposes the capture function.\n\nThe object will be using the given pixel source for capturing images.\nIf the source is not available, all attempts to capture will fail\ngracefully.\n\n'writeback' source will use hardware writeback feature of DRM KMS for\ncapturing. This may allow hardware planes to remain used\nduring the capture. This source is often not available.\n\n'framebuffer' source copies the contents of the final framebuffer.\nUsing this source temporarily disables all use of hardware planes and\nDRM KMS color pipeline features. This source is always available.\n\n'full_framebuffer' is otherwise the same as 'framebuffer' except it\nwill include also any borders (decorations) that the framebuffer may\ncontain.\n\n'blending' source copies the contents of the intermediate blending\nbuffer, which should be in linear-light format.  Using this source\ntemporarily disables all use of hardware planes. This source is only\navailable when a blending buffer exists, e.g. when color management\nis active on the output.\n\nIf the pixel source is not one of the defined enumeration values,\n'invalid_source' protocol error is raised.",
            "summary": "create an object for capturing output images"
          },
          "args": [
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "summary": "output to shoot",
              "interface": "wl_output",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "source",
              "argType": "uint",
              "summary": "pixel source",
              "enum": "source"
            },
            {
              "type": "arg",
              "name": "capture_source_new_id",
              "argType": "new_id",
              "summary": "new object",
              "interface": "weston_capture_source_v1"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "invalid_source",
              "value": "0",
              "summary": "invalid source enum value"
            }
          ]
        },
        {
          "type": "enum",
          "name": "source",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "writeback",
              "value": "0",
              "summary": "use hardware writeback"
            },
            {
              "type": "entry",
              "name": "framebuffer",
              "value": "1",
              "summary": "copy from framebuffer, desktop area"
            },
            {
              "type": "entry",
              "name": "full_framebuffer",
              "value": "2",
              "summary": "copy whole framebuffer, including borders"
            },
            {
              "type": "entry",
              "name": "blending",
              "value": "3",
              "summary": "copy from blending space"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "weston_capture_source_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "An object representing image capturing functionality for a single\nsource. When created, it sends the initial events if and only if the\noutput still exists and the specified pixel source is available on\nthe output.",
        "summary": "image capturing source"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "If a capture is on-going on this object, this will cancel it and\nmake the image buffer contents undefined.\n\nThis object is destroyed.",
            "summary": "cancel the capture, and destroy"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "capture",
          "description": {
            "type": "description",
            "text": "If the given wl_buffer is compatible, the associated output will go\nthrough a repaint some time after this request has been processed,\nand that repaint will execute the capture.\nOnce the capture is complete, 'complete' event is emitted.\n\nIf the given wl_buffer is incompatible, the event 'retry' is\nemitted.\n\nIf the capture fails or the buffer type is unsupported, the event\n'failed' is emitted.\n\nThe client must wait for one of these events before attempting\n'capture' on this object again. If 'capture' is requested again before\nany of those events, 'sequence' protocol error is raised.\n\nThe wl_buffer object will not emit wl_buffer.release event due to\nthis request.\n\nThe wl_buffer must refer to compositor-writable storage. If buffer\nstorage is not writable, either the protocol error bad_buffer or\nwl_shm.error.invalid_fd is raised.\n\nIf the wl_buffer is destroyed before any event is emitted, the buffer\ncontents become undefined.\n\nA compositor is required to implement capture into wl_shm buffers.\nOther buffer types may or may not be supported.",
            "summary": "capture an image"
          },
          "args": [
            {
              "type": "arg",
              "name": "buffer",
              "argType": "object",
              "summary": "a writable image buffer",
              "interface": "wl_buffer",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "format",
          "description": {
            "type": "description",
            "text": "This event delivers the pixel format that should be used for the\nimage buffer. Any buffer is incompatible if it does not have\nthis pixel format.\n\nThe format modifier is linear (DRM_FORMAT_MOD_LINEAR).\n\nThis is an initial event, and sent whenever the required format\nchanges.",
            "summary": "pixel format for a buffer"
          },
          "args": [
            {
              "type": "arg",
              "name": "drm_format",
              "argType": "uint",
              "summary": "DRM pixel format code"
            }
          ]
        },
        {
          "type": "event",
          "name": "size",
          "description": {
            "type": "description",
            "text": "This event delivers the size that should be used for the\nimage buffer. Any buffer is incompatible if it does not have\nthis size.\n\nRow alignment of the buffer must be 4 bytes, and it must not contain\nfurther row padding. Otherwise the buffer is unsupported.\n\nThis is an initial event, and sent whenever the required size\nchanges.",
            "summary": "dimensions for a buffer"
          },
          "args": [
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "width in pixels"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "height in pixels"
            }
          ]
        },
        {
          "type": "event",
          "name": "complete",
          "description": {
            "type": "description",
            "text": "This event is emitted as a response to 'capture' request when it\nhas successfully completed.\n\nIf the buffer used in the shot is a dmabuf, the client also needs to\nwait for any implicit fences on it before accessing the contents.",
            "summary": "capture has completed"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "retry",
          "description": {
            "type": "description",
            "text": "This event is emitted as a response to 'capture' request when it\ncannot succeed due to an incompatible buffer. The client has already\nreceived the events delivering the new buffer parameters. The client\nshould retry the capture with the new buffer parameters.",
            "summary": "retry image capture with a different buffer"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "failed",
          "description": {
            "type": "description",
            "text": "This event is emitted as a response to 'capture' request when it\nhas failed for reasons other than an incompatible buffer. The reasons\nmay include: unsupported buffer type, unsupported buffer stride,\nunsupported image source, the image source (output) was removed, or\ncompositor policy denied the capture.\n\nThe string 'msg' may contain a human-readable explanation of the\nfailure to aid debugging.",
            "summary": "capture failed"
          },
          "args": [
            {
              "type": "arg",
              "name": "msg",
              "argType": "string",
              "summary": "human-readable hint",
              "allowNull": "true"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "bad_buffer",
              "value": "0",
              "summary": "the wl_buffer is not writable"
            },
            {
              "type": "entry",
              "name": "sequence",
              "value": "1",
              "summary": "capture requested again before previous retired"
            }
          ]
        }
      ]
    }
  ]
}
