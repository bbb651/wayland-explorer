{
  "type": "protocol",
  "name": "kde_output_device_v2",
  "copyright": {
    "type": "copyright",
    "text": "\nSPDX-FileCopyrightText: 2008-2011 Kristian Høgsberg\nSPDX-FileCopyrightText: 2010-2011 Intel Corporation\nSPDX-FileCopyrightText: 2012-2013 Collabora, Ltd.\nSPDX-FileCopyrightText: 2015 Sebastian Kügler <sebas@kde.org>\nSPDX-FileCopyrightText: 2021 Méven Car <meven.car@enioka.com>\n\nSPDX-License-Identifier: MIT-CMU\n"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "kde_output_device_v2",
      "version": "9",
      "description": {
        "type": "description",
        "text": "An output device describes a display device available to the compositor.\noutput_device is similar to wl_output, but focuses on output\nconfiguration management.\n\nA client can query all global output_device objects to enlist all\navailable display devices, even those that may currently not be\nrepresented by the compositor as a wl_output.\n\nThe client sends configuration changes to the server through the\noutputconfiguration interface, and the server applies the configuration\nchanges to the hardware and signals changes to the output devices\naccordingly.\n\nThis object is published as global during start up for every available\ndisplay devices, or when one later becomes available, for example by\nbeing hotplugged via a physical connector.\n\nWarning! The protocol described in this file is a desktop environment\nimplementation detail. Regular clients must not use this protocol.\nBackward incompatible changes may be added without bumping the major\nversion of the extension.",
        "summary": "output configuration representation"
      },
      "requests": [],
      "events": [
        {
          "type": "event",
          "name": "geometry",
          "description": {
            "type": "description",
            "text": "The geometry event describes geometric properties of the output.\nThe event is sent when binding to the output object and whenever\nany of the properties change.",
            "summary": "geometric properties of the output"
          },
          "args": [
            {
              "type": "arg",
              "name": "x",
              "argType": "int",
              "summary": "x position within the global compositor space"
            },
            {
              "type": "arg",
              "name": "y",
              "argType": "int",
              "summary": "y position within the global compositor space"
            },
            {
              "type": "arg",
              "name": "physical_width",
              "argType": "int",
              "summary": "width in millimeters of the output"
            },
            {
              "type": "arg",
              "name": "physical_height",
              "argType": "int",
              "summary": "height in millimeters of the output"
            },
            {
              "type": "arg",
              "name": "subpixel",
              "argType": "int",
              "summary": "subpixel orientation of the output"
            },
            {
              "type": "arg",
              "name": "make",
              "argType": "string",
              "summary": "textual description of the manufacturer"
            },
            {
              "type": "arg",
              "name": "model",
              "argType": "string",
              "summary": "textual description of the model"
            },
            {
              "type": "arg",
              "name": "transform",
              "argType": "int",
              "summary": "transform that maps framebuffer to output"
            }
          ]
        },
        {
          "type": "event",
          "name": "current_mode",
          "description": {
            "type": "description",
            "text": "This event describes the mode currently in use for this head. It is only\nsent if the output is enabled.",
            "summary": "current mode"
          },
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "object",
              "interface": "kde_output_device_mode_v2"
            }
          ]
        },
        {
          "type": "event",
          "name": "mode",
          "description": {
            "type": "description",
            "text": "The mode event describes an available mode for the output.\n\nWhen the client binds to the output_device object, the server sends this\nevent once for every available mode the output_device can be operated by.\n\nThere will always be at least one event sent out on initial binding,\nwhich represents the current mode.\n\nLater if an output changes, its mode event is sent again for the\neventual added modes and lastly the current mode. In other words, the\ncurrent mode is always represented by the latest event sent with the current\nflag set.\n\nThe size of a mode is given in physical hardware units of the output device.\nThis is not necessarily the same as the output size in the global compositor\nspace. For instance, the output may be scaled, as described in\nkde_output_device_v2.scale, or transformed, as described in\nkde_output_device_v2.transform.",
            "summary": "advertise available output modes and current one"
          },
          "args": [
            {
              "type": "arg",
              "name": "mode",
              "argType": "new_id",
              "interface": "kde_output_device_mode_v2"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "This event is sent after all other properties have been\nsent on binding to the output object as well as after any\nother output property change have been applied later on.\nThis allows to see changes to the output properties as atomic,\neven if multiple events successively announce them.",
            "summary": "sent all information about output"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "scale",
          "description": {
            "type": "description",
            "text": "This event contains scaling geometry information\nthat is not in the geometry event. It may be sent after\nbinding the output object or if the output scale changes\nlater. If it is not sent, the client should assume a\nscale of 1.\n\nA scale larger than 1 means that the compositor will\nautomatically scale surface buffers by this amount\nwhen rendering. This is used for high resolution\ndisplays where applications rendering at the native\nresolution would be too small to be legible.\n\nIt is intended that scaling aware clients track the\ncurrent output of a surface, and if it is on a scaled\noutput it should use wl_surface.set_buffer_scale with\nthe scale of the output. That way the compositor can\navoid scaling the surface, and the client can supply\na higher detail image.",
            "summary": "output scaling properties"
          },
          "args": [
            {
              "type": "arg",
              "name": "factor",
              "argType": "fixed",
              "summary": "scaling factor of output"
            }
          ]
        },
        {
          "type": "event",
          "name": "edid",
          "description": {
            "type": "description",
            "text": "The edid event encapsulates the EDID data for the outputdevice.\n\nThe event is sent when binding to the output object. The EDID\ndata may be empty, in which case this event is sent anyway.\nIf the EDID information is empty, you can fall back to the name\net al. properties of the outputdevice.",
            "summary": "advertise EDID data for the output"
          },
          "args": [
            {
              "type": "arg",
              "name": "raw",
              "argType": "string",
              "summary": "base64-encoded EDID string"
            }
          ]
        },
        {
          "type": "event",
          "name": "enabled",
          "description": {
            "type": "description",
            "text": "The enabled event notifies whether this output is currently\nenabled and used for displaying content by the server.\nThe event is sent when binding to the output object and\nwhenever later on an output changes its state by becoming\nenabled or disabled.",
            "summary": "output is enabled or disabled"
          },
          "args": [
            {
              "type": "arg",
              "name": "enabled",
              "argType": "int",
              "summary": "output enabled state"
            }
          ]
        },
        {
          "type": "event",
          "name": "uuid",
          "description": {
            "type": "description",
            "text": "The uuid can be used to identify the output. It's controlled by\nthe server entirely. The server should make sure the uuid is\npersistent across restarts. An empty uuid is considered invalid.",
            "summary": "A unique id for this outputdevice"
          },
          "args": [
            {
              "type": "arg",
              "name": "uuid",
              "argType": "string",
              "summary": "output devices ID"
            }
          ]
        },
        {
          "type": "event",
          "name": "serial_number",
          "description": {
            "type": "description",
            "text": "Serial ID of the monitor, sent on startup before the first done event.",
            "summary": "Serial Number"
          },
          "args": [
            {
              "type": "arg",
              "name": "serialNumber",
              "argType": "string",
              "summary": "textual representation of serial number"
            }
          ]
        },
        {
          "type": "event",
          "name": "eisa_id",
          "description": {
            "type": "description",
            "text": "EISA ID of the monitor, sent on startup before the first done event.",
            "summary": "EISA ID"
          },
          "args": [
            {
              "type": "arg",
              "name": "eisaId",
              "argType": "string",
              "summary": "textual representation of EISA identifier"
            }
          ]
        },
        {
          "type": "event",
          "name": "capabilities",
          "description": {
            "type": "description",
            "text": "What capabilities this device has, sent on startup before the first\ndone event.",
            "summary": "capability flags"
          },
          "args": [
            {
              "type": "arg",
              "name": "flags",
              "argType": "uint",
              "enum": "capability"
            }
          ]
        },
        {
          "type": "event",
          "name": "overscan",
          "description": {
            "type": "description",
            "text": "Overscan value of the monitor in percent, sent on startup before the\nfirst done event.",
            "summary": "overscan"
          },
          "args": [
            {
              "type": "arg",
              "name": "overscan",
              "argType": "uint",
              "summary": "amount of overscan of the monitor"
            }
          ]
        },
        {
          "type": "event",
          "name": "vrr_policy",
          "description": {
            "type": "description",
            "text": "What policy the compositor will employ regarding its use of variable\nrefresh rate.",
            "summary": "Variable Refresh Rate Policy"
          },
          "args": [
            {
              "type": "arg",
              "name": "vrr_policy",
              "argType": "uint",
              "enum": "vrr_policy"
            }
          ]
        },
        {
          "type": "event",
          "name": "rgb_range",
          "description": {
            "type": "description",
            "text": "What rgb range the compositor is using for this output",
            "summary": "RGB range"
          },
          "args": [
            {
              "type": "arg",
              "name": "rgb_range",
              "argType": "uint",
              "enum": "rgb_range"
            }
          ]
        },
        {
          "type": "event",
          "name": "name",
          "since": "2",
          "description": {
            "type": "description",
            "text": "Name of the output, it's useful to cross-reference to an zxdg_output_v1 and ultimately QScreen",
            "summary": "Output's name"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string"
            }
          ]
        },
        {
          "type": "event",
          "name": "high_dynamic_range",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Whether or not high dynamic range is enabled for this output",
            "summary": "if HDR is enabled"
          },
          "args": [
            {
              "type": "arg",
              "name": "hdr_enabled",
              "argType": "uint",
              "summary": "1 if enabled, 0 if disabled"
            }
          ]
        },
        {
          "type": "event",
          "name": "sdr_brightness",
          "since": "3",
          "description": {
            "type": "description",
            "text": "If high dynamic range is used, this value defines the brightness in nits for content\nthat's in standard dynamic range format. Note that while the value is in nits, that\ndoesn't necessarily translate to the same brightness on the screen.",
            "summary": "the brightness of sdr if hdr is enabled"
          },
          "args": [
            {
              "type": "arg",
              "name": "sdr_brightness",
              "argType": "uint"
            }
          ]
        },
        {
          "type": "event",
          "name": "wide_color_gamut",
          "since": "3",
          "description": {
            "type": "description",
            "text": "Whether or not the use of a wide color gamut is enabled for this output",
            "summary": "if WCG is enabled"
          },
          "args": [
            {
              "type": "arg",
              "name": "wcg_enabled",
              "argType": "uint",
              "summary": "1 if enabled, 0 if disabled"
            }
          ]
        },
        {
          "type": "event",
          "name": "auto_rotate_policy",
          "since": "4",
          "description": {
            "type": "description",
            "summary": "describes when auto rotate is used"
          },
          "args": [
            {
              "type": "arg",
              "name": "policy",
              "argType": "uint",
              "enum": "auto_rotate_policy"
            }
          ]
        },
        {
          "type": "event",
          "name": "icc_profile_path",
          "since": "5",
          "description": {
            "type": "description",
            "summary": "describes when auto rotate is used"
          },
          "args": [
            {
              "type": "arg",
              "name": "profile_path",
              "argType": "string"
            }
          ]
        },
        {
          "type": "event",
          "name": "brightness_metadata",
          "since": "6",
          "description": {
            "type": "description",
            "summary": "metadata about the screen's brightness limits"
          },
          "args": [
            {
              "type": "arg",
              "name": "max_peak_brightness",
              "argType": "uint",
              "summary": "in nits"
            },
            {
              "type": "arg",
              "name": "max_frame_average_brightness",
              "argType": "uint",
              "summary": "in nits"
            },
            {
              "type": "arg",
              "name": "min_brightness",
              "argType": "uint",
              "summary": "in 0.0001 nits"
            }
          ]
        },
        {
          "type": "event",
          "name": "brightness_overrides",
          "since": "6",
          "description": {
            "type": "description",
            "summary": "overrides for the screen's brightness limits"
          },
          "args": [
            {
              "type": "arg",
              "name": "max_peak_brightness",
              "argType": "int",
              "summary": "-1 for no override, positive values are the brightness in nits"
            },
            {
              "type": "arg",
              "name": "max_average_brightness",
              "argType": "int",
              "summary": "-1 for no override, positive values are the brightness in nits"
            },
            {
              "type": "arg",
              "name": "min_brightness",
              "argType": "int",
              "summary": "-1 for no override, positive values are the brightness in 0.0001 nits"
            }
          ]
        },
        {
          "type": "event",
          "name": "sdr_gamut_wideness",
          "since": "6",
          "description": {
            "type": "description",
            "text": "This can be used to provide the colors users assume sRGB applications should have based on the\ndefault experience on many modern sRGB screens.",
            "summary": "describes which gamut is assumed for sRGB applications"
          },
          "args": [
            {
              "type": "arg",
              "name": "gamut_wideness",
              "argType": "uint",
              "summary": "0 means rec.709 primaries, 10000 means native primaries"
            }
          ]
        },
        {
          "type": "event",
          "name": "color_profile_source",
          "since": "7",
          "description": {
            "type": "description",
            "summary": "describes which source the compositor uses for the color profile on an output"
          },
          "args": [
            {
              "type": "arg",
              "name": "source",
              "argType": "uint",
              "enum": "color_profile_source"
            }
          ]
        },
        {
          "type": "event",
          "name": "brightness",
          "since": "8",
          "description": {
            "type": "description",
            "text": "This is the brightness modifier of the output. It doesn't specify\nany absolute values, but is merely a multiplier on top of other\nbrightness values, like sdr_brightness and brightness_metadata.\n0 is the minimum brightness (not completely dark) and 10000 is\nthe maximum brightness.\nThis is currently only supported / meaningful while HDR is active.",
            "summary": "brightness multiplier"
          },
          "args": [
            {
              "type": "arg",
              "name": "brightness",
              "argType": "uint",
              "summary": "brightness in 0-10000"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "subpixel",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This enumeration describes how the physical pixels on an output are\nlaid out.",
            "summary": "subpixel geometry information"
          },
          "entries": [
            {
              "type": "entry",
              "name": "unknown",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "none",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "horizontal_rgb",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "horizontal_bgr",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "vertical_rgb",
              "value": "4"
            },
            {
              "type": "entry",
              "name": "vertical_bgr",
              "value": "5"
            }
          ]
        },
        {
          "type": "enum",
          "name": "transform",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "This describes the transform, that a compositor will apply to a\nsurface to compensate for the rotation or mirroring of an\noutput device.\n\nThe flipped values correspond to an initial flip around a\nvertical axis followed by rotation.\n\nThe purpose is mainly to allow clients to render accordingly and\ntell the compositor, so that for fullscreen surfaces, the\ncompositor is still able to scan out directly client surfaces.",
            "summary": "transform from framebuffer to output"
          },
          "entries": [
            {
              "type": "entry",
              "name": "normal",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "90",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "180",
              "value": "2"
            },
            {
              "type": "entry",
              "name": "270",
              "value": "3"
            },
            {
              "type": "entry",
              "name": "flipped",
              "value": "4"
            },
            {
              "type": "entry",
              "name": "flipped_90",
              "value": "5"
            },
            {
              "type": "entry",
              "name": "flipped_180",
              "value": "6"
            },
            {
              "type": "entry",
              "name": "flipped_270",
              "value": "7"
            }
          ]
        },
        {
          "type": "enum",
          "name": "capability",
          "bitfield": true,
          "description": {
            "type": "description",
            "text": "Describes what capabilities this device has.",
            "summary": "describes capabilities of the outputdevice"
          },
          "entries": [
            {
              "type": "entry",
              "name": "overscan",
              "value": "0x1",
              "summary": "if this output_device can use overscan"
            },
            {
              "type": "entry",
              "name": "vrr",
              "value": "0x2",
              "summary": "if this outputdevice supports variable refresh rate"
            },
            {
              "type": "entry",
              "name": "rgb_range",
              "value": "0x4",
              "summary": "if setting the rgb range is possible"
            },
            {
              "type": "entry",
              "name": "high_dynamic_range",
              "value": "0x8",
              "summary": "if this outputdevice supports high dynamic range",
              "since": "3"
            },
            {
              "type": "entry",
              "name": "wide_color_gamut",
              "value": "0x10",
              "summary": "if this outputdevice supports a wide color gamut",
              "since": "3"
            },
            {
              "type": "entry",
              "name": "auto_rotate",
              "value": "0x20",
              "summary": "if this outputdevice supports autorotation",
              "since": "4"
            },
            {
              "type": "entry",
              "name": "icc_profile",
              "value": "0x40",
              "summary": "if this outputdevice supports icc profiles",
              "since": "5"
            },
            {
              "type": "entry",
              "name": "brightness",
              "value": "0x80",
              "summary": "if this outputdevice supports the brightness setting",
              "since": "9"
            }
          ]
        },
        {
          "type": "enum",
          "name": "vrr_policy",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Describes when the compositor may employ variable refresh rate",
            "summary": "describes vrr policy"
          },
          "entries": [
            {
              "type": "entry",
              "name": "never",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "always",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "automatic",
              "value": "2"
            }
          ]
        },
        {
          "type": "enum",
          "name": "rgb_range",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Whether full or limited color range should be used",
            "summary": "describes RGB range policy"
          },
          "entries": [
            {
              "type": "entry",
              "name": "automatic",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "full",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "limited",
              "value": "2"
            }
          ]
        },
        {
          "type": "enum",
          "name": "auto_rotate_policy",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "describes when auto rotate should be used"
          },
          "entries": [
            {
              "type": "entry",
              "name": "never",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "in_tablet_mode",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "always",
              "value": "2"
            }
          ]
        },
        {
          "type": "enum",
          "name": "color_profile_source",
          "since": "7",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "which source the compositor should use for the color profile on an output"
          },
          "entries": [
            {
              "type": "entry",
              "name": "sRGB",
              "value": "0"
            },
            {
              "type": "entry",
              "name": "ICC",
              "value": "1"
            },
            {
              "type": "entry",
              "name": "EDID",
              "value": "2"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "kde_output_device_mode_v2",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This object describes an output mode.\n\nSome heads don't support output modes, in which case modes won't be\nadvertised.\n\nProperties sent via this interface are applied atomically via the\nkde_output_device.done event. No guarantees are made regarding the order\nin which properties are sent.",
        "summary": "output mode"
      },
      "requests": [],
      "events": [
        {
          "type": "event",
          "name": "size",
          "description": {
            "type": "description",
            "text": "This event describes the mode size. The size is given in physical\nhardware units of the output device. This is not necessarily the same as\nthe output size in the global compositor space. For instance, the output\nmay be scaled or transformed.",
            "summary": "mode size"
          },
          "args": [
            {
              "type": "arg",
              "name": "width",
              "argType": "int",
              "summary": "width of the mode in hardware units"
            },
            {
              "type": "arg",
              "name": "height",
              "argType": "int",
              "summary": "height of the mode in hardware units"
            }
          ]
        },
        {
          "type": "event",
          "name": "refresh",
          "description": {
            "type": "description",
            "text": "This event describes the mode's fixed vertical refresh rate. It is only\nsent if the mode has a fixed refresh rate.",
            "summary": "mode refresh rate"
          },
          "args": [
            {
              "type": "arg",
              "name": "refresh",
              "argType": "int",
              "summary": "vertical refresh rate in mHz"
            }
          ]
        },
        {
          "type": "event",
          "name": "preferred",
          "description": {
            "type": "description",
            "text": "This event advertises this mode as preferred.",
            "summary": "mode is preferred"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "removed",
          "description": {
            "type": "description",
            "text": "The compositor will destroy the object immediately after sending this\nevent, so it will become invalid and the client should release any\nresources associated with it.",
            "summary": "the mode has been destroyed"
          },
          "args": []
        }
      ],
      "enums": []
    }
  ]
}
